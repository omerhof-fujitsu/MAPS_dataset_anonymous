[
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-3993",
    "base_commit": "8cc34cb412ba89ebca12fc84f76a9e452628f1bc",
    "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,21 +3481,26 @@ def differentiate(\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self,\n+        coord: Union[Hashable, Sequence[Hashable]] = None,\n+        datetime_unit: str = None,\n+        *,\n+        dim: Union[Hashable, Sequence[Hashable]] = None,\n     ) -> \"DataArray\":\n-        \"\"\" integrate the array with the trapezoidal rule.\n+        \"\"\"Integrate along the given coordinate using the trapezoidal rule.\n \n         .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n+            This feature is limited to simple cartesian geometry, i.e. coord\n             must be one dimensional.\n \n         Parameters\n         ----------\n+        coord: hashable, or a sequence of hashable\n+            Coordinate(s) used for the integration.\n         dim : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n-        datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n-                         \"ps\", \"fs\", \"as\"}, optional\n-            Can be used to specify the unit if datetime coordinate is used.\n+        datetime_unit: {'Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns', \\\n+                        'ps', 'fs', 'as'}, optional\n \n         Returns\n         -------\n@@ -3503,6 +3508,7 @@ def integrate(\n \n         See also\n         --------\n+        Dataset.integrate\n         numpy.trapz: corresponding numpy function\n \n         Examples\n@@ -3528,7 +3534,22 @@ def integrate(\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        if dim is not None and coord is not None:\n+            raise ValueError(\n+                \"Cannot pass both 'dim' and 'coord'. Please pass only 'coord' instead.\"\n+            )\n+\n+        if dim is not None and coord is None:\n+            coord = dim\n+            msg = (\n+                \"The `dim` keyword argument to `DataArray.integrate` is \"\n+                \"being replaced with `coord`, for consistency with \"\n+                \"`Dataset.integrate`. Please pass `coord` instead.\"\n+                \" `dim` will be removed in version 0.19.0.\"\n+            )\n+            warnings.warn(msg, FutureWarning, stacklevel=2)\n+\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -5963,8 +5963,10 @@ def differentiate(self, coord, edge_order=1, datetime_unit=None):\n                 variables[k] = v\n         return self._replace(variables)\n \n-    def integrate(self, coord, datetime_unit=None):\n-        \"\"\" integrate the array with the trapezoidal rule.\n+    def integrate(\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+    ) -> \"Dataset\":\n+        \"\"\"Integrate along the given coordinate using the trapezoidal rule.\n \n         .. note::\n             This feature is limited to simple cartesian geometry, i.e. coord\n@@ -5972,11 +5974,11 @@ def integrate(self, coord, datetime_unit=None):\n \n         Parameters\n         ----------\n-        coord: str, or sequence of str\n+        coord: hashable, or a sequence of hashable\n             Coordinate(s) used for the integration.\n-        datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n-                         \"ps\", \"fs\", \"as\"}, optional\n-            Can be specify the unit if datetime coordinate is used.\n+        datetime_unit: {'Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns', \\\n+                        'ps', 'fs', 'as'}, optional\n+            Specify the unit if datetime coordinate is used.\n \n         Returns\n         -------\n",
    "test_patch": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,9 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\ndiff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -3681,7 +3681,7 @@ def test_stacking_reordering(self, func, dtype):\n         (\n             method(\"diff\", dim=\"x\"),\n             method(\"differentiate\", coord=\"x\"),\n-            method(\"integrate\", dim=\"x\"),\n+            method(\"integrate\", coord=\"x\"),\n             method(\"quantile\", q=[0.25, 0.75]),\n             method(\"reduce\", func=np.sum, dim=\"x\"),\n             pytest.param(lambda x: x.dot(x), id=\"method_dot\"),\n",
    "problem_statement": "`DataArray.integrate` ha un argomento 'dim', ma `Dataset.integrate` ha un argomento 'coord'\nQuesto è solo un piccolo problema, ma penso che debba essere corretto.\r\n\r\nLa sintassi dell'API è incoerente:\r\n```python\r\nds.differentiate(coord='x')\r\nda.differentiate(coord='x')\r\nds.integrate(coord='x')\r\nda.integrate(dim='x')   # perché dim??\r\n```\r\nDovrebbe sicuramente essere `coord` - secondo me non ha senso integrare o differenziare rispetto a una dimensione perché una dimensione per definizione non contiene informazioni sulla distanza tra i punti della griglia. Poiché la distinzione tra dimensioni e coordinate è una delle cose che i nuovi utenti devono imparare, penso che dovremmo essere rigorosi per non confondere i significati nella documentazione/API.\r\n\r\nLa discussione sul PR originale [sembra concordare](https://github.com/pydata/xarray/pull/2653#discussion_r246164990), quindi penso che sia stato solo un piccolo errore.\r\n\r\nL'unica domanda è se richiede un ciclo di deprecazione?",
    "hints_text": "Acaba de encontrar que @max-sixty ya [lo señaló](https://github.com/pydata/xarray/pull/3469#pullrequestreview-309347524).\n\nMe está fastidiando, así que abriré un PR :)",
    "created_at": "2020-04-21T20:30:35Z",
    "version": "0.12",
    "FAIL_TO_PASS": "[\"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\", \"xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords_cftime\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_exp[1]\", \"xarray/tests/test_dataset.py::test_rolling_exp_keep_attrs[1]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_units.py::test_apply_ufunc_dataarray[float64-data]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataarray[float64-coords]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataarray[int64-data]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataarray[int64-coords]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataset[float64-data]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataset[float64-coords]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataset[int64-data]\", \"xarray/tests/test_units.py::test_apply_ufunc_dataset[int64-coords]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-10-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-10-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-10-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-10-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-10-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[float64-value1-coords-no_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-10-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-10-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-10-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-10-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-10-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataarray[int64-value1-coords-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-10-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-10-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataset[float64-10-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-10-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-10-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataset[float64-value1-coords-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-10-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-10-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataset[int64-10-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-10-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-10-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-data-no_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-data-dimensionless]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-data-compatible_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-data-identical_unit]\", \"xarray/tests/test_units.py::test_align_dataset[int64-value1-coords-no_unit]\", \"xarray/tests/test_units.py::test_broadcast_dataarray[float64]\", \"xarray/tests/test_units.py::test_broadcast_dataarray[int64]\", \"xarray/tests/test_units.py::test_broadcast_dataset[float64]\", \"xarray/tests/test_units.py::test_broadcast_dataset[int64]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_by_coords[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_combine_nested[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_combine_nested[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_combine_nested[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_combine_nested[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_combine_nested[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataarray[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_concat_dataset[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataarray[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-data-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-data-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-data-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-coords-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-data-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-data-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-data-identical_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-coords-no_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::test_merge_dataset[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::test_replication_dataarray[float64-zeros_like-data]\", \"xarray/tests/test_units.py::test_replication_dataarray[float64-zeros_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataarray[float64-ones_like-data]\", \"xarray/tests/test_units.py::test_replication_dataarray[float64-ones_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataarray[int64-zeros_like-data]\", \"xarray/tests/test_units.py::test_replication_dataarray[int64-zeros_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataarray[int64-ones_like-data]\", \"xarray/tests/test_units.py::test_replication_dataarray[int64-ones_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataset[float64-zeros_like-data]\", \"xarray/tests/test_units.py::test_replication_dataset[float64-zeros_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataset[float64-ones_like-data]\", \"xarray/tests/test_units.py::test_replication_dataset[float64-ones_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataset[int64-zeros_like-data]\", \"xarray/tests/test_units.py::test_replication_dataset[int64-zeros_like-coords]\", \"xarray/tests/test_units.py::test_replication_dataset[int64-ones_like-data]\", \"xarray/tests/test_units.py::test_replication_dataset[int64-ones_like-coords]\", \"xarray/tests/test_units.py::test_replication_full_like_dataarray[float64-data]\", \"xarray/tests/test_units.py::test_replication_full_like_dataarray[int64-data]\", \"xarray/tests/test_units.py::test_replication_full_like_dataset[float64-data]\", \"xarray/tests/test_units.py::test_replication_full_like_dataset[int64-data]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-nan-no_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-nan-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-nan-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-nan-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-nan-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-10.2-no_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-10.2-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-10.2-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-10.2-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[float64-10.2-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-nan-no_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-nan-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-nan-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-nan-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-nan-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-10.2-no_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-10.2-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-10.2-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-10.2-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataarray[int64-10.2-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-nan-no_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-nan-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataset[float64-nan-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-nan-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-nan-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-10.2-no_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-10.2-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataset[float64-10.2-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-10.2-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[float64-10.2-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-nan-no_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-nan-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataset[int64-nan-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-nan-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-nan-identical_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-10.2-no_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-10.2-dimensionless]\", \"xarray/tests/test_units.py::test_where_dataset[int64-10.2-incompatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-10.2-compatible_unit]\", \"xarray/tests/test_units.py::test_where_dataset[int64-10.2-identical_unit]\", \"xarray/tests/test_units.py::test_dot_dataarray[float64]\", \"xarray/tests/test_units.py::test_dot_dataarray[int64]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_all]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_any]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_argmax]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_argmin]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_argsort]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_cumprod]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_cumsum]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_max]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_mean]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_median]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_min]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_std]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_sum]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[float64-method_var]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_all]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_any]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_argmax]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_argmin]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_argsort]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_cumprod]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_cumsum]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_max]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_mean]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_median]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_min]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_prod]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_std]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_sum]\", \"xarray/tests/test_units.py::TestVariable::test_aggregation[int64-method_var]\", \"xarray/tests/test_units.py::TestVariable::test_aggregate_complex\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-no_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-no_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-no_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-dimensionless-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-dimensionless-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-dimensionless-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-incompatible_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-incompatible_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-incompatible_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-compatible_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-compatible_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-compatible_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-identical_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-identical_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-identical_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[float64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-no_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-no_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-no_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-dimensionless-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-dimensionless-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-dimensionless-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-incompatible_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-incompatible_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-incompatible_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-compatible_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-compatible_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-compatible_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-identical_unit-method_astype]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-identical_unit-method_conj]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-identical_unit-method_conjugate]\", \"xarray/tests/test_units.py::TestVariable::test_numpy_methods[int64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-no_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-no_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-dimensionless-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-dimensionless-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-incompatible_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-incompatible_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-compatible_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-compatible_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-identical_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[float64-identical_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-no_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-no_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-dimensionless-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-dimensionless-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-incompatible_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-incompatible_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-compatible_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-compatible_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-identical_unit-method_item]\", \"xarray/tests/test_units.py::TestVariable::test_raw_numpy_methods[int64-identical_unit-method_searchsorted]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_detection[method_isnull]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_detection[method_notnull]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_detection[method_count]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_fillna[no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_fillna[dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_fillna[incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_fillna[compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_missing_value_fillna[identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-no_conversion-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-no_conversion-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-no_conversion-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-no_conversion-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-no_conversion-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-with_conversion-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-with_conversion-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-with_conversion-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-with_conversion-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[float64-method_equals-with_conversion-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-no_conversion-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-no_conversion-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-no_conversion-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-no_conversion-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-no_conversion-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-with_conversion-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-with_conversion-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-with_conversion-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-with_conversion-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_comparisons[int64-method_equals-with_conversion-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[float64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[float64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[float64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[int64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[int64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_broadcast_equals[int64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_isel[float64-single\", \"xarray/tests/test_units.py::TestVariable::test_isel[float64-multiple\", \"xarray/tests/test_units.py::TestVariable::test_isel[int64-single\", \"xarray/tests/test_units.py::TestVariable::test_isel[int64-multiple\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_plus-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_plus-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_plus-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_plus-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_plus-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_minus-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_minus-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_minus-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_minus-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_unary_minus-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_absolute-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_absolute-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_absolute-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_absolute-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_absolute-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_sum-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_sum-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_sum-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_sum-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_sum-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_sum-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_sum-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_sum-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_sum-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_sum-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_product-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_product-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_product-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_product-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_product-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_product-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_product-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_product-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_product-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[float64-function_commutative_product-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_plus-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_plus-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_plus-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_plus-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_plus-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_minus-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_minus-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_minus-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_minus-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_unary_minus-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_absolute-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_absolute-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_absolute-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_absolute-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_absolute-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_sum-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_sum-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_sum-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_sum-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_sum-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_sum-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_sum-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_sum-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_sum-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_sum-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_product-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_product-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_product-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_product-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_product-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_product-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_product-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_product-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_product-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_1d_math[int64-function_commutative_product-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method_where-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method_where-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method_where-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method_where-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method_where-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method__getitem_with_mask-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method__getitem_with_mask-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method__getitem_with_mask-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method__getitem_with_mask-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[float64-method__getitem_with_mask-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method_where-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method_where-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method_where-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method_where-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method_where-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method__getitem_with_mask-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method__getitem_with_mask-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method__getitem_with_mask-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method__getitem_with_mask-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_masking[int64-method__getitem_with_mask-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[float64-x]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[float64-y]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[float64-z]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[float64-t]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[float64-all]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[int64-x]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[int64-y]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[int64-z]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[int64-t]\", \"xarray/tests/test_units.py::TestVariable::test_squeeze[int64-all]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_coarsen]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_quantile]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_roll]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_reduce]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_round]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_shift]\", \"xarray/tests/test_units.py::TestVariable::test_computation[float64-method_transpose]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_coarsen]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_quantile]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_roll]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_reduce]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_round]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_shift]\", \"xarray/tests/test_units.py::TestVariable::test_computation[int64-method_transpose]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[float64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[float64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[float64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[int64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[int64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_searchsorted[int64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_stack[float64]\", \"xarray/tests/test_units.py::TestVariable::test_stack[int64]\", \"xarray/tests/test_units.py::TestVariable::test_unstack[float64]\", \"xarray/tests/test_units.py::TestVariable::test_unstack[int64]\", \"xarray/tests/test_units.py::TestVariable::test_concat[float64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[float64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_concat[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[float64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[int64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[int64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_concat[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_concat[int64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_set_dims[float64]\", \"xarray/tests/test_units.py::TestVariable::test_set_dims[int64]\", \"xarray/tests/test_units.py::TestVariable::test_copy[float64]\", \"xarray/tests/test_units.py::TestVariable::test_copy[int64]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[float64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[float64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[float64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[int64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[int64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_no_conflicts[int64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-constant]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-median]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-reflect]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-linear_ramp]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-constant]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-median]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-reflect]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-linear_ramp]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-constant]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-median]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-reflect]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-linear_ramp]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-constant]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-median]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-reflect]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-linear_ramp]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-constant]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-median]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-reflect]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-linear_ramp]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_units.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[float64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[float64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[float64-identical_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[int64-no_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[int64-dimensionless]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestVariable::test_pad_unit_constant_value[int64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_init[float64-with_coords]\", \"xarray/tests/test_units.py::TestDataArray::test_init[float64-without_coords]\", \"xarray/tests/test_units.py::TestDataArray::test_init[int64-with_coords]\", \"xarray/tests/test_units.py::TestDataArray::test_init[int64-without_coords]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[float64-with_coords-str]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[float64-with_coords-repr]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[float64-without_coords-str]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[float64-without_coords-repr]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[int64-with_coords-str]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[int64-with_coords-repr]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[int64-without_coords-str]\", \"xarray/tests/test_units.py::TestDataArray::test_repr[int64-without_coords-repr]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_all]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_any]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_max]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_mean]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_min]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_sum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_std]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_var]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_cumsum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-function_cumprod]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_all]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_any]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_argmax]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_argmin]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_max]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_mean]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_median]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_min]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_sum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_std]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_var]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_cumsum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[float64-method_cumprod]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_all]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_any]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_max]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_mean]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_min]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_prod]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_sum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_std]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_var]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_cumsum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-function_cumprod]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_all]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_any]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_argmax]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_argmin]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_max]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_mean]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_median]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_min]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_prod]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_sum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_std]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_var]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_cumsum]\", \"xarray/tests/test_units.py::TestDataArray::test_aggregation[int64-method_cumprod]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[float64-negate]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[float64-absolute]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[float64-round]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[int64-negate]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[int64-absolute]\", \"xarray/tests/test_units.py::TestDataArray::test_unary_operations[int64-round]\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[float64-multiply]\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[float64-add]\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[float64-add\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[float64-matrix\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[int64-multiply]\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[int64-add]\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[int64-add\", \"xarray/tests/test_units.py::TestDataArray::test_binary_operations[int64-matrix\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-without_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-without_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-without_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-dimensionless-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-dimensionless-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-dimensionless-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-incompatible_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-incompatible_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-incompatible_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-compatible_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-compatible_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-compatible_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-identical_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-identical_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[float64-identical_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-without_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-without_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-without_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-dimensionless-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-dimensionless-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-dimensionless-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-incompatible_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-incompatible_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-incompatible_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-compatible_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-compatible_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-compatible_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-identical_unit-less_than]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-identical_unit-greater_equal]\", \"xarray/tests/test_units.py::TestDataArray::test_comparison_operations[int64-identical_unit-equal]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_univariate_ufunc[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[float64-T]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[float64-imag]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[float64-real]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[int64-T]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[int64-imag]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_properties[int64-real]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[float64-method_conj]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[float64-method_argsort]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[float64-method_conjugate]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[float64-method_round]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[int64-method_conj]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[int64-method_argsort]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[int64-method_conjugate]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods[int64-method_round]\", \"xarray/tests/test_units.py::TestDataArray::test_item[float64]\", \"xarray/tests/test_units.py::TestDataArray::test_item[int64]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[float64-method_searchsorted-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[float64-method_searchsorted-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[float64-method_searchsorted-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[float64-method_searchsorted-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[float64-method_searchsorted-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[int64-method_searchsorted-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[int64-method_searchsorted-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[int64-method_searchsorted-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[int64-method_searchsorted-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_searchsorted[int64-method_searchsorted-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[float64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[float64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[float64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[float64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[float64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[int64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[int64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[int64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[int64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_numpy_methods_with_args[int64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[float64-method_isnull]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[float64-method_notnull]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[float64-method_count]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[int64-method_isnull]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[int64-method_notnull]\", \"xarray/tests/test_units.py::TestDataArray::test_missing_value_detection[int64-method_count]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-python_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-python_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-python_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-python_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-python_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_array-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_array-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_array-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_array-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[float64-numpy_array-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-python_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-python_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-python_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-python_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-python_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_array-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_array-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_array-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_array-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_fillna[int64-numpy_array-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_dropna[float64]\", \"xarray/tests/test_units.py::TestDataArray::test_dropna[int64]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[float64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isin[int64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-no_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-no_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-no_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-no_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-dimensionless-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-dimensionless-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-dimensionless-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-dimensionless-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-incompatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-incompatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-incompatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-incompatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-compatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-compatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-compatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-compatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-identical_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-identical_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-identical_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[float64-identical_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-no_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-no_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-no_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-no_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-dimensionless-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-dimensionless-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-dimensionless-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-dimensionless-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-incompatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-incompatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-incompatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-incompatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-compatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-compatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-compatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-compatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-identical_unit-masking]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-identical_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-identical_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataArray::test_where[int64-identical_unit-dropping]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[float64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_combine_first[int64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-data-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[float64-method_equals-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-data-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_comparisons[int64-method_equals-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_like[int64-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[float64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_broadcast_equals[int64-identical_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_pad[float64]\", \"xarray/tests/test_units.py::TestDataArray::test_pad[int64]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_pipe-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_pipe-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_assign_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_assign_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_assign_attrs-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_assign_attrs-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_rename-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_rename-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_drop_vars-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_drop_vars-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_reset_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_reset_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_copy-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_copy-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_astype-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[float64-method_astype-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_pipe-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_pipe-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_assign_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_assign_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_assign_attrs-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_assign_attrs-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_rename-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_rename-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_drop_vars-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_drop_vars-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_reset_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_reset_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_copy-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_copy-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_astype-data]\", \"xarray/tests/test_units.py::TestDataArray::test_content_manipulation[int64-method_astype-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[float64-with_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataArray::test_copy[int64-with_unit]\", \"xarray/tests/test_units.py::TestDataArray::test_isel[float64-single\", \"xarray/tests/test_units.py::TestDataArray::test_isel[float64-multiple\", \"xarray/tests/test_units.py::TestDataArray::test_isel[int64-single\", \"xarray/tests/test_units.py::TestDataArray::test_isel[int64-multiple\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-nothing_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-nothing_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-nothing_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-nothing_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-nothing_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-last_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-last_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-last_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-last_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-last_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-middle_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-middle_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-middle_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-middle_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-middle_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_and_last_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_and_last_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_and_last_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_and_last_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[float64-first_and_last_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-nothing_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-nothing_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-nothing_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-nothing_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-nothing_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-last_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-last_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-last_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-last_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-last_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-middle_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-middle_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-middle_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-middle_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-middle_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_and_last_dimension_squeezable-x]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_and_last_dimension_squeezable-y]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_and_last_dimension_squeezable-z]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_and_last_dimension_squeezable-t]\", \"xarray/tests/test_units.py::TestDataArray::test_squeeze[int64-first_and_last_dimension_squeezable-all]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[float64-method_head]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[float64-method_tail]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[float64-method_thin]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[int64-method_head]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[int64-method_tail]\", \"xarray/tests/test_units.py::TestDataArray::test_head_tail_thin[int64-method_thin]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex[float64-method_reindex-data]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex[float64-method_reindex-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex[int64-method_reindex-data]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex[int64-method_reindex-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex_like[float64-method_reindex_like-data]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex_like[float64-method_reindex_like-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex_like[int64-method_reindex_like-data]\", \"xarray/tests/test_units.py::TestDataArray::test_interp_reindex_like[int64-method_reindex_like-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[float64-method_unstack]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[float64-method_reset_index]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[float64-method_reorder_levels]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[int64-method_unstack]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[int64-method_reset_index]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_stacked[int64-method_reorder_levels]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_transpose]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_stack]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_set_index]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_shift]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_roll]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[float64-method_sortby]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_transpose]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_stack]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_set_index]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_shift]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_roll]\", \"xarray/tests/test_units.py::TestDataArray::test_stacking_reordering[int64-method_sortby]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_diff-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_diff-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_differentiate-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_differentiate-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_integrate-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_integrate-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_quantile-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_quantile-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_reduce-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_reduce-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_dot-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[float64-method_dot-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_diff-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_diff-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_differentiate-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_differentiate-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_integrate-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_integrate-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_quantile-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_quantile-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_reduce-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_reduce-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_dot-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation[int64-method_dot-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_groupby-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_groupby-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_groupby_bins-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_groupby_bins-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_coarsen-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_coarsen-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_weighted-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[float64-method_weighted-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_groupby-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_groupby-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_groupby_bins-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_groupby_bins-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_coarsen-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_coarsen-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_weighted-data]\", \"xarray/tests/test_units.py::TestDataArray::test_computation_objects[int64-method_weighted-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_resample[float64]\", \"xarray/tests/test_units.py::TestDataArray::test_resample[int64]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_assign_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_assign_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_first-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_first-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_last-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_last-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_quantile-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[float64-method_quantile-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_assign_coords-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_assign_coords-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_first-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_first-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_last-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_last-coords]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_quantile-data]\", \"xarray/tests/test_units.py::TestDataArray::test_grouped_operations[int64-method_quantile-coords]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-nothing-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-nothing-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-nothing-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-nothing-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-nothing-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[float64-coords-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-nothing-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-nothing-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-nothing-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-nothing-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-nothing-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_init[int64-coords-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_repr[float64-data-str]\", \"xarray/tests/test_units.py::TestDataset::test_repr[float64-data-repr]\", \"xarray/tests/test_units.py::TestDataset::test_repr[float64-coords-str]\", \"xarray/tests/test_units.py::TestDataset::test_repr[float64-coords-repr]\", \"xarray/tests/test_units.py::TestDataset::test_repr[int64-data-str]\", \"xarray/tests/test_units.py::TestDataset::test_repr[int64-data-repr]\", \"xarray/tests/test_units.py::TestDataset::test_repr[int64-coords-str]\", \"xarray/tests/test_units.py::TestDataset::test_repr[int64-coords-repr]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_all]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_any]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_max]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_min]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_mean]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_sum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_std]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_var]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_cumsum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-function_cumprod]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_all]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_any]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_argmax]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_argmin]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_max]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_min]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_mean]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_median]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_sum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_std]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_var]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_cumsum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[float64-method_cumprod]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_all]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_any]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_max]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_min]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_mean]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_sum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_prod]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_std]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_var]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_cumsum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-function_cumprod]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_all]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_any]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_argmax]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_argmin]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_max]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_min]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_mean]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_median]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_sum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_prod]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_std]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_var]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_cumsum]\", \"xarray/tests/test_units.py::TestDataset::test_aggregation[int64-method_cumprod]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_properties[float64-imag]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_properties[float64-real]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_properties[int64-imag]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_properties[int64-real]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[float64-method_astype]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[float64-method_conj]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[float64-method_argsort]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[float64-method_conjugate]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[float64-method_round]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[int64-method_astype]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[int64-method_conj]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[int64-method_argsort]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[int64-method_conjugate]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods[int64-method_round]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[float64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[float64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[float64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[float64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[float64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[int64-no_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[int64-dimensionless-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[int64-incompatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[int64-compatible_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_numpy_methods_with_args[int64-identical_unit-method_clip]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[float64-method_isnull]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[float64-method_notnull]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[float64-method_count]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[int64-method_isnull]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[int64-method_notnull]\", \"xarray/tests/test_units.py::TestDataset::test_missing_value_detection[int64-method_count]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-python_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-python_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-python_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-python_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-python_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_array-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_array-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_array-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_array-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[float64-numpy_array-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-python_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-python_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-python_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-python_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-python_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_scalar-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_scalar-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_scalar-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_scalar-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_scalar-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_array-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_array-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_array-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_array-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_fillna[int64-numpy_array-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_dropna[float64]\", \"xarray/tests/test_units.py::TestDataset::test_dropna[int64]\", \"xarray/tests/test_units.py::TestDataset::test_isin[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_isin[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[float64-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_isin[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_isin[int64-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-no_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-no_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-no_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-no_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-dimensionless-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-dimensionless-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-dimensionless-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-dimensionless-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-incompatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-incompatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-incompatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-incompatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-compatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-compatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-compatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-compatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-same_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-same_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-same_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[float64-same_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-no_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-no_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-no_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-no_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-dimensionless-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-dimensionless-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-dimensionless-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-dimensionless-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-incompatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-incompatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-incompatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-incompatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-compatible_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-compatible_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-compatible_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-compatible_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-same_unit-masking]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-same_unit-replacing_scalar]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-same_unit-replacing_array]\", \"xarray/tests/test_units.py::TestDataset::test_where[int64-same_unit-dropping]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[float64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[float64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[float64-data-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[int64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[int64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_combine_first[int64-data-same_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[float64-method_equals-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_comparisons[int64-method_equals-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[float64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[float64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[float64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[int64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[int64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_like[int64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[float64-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[float64-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[float64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[float64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[float64-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[int64-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[int64-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[int64-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[int64-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_broadcast_equals[int64-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_pad[float64]\", \"xarray/tests/test_units.py::TestDataset::test_pad[int64]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[float64-data-method_unstack]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[float64-data-method_reset_index]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[float64-data-method_reorder_levels]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[int64-data-method_unstack]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[int64-data-method_reset_index]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_stacked[int64-data-method_reorder_levels]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_transpose]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_stack]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_set_index]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_shift]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_roll]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[float64-method_sortby]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_transpose]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_stack]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_set_index]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_shift]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_roll]\", \"xarray/tests/test_units.py::TestDataset::test_stacking_reordering[int64-method_sortby]\", \"xarray/tests/test_units.py::TestDataset::test_isel[float64-single\", \"xarray/tests/test_units.py::TestDataset::test_isel[float64-multiple\", \"xarray/tests/test_units.py::TestDataset::test_isel[int64-single\", \"xarray/tests/test_units.py::TestDataset::test_isel[int64-multiple\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-data-method_head]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-data-method_tail]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-data-method_thin]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-coords-method_head]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-coords-method_tail]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[float64-coords-method_thin]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-data-method_head]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-data-method_tail]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-data-method_thin]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-coords-method_head]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-coords-method_tail]\", \"xarray/tests/test_units.py::TestDataset::test_head_tail_thin[int64-coords-method_thin]\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[float64-nothing\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[float64-last\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[float64-middle\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[float64-first\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[int64-nothing\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[int64-last\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[int64-middle\", \"xarray/tests/test_units.py::TestDataset::test_squeeze[int64-first\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex[float64-method_reindex-data]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex[float64-method_reindex-coords]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex[int64-method_reindex-data]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex[int64-method_reindex-coords]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex_like[float64-method_reindex_like-data]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex_like[float64-method_reindex_like-coords]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex_like[int64-method_reindex_like-data]\", \"xarray/tests/test_units.py::TestDataset::test_interp_reindex_like[int64-method_reindex_like-coords]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_diff]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_differentiate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_integrate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_reduce]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-data-method_map]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_diff]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_differentiate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_integrate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_reduce]\", \"xarray/tests/test_units.py::TestDataset::test_computation[float64-coords-method_map]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_diff]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_differentiate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_integrate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_reduce]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-data-method_map]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_diff]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_differentiate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_integrate]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_reduce]\", \"xarray/tests/test_units.py::TestDataset::test_computation[int64-coords-method_map]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-data-method_groupby]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-data-method_groupby_bins]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-data-method_coarsen]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-data-method_weighted]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-coords-method_groupby]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-coords-method_groupby_bins]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-coords-method_coarsen]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[float64-coords-method_weighted]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-data-method_groupby]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-data-method_groupby_bins]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-data-method_coarsen]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-data-method_weighted]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-coords-method_groupby]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-coords-method_groupby_bins]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-coords-method_coarsen]\", \"xarray/tests/test_units.py::TestDataset::test_computation_objects[int64-coords-method_weighted]\", \"xarray/tests/test_units.py::TestDataset::test_resample[float64-data]\", \"xarray/tests/test_units.py::TestDataset::test_resample[float64-coords]\", \"xarray/tests/test_units.py::TestDataset::test_resample[int64-data]\", \"xarray/tests/test_units.py::TestDataset::test_resample[int64-coords]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-data-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-data-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-data-method_first]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-data-method_last]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-data-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-coords-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-coords-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-coords-method_first]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-coords-method_last]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[float64-coords-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-data-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-data-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-data-method_first]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-data-method_last]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-data-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-coords-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-coords-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-coords-method_first]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-coords-method_last]\", \"xarray/tests/test_units.py::TestDataset::test_grouped_operations[int64-coords-method_quantile]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_pipe]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_assign_attrs]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_rename]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_rename_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_rename_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_swap_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_drop_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_drop_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_set_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_reset_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-data-method_copy]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_pipe]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_assign_attrs]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_rename]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_rename_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_rename_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_swap_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_drop_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_drop_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_set_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_reset_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[float64-coords-method_copy]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_pipe]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_assign_attrs]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_rename]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_rename_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_rename_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_swap_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_drop_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_drop_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_set_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_reset_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-data-method_copy]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_pipe]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_assign]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_assign_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_assign_attrs]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_rename]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_rename_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_rename_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_swap_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_drop_vars]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_drop_dims]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_set_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_reset_coords]\", \"xarray/tests/test_units.py::TestDataset::test_content_manipulation[int64-coords-method_copy]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[float64-coords-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-data-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-data-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-data-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-data-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-data-identical_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-coords-no_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-coords-dimensionless]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-coords-incompatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-coords-compatible_unit]\", \"xarray/tests/test_units.py::TestDataset::test_merge[int64-coords-identical_unit]\"]",
    "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13837",
    "base_commit": "415f50298f97fb17f841a9df38d995ccf347dfcc",
    "patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,14 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    if __main__.__spec__ is not None and __main__.__spec__.parent:\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n",
    "test_patch": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -23,6 +23,7 @@\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n+from .test_module import __main__ as test_main\n from .utils import on_macos_with_hfs\n \n \n@@ -157,6 +158,7 @@ def test_path_with_embedded_null_bytes(self):\n \n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n@@ -165,6 +167,15 @@ def test_run_as_module(self):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -447,7 +458,8 @@ def test_python_m_django(self):\n         argv = [main, 'runserver']\n         mock_call = self.patch_autoreload(argv)\n         with mock.patch('django.__main__.__file__', main):\n-            autoreload.restart_with_reloader()\n+            with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+                autoreload.restart_with_reloader()\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \ndiff --git a/tests/utils_tests/test_module/__main__.py b/tests/utils_tests/test_module/__main__.py\nnew file mode 100644\n",
    "problem_statement": "Consenti il riavvio automatico di `python -m pkg_other_than_django runserver`\nDescrizione\n\n\t\t(ultima modifica di William Schwartz)\n\n`django.utils.autoreload.get_child_arguments` rileva se Python è stato avviato come `python -m django`. Attualmente rileva solo quando `-m` è passato specificamente a `django` (e solo in ambienti Python in cui `__file__` è impostato sui moduli, il che **non** è vero per tutti gli ambienti Python, con doppia enfasi sul \"non\"). Come #32177, questo ticket mira a rimuovere un ostacolo alla creazione di utilità da riga di comando basate su Django che hanno il proprio sottomodulo `__main__` mentre sovrascrivono i comandi di gestione integrati di Django, in questo caso `runserver`.\nLa correzione, che ho inviato nel **PR allegato**, è quella di utilizzare il metodo documentato di Python per determinare se `-m` è stato utilizzato in `get_child_arguments`:\nIl modulo `__main__` di livello superiore è sempre il punto di ingresso di un `complete Python program`.\n`__main__.__spec__` non è `None` **se e solo se** Python è stato avviato con `-m` o il nome di una \"directory, file zip o altro elemento di `sys.path`\". In quest'ultimo caso, la **documentazione** afferma:\nSe il nome dello script si riferisce a una directory o a un file zip, il nome dello script viene aggiunto all'inizio di `sys.path` e il file `__main__.py` in quella posizione viene eseguito come modulo `__main__`.\nQuindi `__main__.__spec__.parent` (che è **di solito ma non sempre** `__main__.__package__`) esiste ed è una stringa vuota quando Python viene avviato con il nome di una directory o di un file zip.\nPertanto, Python è stato avviato con `-m pkg` **se e solo se** `__main__.__spec__.parent == \"pkg\"`.\nSeguire questo algoritmo è garantito per funzionare finché Python rispetta la propria documentazione e ha il vantaggio collaterale di evitare l'uso di `__file__`.",
    "hints_text": null,
    "created_at": "2021-01-04T17:44:23Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_run_as_non_django_module (utils_tests.test_autoreload.TestChildArguments)\"]",
    "PASS_TO_PASS": "[\"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_entrypoint_fallback (utils_tests.test_autoreload.TestChildArguments)\", \"test_exe_fallback (utils_tests.test_autoreload.TestChildArguments)\", \"test_raises_runtimeerror (utils_tests.test_autoreload.TestChildArguments)\", \"test_run_as_module (utils_tests.test_autoreload.TestChildArguments)\", \"test_warnoptions (utils_tests.test_autoreload.TestChildArguments)\", \"test_is_django_module (utils_tests.test_autoreload.TestUtilities)\", \"test_is_django_path (utils_tests.test_autoreload.TestUtilities)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_dir_with_unresolvable_path (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_tick_does_not_trigger_twice (utils_tests.test_autoreload.StatReloaderTests)\", \".pyc and .pyo files are included in the files list.\", \"test_check_errors (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_catches_all_exceptions (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_file_added (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_without_file_is_not_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_path_with_embedded_null_bytes (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"test_zip_reload (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-12708",
    "base_commit": "447980e72ac01da1594dd3373a03ba40b7ee6f80",
    "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -393,7 +393,12 @@ def alter_index_together(self, model, old_index_together, new_index_together):\n         news = {tuple(fields) for fields in new_index_together}\n         # Deleted indexes\n         for fields in olds.difference(news):\n-            self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)\n+            self._delete_composed_index(\n+                model,\n+                fields,\n+                {'index': True, 'unique': False},\n+                self.sql_delete_index,\n+            )\n         # Created indexes\n         for field_names in news.difference(olds):\n             fields = [model._meta.get_field(field) for field in field_names]\n",
    "test_patch": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -62,7 +62,11 @@ def assertIndexExists(self, table, columns, value=True, using='default', index_t\n                 any(\n                     c[\"index\"]\n                     for c in connections[using].introspection.get_constraints(cursor, table).values()\n-                    if c['columns'] == list(columns) and (index_type is None or c['type'] == index_type)\n+                    if (\n+                        c['columns'] == list(columns) and\n+                        (index_type is None or c['type'] == index_type) and\n+                        not c['unique']\n+                    )\n                 ),\n             )\n \n@@ -80,6 +84,14 @@ def assertConstraintExists(self, table, name, value=True, using='default'):\n     def assertConstraintNotExists(self, table, name):\n         return self.assertConstraintExists(table, name, False)\n \n+    def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            self.assertEqual(\n+                value,\n+                any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+            )\n+\n     def assertFKExists(self, table, columns, to, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,6 +1759,29 @@ def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n",
    "problem_statement": "Migrazione si blocca eliminando un index_together se esiste un unique_together sugli stessi campi\nDescrizione\n\nSi verifica con Django 1.11.10\nPassaggi per riprodurre:\n1) Creare modelli con 2 campi, aggiungere gli stessi 2 campi a unique_together e a index_together\n2) Eliminare index_together -> Fallimento\nFallirà in django/db/backends/base/schema.py, riga 378, in _delete_composed_index(), ValueError: Trovato numero errato (2) di vincoli poiché questo troverà due vincoli, quello _uniq e quello _idx. Nessun modo per uscirne...\nIl peggio nel mio caso è che è successo quando volevo rifattorizzare il mio codice per utilizzare la funzionalità \"nuova\" (Dj 1.11) Options.indexes. In realtà non sto eliminando l'indice, ma solo il modo in cui è dichiarato nel mio codice.\nPenso che ci siano 2 punti diversi qui:\n1) L'eliminazione di index_together dovrebbe essere possibile da sola o resa coerente (lato migrazioni?) con unique_together\n2) Spostare la dichiarazione di un indice non dovrebbe comportare la ricreazione dell'indice",
    "hints_text": "Riprodotto su master alla commit 623139b5d1bd006eac78b375bcaf5948e695c3c6.\nNon ho ancora guardato sotto il cofano su questo, ma potrebbe essere correlato all'ordine delle operazioni generate per la migrazione? Ad una prima ispezione, sembra che questo problema e il #28862 possano essere causati dallo stesso/simile problema sottostante nel modo in cui l'ordinamento delle sottoclassi di `FieldRelatedOptionOperation` viene gestito nell'ottimizzatore delle migrazioni dell'autodetector.",
    "created_at": "2020-04-12T22:20:59Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)\"]",
    "PASS_TO_PASS": "[\"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_add_binaryfield (migrations.test_operations.OperationTests)\", \"test_add_charfield (migrations.test_operations.OperationTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_field (migrations.test_operations.OperationTests)\", \"test_add_field_m2m (migrations.test_operations.OperationTests)\", \"test_add_field_preserve_default (migrations.test_operations.OperationTests)\", \"test_add_index (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_textfield (migrations.test_operations.OperationTests)\", \"test_alter_field (migrations.test_operations.OperationTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_pk (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_with_index (migrations.test_operations.OperationTests)\", \"test_alter_fk (migrations.test_operations.OperationTests)\", \"test_alter_fk_non_fk (migrations.test_operations.OperationTests)\", \"test_alter_index_together (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_model_managers (migrations.test_operations.OperationTests)\", \"test_alter_model_managers_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_options (migrations.test_operations.OperationTests)\", \"test_alter_model_options_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_table (migrations.test_operations.OperationTests)\", \"test_alter_model_table_m2m (migrations.test_operations.OperationTests)\", \"test_alter_model_table_none (migrations.test_operations.OperationTests)\", \"test_alter_model_table_noop (migrations.test_operations.OperationTests)\", \"test_alter_order_with_respect_to (migrations.test_operations.OperationTests)\", \"test_alter_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"A field may be migrated from AutoField to BigAutoField.\", \"test_column_name_quoting (migrations.test_operations.OperationTests)\", \"test_create_model (migrations.test_operations.OperationTests)\", \"test_create_model_inheritance (migrations.test_operations.OperationTests)\", \"test_create_model_m2m (migrations.test_operations.OperationTests)\", \"test_create_model_managers (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_unique_after (migrations.test_operations.OperationTests)\", \"test_create_proxy_model (migrations.test_operations.OperationTests)\", \"test_create_unmanaged_model (migrations.test_operations.OperationTests)\", \"test_delete_model (migrations.test_operations.OperationTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_delete_proxy_model (migrations.test_operations.OperationTests)\", \"test_model_with_bigautofield (migrations.test_operations.OperationTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_fk (migrations.test_operations.OperationTests)\", \"test_remove_index (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_rename_field (migrations.test_operations.OperationTests)\", \"test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model (migrations.test_operations.OperationTests)\", \"test_rename_model_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_run_python (migrations.test_operations.OperationTests)\", \"test_run_python_atomic (migrations.test_operations.OperationTests)\", \"test_run_python_noop (migrations.test_operations.OperationTests)\", \"test_run_python_related_assignment (migrations.test_operations.OperationTests)\", \"test_run_sql (migrations.test_operations.OperationTests)\", \"test_run_sql_noop (migrations.test_operations.OperationTests)\", \"test_run_sql_params (migrations.test_operations.OperationTests)\", \"test_run_sql_params_invalid (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state2 (migrations.test_operations.OperationTests)\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
    "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "pylint-dev/pylint",
    "instance_id": "pylint-dev__pylint-4551",
    "base_commit": "99589b08de8c5a2c6cc61e13a37420a868c80599",
    "patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -122,7 +122,7 @@ def class_names(self, nodes):\n             if isinstance(node, astroid.Instance):\n                 node = node._proxied\n             if (\n-                isinstance(node, astroid.ClassDef)\n+                isinstance(node, (astroid.ClassDef, astroid.Name, astroid.Subscript))\n                 and hasattr(node, \"name\")\n                 and not self.has_node(node)\n             ):\ndiff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -205,23 +205,19 @@ def visit_assignname(self, node):\n             # the name has been defined as 'global' in the frame and belongs\n             # there.\n             frame = node.root()\n-        try:\n-            if not hasattr(frame, \"locals_type\"):\n-                # If the frame doesn't have a locals_type yet,\n-                # it means it wasn't yet visited. Visit it now\n-                # to add what's missing from it.\n-                if isinstance(frame, astroid.ClassDef):\n-                    self.visit_classdef(frame)\n-                elif isinstance(frame, astroid.FunctionDef):\n-                    self.visit_functiondef(frame)\n-                else:\n-                    self.visit_module(frame)\n-\n-            current = frame.locals_type[node.name]\n-            values = set(node.infer())\n-            frame.locals_type[node.name] = list(set(current) | values)\n-        except astroid.InferenceError:\n-            pass\n+        if not hasattr(frame, \"locals_type\"):\n+            # If the frame doesn't have a locals_type yet,\n+            # it means it wasn't yet visited. Visit it now\n+            # to add what's missing from it.\n+            if isinstance(frame, astroid.ClassDef):\n+                self.visit_classdef(frame)\n+            elif isinstance(frame, astroid.FunctionDef):\n+                self.visit_functiondef(frame)\n+            else:\n+                self.visit_module(frame)\n+\n+        current = frame.locals_type[node.name]\n+        frame.locals_type[node.name] = list(set(current) | utils.infer_node(node))\n \n     @staticmethod\n     def handle_assignattr_type(node, parent):\n@@ -229,12 +225,10 @@ def handle_assignattr_type(node, parent):\n \n         handle instance_attrs_type\n         \"\"\"\n-        try:\n-            values = set(node.infer())\n-            current = set(parent.instance_attrs_type[node.attrname])\n-            parent.instance_attrs_type[node.attrname] = list(current | values)\n-        except astroid.InferenceError:\n-            pass\n+        current = set(parent.instance_attrs_type[node.attrname])\n+        parent.instance_attrs_type[node.attrname] = list(\n+            current | utils.infer_node(node)\n+        )\n \n     def visit_import(self, node):\n         \"\"\"visit an astroid.Import node\ndiff --git a/pylint/pyreverse/utils.py b/pylint/pyreverse/utils.py\n--- a/pylint/pyreverse/utils.py\n+++ b/pylint/pyreverse/utils.py\n@@ -19,6 +19,9 @@\n import os\n import re\n import sys\n+from typing import Optional, Union\n+\n+import astroid\n \n RCFILE = \".pyreverserc\"\n \n@@ -213,3 +216,60 @@ def visit(self, node):\n         if methods[1] is not None:\n             return methods[1](node)\n         return None\n+\n+\n+def get_annotation_label(ann: Union[astroid.Name, astroid.Subscript]) -> str:\n+    label = \"\"\n+    if isinstance(ann, astroid.Subscript):\n+        label = ann.as_string()\n+    elif isinstance(ann, astroid.Name):\n+        label = ann.name\n+    return label\n+\n+\n+def get_annotation(\n+    node: Union[astroid.AssignAttr, astroid.AssignName]\n+) -> Optional[Union[astroid.Name, astroid.Subscript]]:\n+    \"\"\"return the annotation for `node`\"\"\"\n+    ann = None\n+    if isinstance(node.parent, astroid.AnnAssign):\n+        ann = node.parent.annotation\n+    elif isinstance(node, astroid.AssignAttr):\n+        init_method = node.parent.parent\n+        try:\n+            annotations = dict(zip(init_method.locals, init_method.args.annotations))\n+            ann = annotations.get(node.parent.value.name)\n+        except AttributeError:\n+            pass\n+    else:\n+        return ann\n+\n+    try:\n+        default, *_ = node.infer()\n+    except astroid.InferenceError:\n+        default = \"\"\n+\n+    label = get_annotation_label(ann)\n+    if ann:\n+        label = (\n+            rf\"Optional[{label}]\"\n+            if getattr(default, \"value\", \"value\") is None\n+            and not label.startswith(\"Optional\")\n+            else label\n+        )\n+    if label:\n+        ann.name = label\n+    return ann\n+\n+\n+def infer_node(node: Union[astroid.AssignAttr, astroid.AssignName]) -> set:\n+    \"\"\"Return a set containing the node annotation if it exists\n+    otherwise return a set of the inferred types using the NodeNG.infer method\"\"\"\n+\n+    ann = get_annotation(node)\n+    if ann:\n+        return {ann}\n+    try:\n+        return set(node.infer())\n+    except astroid.InferenceError:\n+        return set()\ndiff --git a/pylint/pyreverse/writer.py b/pylint/pyreverse/writer.py\n--- a/pylint/pyreverse/writer.py\n+++ b/pylint/pyreverse/writer.py\n@@ -19,7 +19,7 @@\n import os\n \n from pylint.graph import DotBackend\n-from pylint.pyreverse.utils import is_exception\n+from pylint.pyreverse.utils import get_annotation_label, is_exception\n from pylint.pyreverse.vcgutils import VCGPrinter\n \n \n@@ -134,11 +134,29 @@ def get_values(self, obj):\n         if not self.config.only_classnames:\n             label = r\"{}|{}\\l|\".format(label, r\"\\l\".join(obj.attrs))\n             for func in obj.methods:\n+                return_type = (\n+                    f\": {get_annotation_label(func.returns)}\" if func.returns else \"\"\n+                )\n+\n                 if func.args.args:\n-                    args = [arg.name for arg in func.args.args if arg.name != \"self\"]\n+                    args = [arg for arg in func.args.args if arg.name != \"self\"]\n                 else:\n                     args = []\n-                label = r\"{}{}({})\\l\".format(label, func.name, \", \".join(args))\n+\n+                annotations = dict(zip(args, func.args.annotations[1:]))\n+                for arg in args:\n+                    annotation_label = \"\"\n+                    ann = annotations.get(arg)\n+                    if ann:\n+                        annotation_label = get_annotation_label(ann)\n+                    annotations[arg] = annotation_label\n+\n+                args = \", \".join(\n+                    f\"{arg.name}: {ann}\" if ann else f\"{arg.name}\"\n+                    for arg, ann in annotations.items()\n+                )\n+\n+                label = fr\"{label}{func.name}({args}){return_type}\\l\"\n             label = \"{%s}\" % label\n         if is_exception(obj.node):\n             return dict(fontcolor=\"red\", label=label, shape=\"record\")\n",
    "test_patch": "diff --git a/tests/unittest_pyreverse_writer.py b/tests/unittest_pyreverse_writer.py\n--- a/tests/unittest_pyreverse_writer.py\n+++ b/tests/unittest_pyreverse_writer.py\n@@ -22,12 +22,14 @@\n import codecs\n import os\n from difflib import unified_diff\n+from unittest.mock import patch\n \n+import astroid\n import pytest\n \n from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n from pylint.pyreverse.inspector import Linker, project_from_files\n-from pylint.pyreverse.utils import get_visibility\n+from pylint.pyreverse.utils import get_annotation, get_visibility, infer_node\n from pylint.pyreverse.writer import DotWriter\n \n _DEFAULTS = {\n@@ -132,3 +134,72 @@ def test_get_visibility(names, expected):\n     for name in names:\n         got = get_visibility(name)\n         assert got == expected, f\"got {got} instead of {expected} for value {name}\"\n+\n+\n+@pytest.mark.parametrize(\n+    \"assign, label\",\n+    [\n+        (\"a: str = None\", \"Optional[str]\"),\n+        (\"a: str = 'mystr'\", \"str\"),\n+        (\"a: Optional[str] = 'str'\", \"Optional[str]\"),\n+        (\"a: Optional[str] = None\", \"Optional[str]\"),\n+    ],\n+)\n+def test_get_annotation_annassign(assign, label):\n+    \"\"\"AnnAssign\"\"\"\n+    node = astroid.extract_node(assign)\n+    got = get_annotation(node.value).name\n+    assert isinstance(node, astroid.AnnAssign)\n+    assert got == label, f\"got {got} instead of {label} for value {node}\"\n+\n+\n+@pytest.mark.parametrize(\n+    \"init_method, label\",\n+    [\n+        (\"def __init__(self, x: str):                   self.x = x\", \"str\"),\n+        (\"def __init__(self, x: str = 'str'):           self.x = x\", \"str\"),\n+        (\"def __init__(self, x: str = None):            self.x = x\", \"Optional[str]\"),\n+        (\"def __init__(self, x: Optional[str]):         self.x = x\", \"Optional[str]\"),\n+        (\"def __init__(self, x: Optional[str] = None):  self.x = x\", \"Optional[str]\"),\n+        (\"def __init__(self, x: Optional[str] = 'str'): self.x = x\", \"Optional[str]\"),\n+    ],\n+)\n+def test_get_annotation_assignattr(init_method, label):\n+    \"\"\"AssignAttr\"\"\"\n+    assign = rf\"\"\"\n+        class A:\n+            {init_method}\n+    \"\"\"\n+    node = astroid.extract_node(assign)\n+    instance_attrs = node.instance_attrs\n+    for _, assign_attrs in instance_attrs.items():\n+        for assign_attr in assign_attrs:\n+            got = get_annotation(assign_attr).name\n+            assert isinstance(assign_attr, astroid.AssignAttr)\n+            assert got == label, f\"got {got} instead of {label} for value {node}\"\n+\n+\n+@patch(\"pylint.pyreverse.utils.get_annotation\")\n+@patch(\"astroid.node_classes.NodeNG.infer\", side_effect=astroid.InferenceError)\n+def test_infer_node_1(mock_infer, mock_get_annotation):\n+    \"\"\"Return set() when astroid.InferenceError is raised and an annotation has\n+    not been returned\n+    \"\"\"\n+    mock_get_annotation.return_value = None\n+    node = astroid.extract_node(\"a: str = 'mystr'\")\n+    mock_infer.return_value = \"x\"\n+    assert infer_node(node) == set()\n+    assert mock_infer.called\n+\n+\n+@patch(\"pylint.pyreverse.utils.get_annotation\")\n+@patch(\"astroid.node_classes.NodeNG.infer\")\n+def test_infer_node_2(mock_infer, mock_get_annotation):\n+    \"\"\"Return set(node.infer()) when InferenceError is not raised and an\n+    annotation has not been returned\n+    \"\"\"\n+    mock_get_annotation.return_value = None\n+    node = astroid.extract_node(\"a: str = 'mystr'\")\n+    mock_infer.return_value = \"x\"\n+    assert infer_node(node) == set(\"x\")\n+    assert mock_infer.called\n",
    "problem_statement": "Usa i suggerimenti di tipo Python per la generazione UML\nSembra che pyreverse non legga i suggerimenti di tipo Python (come definiti da [PEP 484](https://www.python.org/dev/peps/pep-0484/)), e questo non aiuta quando si usa `None` come valore predefinito:\r\n\r\n### Esempio di codice\r\n```\r\nclass C(object):\r\n    def __init__(self, a: str = None):\r\n        self.a = a\r\n```\r\n\r\n### Comportamento attuale\r\n\r\nOutput di pyreverse:\r\n\r\n![classes_test](https://user-images.githubusercontent.com/22218701/27432305-f10fe03e-574f-11e7-81fa-e2b59e493360.png)\r\n\r\n### Comportamento atteso\r\n\r\nVorrei vedere qualcosa come: `a : String` nell'output.\r\n\r\n### Output di pylint --version\r\npylint-script.py 1.6.5,\r\nastroid 1.4.9\r\nPython 3.6.0 |Anaconda custom (64-bit)| (default, Dec 23 2016, 11:57:41) [MSC v.1900 64 bit (AMD64)]",
    "hints_text": "È qualcosa che è in fase di sviluppo (o che vedrà la luce)? L'annotazione dei tipi sta diventando sempre più comune, e questo sarebbe un enorme vantaggio per lavorare con `pyreverse`. Soprattutto perché è considerato idiomatico (e sensato) in Python utilizzare `None` come parametro predefinito per strutture dati mutabili.\n\n@pohutukawa Non abbiamo una pipeline vera e propria, ma quella che abbiamo è rappresentata dai milestone e dalle issue che assegniamo a ciascun milestone. Riguardo a questa issue, al momento non è in fase di sviluppo e molto probabilmente non vedrà la luce a breve, principalmente a causa delle risorse limitate da parte nostra (ad esempio, posso concentrarmi solo su 1 o 2 issue al giorno).\n\n@PCManticore Grazie per l'informazione. Va bene, ho solo pensato di chiedere dato che il ticket ha già quasi un anno e mezzo. Sarebbe bello averlo, ma è comprensibile.  \nContinuate a fare progressi, e ottimo lavoro sugli strumenti forniti finora!\n\nCapisco che le vostre risorse siano limitate, quindi comprendo se non potete aggiungere questo al milestone per il momento.  \n\nPenso che con le annotazioni dei tipi che diventano sempre più importanti con ogni rilascio di Python (ad esempio, `typing.NamedTuple` in Python 3.6, `dataclasses.Dataclass` in Python 3.7, `typing.TypedDict` in Python 3.8, ecc.) questa sarebbe un'aggiunta fenomenalmente utile per pyreverse se aveste l'opportunità di realizzarla.\n\n@PCManticore -- se qualcuno fosse interessato ad aiutare con questa issue, qual sarebbe il modo migliore per impegnarsi? Avete qualche linea guida o raccomandazione di design?",
    "created_at": "2021-06-07T15:14:31Z",
    "version": "2.9",
    "FAIL_TO_PASS": "[\"tests/unittest_pyreverse_writer.py::test_dot_files[packages_No_Name.dot]\", \"tests/unittest_pyreverse_writer.py::test_dot_files[classes_No_Name.dot]\", \"tests/unittest_pyreverse_writer.py::test_get_visibility[names0-special]\", \"tests/unittest_pyreverse_writer.py::test_get_visibility[names1-private]\", \"tests/unittest_pyreverse_writer.py::test_get_visibility[names2-public]\", \"tests/unittest_pyreverse_writer.py::test_get_visibility[names3-protected]\", \"tests/unittest_pyreverse_writer.py::test_get_annotation_annassign[a:\", \"tests/unittest_pyreverse_writer.py::test_get_annotation_assignattr[def\", \"tests/unittest_pyreverse_writer.py::test_infer_node_1\", \"tests/unittest_pyreverse_writer.py::test_infer_node_2\"]",
    "PASS_TO_PASS": "[]",
    "environment_setup_commit": "c04f92ef68e5ea779a60bfddb91dc677c5470fd0",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11138",
    "base_commit": "c84b91b7603e488f7171fdff8f08368ef3d6b856",
    "patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -69,8 +69,8 @@ def date_trunc_sql(self, lookup_type, field_name):\n             return \"DATE(%s)\" % (field_name)\n \n     def _convert_field_to_tz(self, field_name, tzname):\n-        if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+        if settings.USE_TZ and self.connection.timezone_name != tzname:\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -99,9 +99,16 @@ def _convert_field_to_tz(self, field_name, tzname):\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        # Convert from connection timezone to the local time, returning\n+        # TIMESTAMP WITH TIME ZONE and cast it back to TIMESTAMP to strip the\n+        # TIME ZONE details.\n+        if self.connection.timezone_name != tzname:\n+            return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (\n+                field_name,\n+                self.connection.timezone_name,\n+                tzname,\n+            )\n+        return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -195,10 +195,10 @@ def get_new_connection(self, conn_params):\n         conn = Database.connect(**conn_params)\n         conn.create_function(\"django_date_extract\", 2, _sqlite_datetime_extract)\n         conn.create_function(\"django_date_trunc\", 2, _sqlite_date_trunc)\n-        conn.create_function(\"django_datetime_cast_date\", 2, _sqlite_datetime_cast_date)\n-        conn.create_function(\"django_datetime_cast_time\", 2, _sqlite_datetime_cast_time)\n-        conn.create_function(\"django_datetime_extract\", 3, _sqlite_datetime_extract)\n-        conn.create_function(\"django_datetime_trunc\", 3, _sqlite_datetime_trunc)\n+        conn.create_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\n+        conn.create_function('django_datetime_cast_time', 3, _sqlite_datetime_cast_time)\n+        conn.create_function('django_datetime_extract', 4, _sqlite_datetime_extract)\n+        conn.create_function('django_datetime_trunc', 4, _sqlite_datetime_trunc)\n         conn.create_function(\"django_time_extract\", 2, _sqlite_time_extract)\n         conn.create_function(\"django_time_trunc\", 2, _sqlite_time_trunc)\n         conn.create_function(\"django_time_diff\", 2, _sqlite_time_diff)\n@@ -398,14 +398,16 @@ def convert_query(self, query):\n         return FORMAT_QMARK_REGEX.sub('?', query).replace('%%', '%')\n \n \n-def _sqlite_datetime_parse(dt, tzname=None):\n+def _sqlite_datetime_parse(dt, tzname=None, conn_tzname=None):\n     if dt is None:\n         return None\n     try:\n         dt = backend_utils.typecast_timestamp(dt)\n     except (TypeError, ValueError):\n         return None\n-    if tzname is not None:\n+    if conn_tzname:\n+        dt = dt.replace(tzinfo=pytz.timezone(conn_tzname))\n+    if tzname is not None and tzname != conn_tzname:\n         dt = timezone.localtime(dt, pytz.timezone(tzname))\n     return dt\n \n@@ -443,22 +445,22 @@ def _sqlite_time_trunc(lookup_type, dt):\n         return \"%02i:%02i:%02i\" % (dt.hour, dt.minute, dt.second)\n \n \n-def _sqlite_datetime_cast_date(dt, tzname):\n-    dt = _sqlite_datetime_parse(dt, tzname)\n+def _sqlite_datetime_cast_date(dt, tzname, conn_tzname):\n+    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n     if dt is None:\n         return None\n     return dt.date().isoformat()\n \n \n-def _sqlite_datetime_cast_time(dt, tzname):\n-    dt = _sqlite_datetime_parse(dt, tzname)\n+def _sqlite_datetime_cast_time(dt, tzname, conn_tzname):\n+    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n     if dt is None:\n         return None\n     return dt.time().isoformat()\n \n \n-def _sqlite_datetime_extract(lookup_type, dt, tzname=None):\n-    dt = _sqlite_datetime_parse(dt, tzname)\n+def _sqlite_datetime_extract(lookup_type, dt, tzname=None, conn_tzname=None):\n+    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n     if dt is None:\n         return None\n     if lookup_type == 'week_day':\n@@ -473,8 +475,8 @@ def _sqlite_datetime_extract(lookup_type, dt, tzname=None):\n         return getattr(dt, lookup_type)\n \n \n-def _sqlite_datetime_trunc(lookup_type, dt, tzname):\n-    dt = _sqlite_datetime_parse(dt, tzname)\n+def _sqlite_datetime_trunc(lookup_type, dt, tzname, conn_tzname):\n+    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n     if dt is None:\n         return None\n     if lookup_type == 'year':\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -84,27 +84,29 @@ def date_trunc_sql(self, lookup_type, field_name):\n     def time_trunc_sql(self, lookup_type, field_name):\n         return \"django_time_trunc('%s', %s)\" % (lookup_type.lower(), field_name)\n \n-    def _convert_tzname_to_sql(self, tzname):\n-        return \"'%s'\" % tzname if settings.USE_TZ else 'NULL'\n+    def _convert_tznames_to_sql(self, tzname):\n+        if settings.USE_TZ:\n+            return \"'%s'\" % tzname, \"'%s'\" % self.connection.timezone_name\n+        return 'NULL', 'NULL'\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n-        return \"django_datetime_cast_date(%s, %s)\" % (\n-            field_name, self._convert_tzname_to_sql(tzname),\n+        return 'django_datetime_cast_date(%s, %s, %s)' % (\n+            field_name, *self._convert_tznames_to_sql(tzname),\n         )\n \n     def datetime_cast_time_sql(self, field_name, tzname):\n-        return \"django_datetime_cast_time(%s, %s)\" % (\n-            field_name, self._convert_tzname_to_sql(tzname),\n+        return 'django_datetime_cast_time(%s, %s, %s)' % (\n+            field_name, *self._convert_tznames_to_sql(tzname),\n         )\n \n     def datetime_extract_sql(self, lookup_type, field_name, tzname):\n-        return \"django_datetime_extract('%s', %s, %s)\" % (\n-            lookup_type.lower(), field_name, self._convert_tzname_to_sql(tzname),\n+        return \"django_datetime_extract('%s', %s, %s, %s)\" % (\n+            lookup_type.lower(), field_name, *self._convert_tznames_to_sql(tzname),\n         )\n \n     def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n-        return \"django_datetime_trunc('%s', %s, %s)\" % (\n-            lookup_type.lower(), field_name, self._convert_tzname_to_sql(tzname),\n+        return \"django_datetime_trunc('%s', %s, %s, %s)\" % (\n+            lookup_type.lower(), field_name, *self._convert_tznames_to_sql(tzname),\n         )\n \n     def time_extract_sql(self, lookup_type, field_name):\n",
    "test_patch": "diff --git a/tests/timezones/tests.py b/tests/timezones/tests.py\n--- a/tests/timezones/tests.py\n+++ b/tests/timezones/tests.py\n@@ -47,6 +47,26 @@\n ICT = timezone.get_fixed_timezone(420)      # Asia/Bangkok\n \n \n+@contextmanager\n+def override_database_connection_timezone(timezone):\n+    try:\n+        orig_timezone = connection.settings_dict['TIME_ZONE']\n+        connection.settings_dict['TIME_ZONE'] = timezone\n+        # Clear cached properties, after first accessing them to ensure they exist.\n+        connection.timezone\n+        del connection.timezone\n+        connection.timezone_name\n+        del connection.timezone_name\n+        yield\n+    finally:\n+        connection.settings_dict['TIME_ZONE'] = orig_timezone\n+        # Clear cached properties, after first accessing them to ensure they exist.\n+        connection.timezone\n+        del connection.timezone\n+        connection.timezone_name\n+        del connection.timezone_name\n+\n+\n @override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=False)\n class LegacyDatabaseTests(TestCase):\n \n@@ -311,6 +331,20 @@ def test_query_filter_with_pytz_timezones(self):\n         self.assertEqual(Event.objects.filter(dt__in=(prev, dt, next)).count(), 1)\n         self.assertEqual(Event.objects.filter(dt__range=(prev, next)).count(), 1)\n \n+    def test_query_convert_timezones(self):\n+        # Connection timezone is equal to the current timezone, datetime\n+        # shouldn't be converted.\n+        with override_database_connection_timezone('Africa/Nairobi'):\n+            event_datetime = datetime.datetime(2016, 1, 2, 23, 10, 11, 123, tzinfo=EAT)\n+            event = Event.objects.create(dt=event_datetime)\n+            self.assertEqual(Event.objects.filter(dt__date=event_datetime.date()).first(), event)\n+        # Connection timezone is not equal to the current timezone, datetime\n+        # should be converted (-4h).\n+        with override_database_connection_timezone('Asia/Bangkok'):\n+            event_datetime = datetime.datetime(2016, 1, 2, 3, 10, 11, tzinfo=ICT)\n+            event = Event.objects.create(dt=event_datetime)\n+            self.assertEqual(Event.objects.filter(dt__date=datetime.date(2016, 1, 1)).first(), event)\n+\n     @requires_tz_support\n     def test_query_filter_with_naive_datetime(self):\n         dt = datetime.datetime(2011, 9, 1, 12, 20, 30, tzinfo=EAT)\n@@ -539,39 +573,18 @@ def setUpClass(cls):\n \n         super().setUpClass()\n \n-    @contextmanager\n-    def override_database_connection_timezone(self, timezone):\n-        try:\n-            orig_timezone = connection.settings_dict['TIME_ZONE']\n-            connection.settings_dict['TIME_ZONE'] = timezone\n-            # Clear cached properties, after first accessing them to ensure they exist.\n-            connection.timezone\n-            del connection.timezone\n-            connection.timezone_name\n-            del connection.timezone_name\n-\n-            yield\n-\n-        finally:\n-            connection.settings_dict['TIME_ZONE'] = orig_timezone\n-            # Clear cached properties, after first accessing them to ensure they exist.\n-            connection.timezone\n-            del connection.timezone\n-            connection.timezone_name\n-            del connection.timezone_name\n-\n     def test_read_datetime(self):\n         fake_dt = datetime.datetime(2011, 9, 1, 17, 20, 30, tzinfo=UTC)\n         Event.objects.create(dt=fake_dt)\n \n-        with self.override_database_connection_timezone('Asia/Bangkok'):\n+        with override_database_connection_timezone('Asia/Bangkok'):\n             event = Event.objects.get()\n             dt = datetime.datetime(2011, 9, 1, 10, 20, 30, tzinfo=UTC)\n         self.assertEqual(event.dt, dt)\n \n     def test_write_datetime(self):\n         dt = datetime.datetime(2011, 9, 1, 10, 20, 30, tzinfo=UTC)\n-        with self.override_database_connection_timezone('Asia/Bangkok'):\n+        with override_database_connection_timezone('Asia/Bangkok'):\n             Event.objects.create(dt=dt)\n \n         event = Event.objects.get()\n",
    "problem_statement": "Il valore di `TIME_ZONE` nelle impostazioni di `DATABASES` non viene utilizzato quando si rendono le date consapevoli del fuso orario su MySQL, SQLite e Oracle.\n\n**Descrizione**\n\n(Ultima modifica di Victor Talpaert)\n\n(Supponiamo i backend MySQL)\nPosso impostare `TIME_ZONE` più volte in `settings.py`, una per l'app Django globale e una per ogni database (vedi ​https://docs.djangoproject.com/en/1.11/ref/settings/#time-zone (ref1))\nUn utilizzo tipico sarebbe per un database legacy in cui le date e gli orari non sono memorizzati in UTC.\n\n**Nessun lookup di date**\n\nL'interrogazione del mio database tiene conto di questa impostazione, ad esempio:\n\nIn `settings.py`:\n```python\nUSE_TZ = True\nTIME_ZONE = 'Europe/Paris' # tz1\nDATABASES = {\n    'legacy': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '....cnf',\n        },\n        'TIME_ZONE': 'Europe/Paris', # tz2\n    },\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '....cnf',\n        },\n    }\n}\n```\n\nNel shell di `manage.py`:\n```python\n>>> dt = timezone.make_aware(datetime.datetime(2017, 7, 6, 20, 50))\n>>> dt\ndatetime.datetime(2017, 7, 6, 20, 50, tzinfo=<DstTzInfo 'Europe/Paris' CEST+2:00:00 DST>)\n>>> MyModel.objects.filter(my_datetime_field=dt).exists()\nTrue\n```\n\nQuesto funziona perché il mio database legge `'2017-07-06 20:50:00'`.\n\n**Con lookup di date**\n\nDocumentazione correlata: ​https://docs.djangoproject.com/en/1.11/ref/models/querysets/#date (ref2)\n\nMa questo non funziona, mentre logicamente dovrebbe:\n```python\n>>> MyModel.objects.filter(my_datetime_field__date=dt.date()).exists()\nFalse*\n```\n\nLa query SQL correlata da DEBUG è:\n```sql\nSELECT (1) AS `a` FROM `my_model` WHERE DATE(CONVERT_TZ(`my_model`.`my_datetime_field`, 'UTC', 'Europe/Paris')) = '2017-07-06' LIMIT 1;\n```\n\n(*) Nota che non ho riempito la tabella dei fusi orari in MySQL, quindi il risultato dovrebbe essere `True` in questo caso, ma potrebbe essere `False` vicino alla mezzanotte.\n\nDocumentazione correlata: ​https://dev.mysql.com/doc/refman/5.7/en/mysql-tzinfo-to-sql.html\n\nDue cose sono sbagliate. Primo, la conversione dovrebbe essere da Parigi a Parigi, invece che da UTC a Parigi. La conversione dovrebbe avvenire dal fuso orario del database `tz2` a quello dell'app Django `tz1`.\n\nInfatti, da `ref1` e `ref2`:\n- Quando `USE_TZ` è `True` e il database non supporta i fusi orari (ad esempio SQLite, MySQL, Oracle), Django legge e scrive le date e gli orari nel fuso orario locale secondo questa opzione se è impostata e in UTC se non lo è.\n- Quando `USE_TZ` è `True`, i campi vengono convertiti nel fuso orario corrente prima del filtraggio.\n\nIn secondo luogo, quando `tz1 == tz2`, non dovrebbe essere necessario utilizzare `CONVERT_TZ` e la query funzionerà senza le tabelle dei fusi orari in MySQL.\n\nLe query esplicite sono:\n```sql\nmysql> SELECT (1) AS `a` FROM `my_model` WHERE `my_model`.`my_datetime_field` = '2017-07-06 20:50:00' LIMIT 1;\n+---+\n| a |\n+---+\n| 1 |\n+---+\n1 row in set (0.00 sec)\n\nmysql> SELECT (1) AS `a` FROM `my_model` WHERE DATE(`my_model`.`my_datetime_field`) = '2017-07-06' LIMIT 1;\n+---+\n| a |\n+---+\n| 1 |\n+---+\n1 row in set (0.00 sec)\n```\n\nCapisco che il lookup di date possa avere una storia, ma trovo il comportamento illogico e indesiderato. Sei d'accordo che c'è un problema qui?\n\n**EDIT**: riga in cui 'UTC' è forzato ignorando l'impostazione del database\n​https://github.com/django/django/blob/stable/1.11.x/django/db/backends/mysql/operations.py#L49\n\n**PS**: ​domanda su stackoverflow",
    "hints_text": "Ho aperto una pull request su GitHub con una correzione rapida, è stata testata ma manca un TestCase ​https://github.com/django/django/pull/8714\nSembra ragionevole a una breve revisione.\n​PR",
    "created_at": "2019-03-28T13:11:56Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_query_convert_timezones (timezones.tests.NewDatabaseTests)\"]",
    "PASS_TO_PASS": "[\"test_aware_datetime_in_utc (timezones.tests.SerializationTests)\", \"test_naive_datetime (timezones.tests.SerializationTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.SerializationTests)\", \"test_auto_now_and_auto_now_add (timezones.tests.LegacyDatabaseTests)\", \"test_aware_datetime_unsupported (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.LegacyDatabaseTests)\", \"test_query_aggregation (timezones.tests.LegacyDatabaseTests)\", \"test_query_annotation (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetimes (timezones.tests.LegacyDatabaseTests)\", \"test_query_filter (timezones.tests.LegacyDatabaseTests)\", \"test_raw_sql (timezones.tests.LegacyDatabaseTests)\", \"test_form (timezones.tests.LegacyFormsTests)\", \"test_form_with_ambiguous_time (timezones.tests.LegacyFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.LegacyFormsTests)\", \"test_model_form (timezones.tests.LegacyFormsTests)\", \"test_split_form (timezones.tests.LegacyFormsTests)\", \"test_date_and_time_template_filters (timezones.tests.TemplateTests)\", \"test_date_and_time_template_filters_honor_localtime (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_filters_do_not_raise_exceptions (timezones.tests.TemplateTests)\", \"test_localtime_filters_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_and_filters (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_now_template_tag_uses_current_time_zone (timezones.tests.TemplateTests)\", \"test_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_tz_template_context_processor (timezones.tests.TemplateTests)\", \"test_auto_now_and_auto_now_add (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_utc (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_datetime_from_date (timezones.tests.NewDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_null_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_aggregation (timezones.tests.NewDatabaseTests)\", \"test_query_annotation (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_filter (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_pytz_timezones (timezones.tests.NewDatabaseTests)\", \"test_raw_sql (timezones.tests.NewDatabaseTests)\", \"test_update_with_timedelta (timezones.tests.NewDatabaseTests)\", \"test_form (timezones.tests.NewFormsTests)\", \"test_form_with_ambiguous_time (timezones.tests.NewFormsTests)\", \"test_form_with_explicit_timezone (timezones.tests.NewFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.NewFormsTests)\", \"test_form_with_other_timezone (timezones.tests.NewFormsTests)\", \"test_localized_form (timezones.tests.NewFormsTests)\", \"test_localized_model_form (timezones.tests.NewFormsTests)\", \"test_model_form (timezones.tests.NewFormsTests)\", \"test_split_form (timezones.tests.NewFormsTests)\", \"test_change_editable (timezones.tests.AdminTests)\", \"test_change_editable_in_other_timezone (timezones.tests.AdminTests)\", \"test_change_readonly (timezones.tests.AdminTests)\", \"test_change_readonly_in_other_timezone (timezones.tests.AdminTests)\", \"test_changelist (timezones.tests.AdminTests)\", \"test_changelist_in_other_timezone (timezones.tests.AdminTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-16597",
    "base_commit": "6fd65310fa3167b9626c38a5487e171ca407d988",
    "patch": "diff --git a/sympy/assumptions/ask.py b/sympy/assumptions/ask.py\n--- a/sympy/assumptions/ask.py\n+++ b/sympy/assumptions/ask.py\n@@ -1484,13 +1484,16 @@ def get_known_facts():\n         Equivalent(Q.prime, Q.integer & Q.positive & ~Q.composite),\n         Implies(Q.integer, Q.rational),\n         Implies(Q.rational, Q.algebraic),\n+        Implies(Q.irrational, Q.finite),\n         Implies(Q.algebraic, Q.complex),\n-        Equivalent(Q.transcendental | Q.algebraic, Q.complex),\n+        Implies(Q.algebraic, Q.finite),\n+        Equivalent(Q.transcendental | Q.algebraic, Q.complex & Q.finite),\n         Implies(Q.transcendental, ~Q.algebraic),\n+        Implies(Q.transcendental, Q.finite),\n         Implies(Q.imaginary, Q.complex & ~Q.real),\n         Implies(Q.imaginary, Q.antihermitian),\n         Implies(Q.antihermitian, ~Q.hermitian),\n-        Equivalent(Q.irrational | Q.rational, Q.real),\n+        Equivalent(Q.irrational | Q.rational, Q.real & Q.finite),\n         Implies(Q.irrational, ~Q.rational),\n         Implies(Q.zero, Q.even),\n \ndiff --git a/sympy/assumptions/ask_generated.py b/sympy/assumptions/ask_generated.py\n--- a/sympy/assumptions/ask_generated.py\n+++ b/sympy/assumptions/ask_generated.py\n@@ -25,6 +25,10 @@ def get_known_facts_cnf():\n         Q.even | ~Q.zero,\n         Q.extended_real | ~Q.infinite,\n         Q.extended_real | ~Q.real,\n+        Q.finite | ~Q.algebraic,\n+        Q.finite | ~Q.irrational,\n+        Q.finite | ~Q.rational,\n+        Q.finite | ~Q.transcendental,\n         Q.fullrank | ~Q.invertible,\n         Q.hermitian | ~Q.real,\n         Q.integer | ~Q.even,\n@@ -70,10 +74,8 @@ def get_known_facts_cnf():\n         ~Q.negative | ~Q.positive,\n         ~Q.negative | ~Q.zero,\n         ~Q.positive | ~Q.zero,\n-        Q.algebraic | Q.transcendental | ~Q.complex,\n         Q.even | Q.odd | ~Q.integer,\n         Q.infinite | Q.real | ~Q.extended_real,\n-        Q.irrational | Q.rational | ~Q.real,\n         Q.lower_triangular | Q.upper_triangular | ~Q.triangular,\n         Q.negative | Q.positive | ~Q.nonzero,\n         Q.negative | Q.zero | ~Q.nonpositive,\n@@ -82,14 +84,16 @@ def get_known_facts_cnf():\n         Q.invertible | ~Q.fullrank | ~Q.square,\n         Q.orthogonal | ~Q.real | ~Q.unitary,\n         Q.negative | Q.positive | Q.zero | ~Q.real,\n-        Q.composite | Q.prime | ~Q.integer | ~Q.positive\n+        Q.algebraic | Q.transcendental | ~Q.complex | ~Q.finite,\n+        Q.composite | Q.prime | ~Q.integer | ~Q.positive,\n+        Q.irrational | Q.rational | ~Q.finite | ~Q.real\n     )\n \n # -{ Known facts in compressed sets }-\n @cacheit\n def get_known_facts_dict():\n     return {\n-        Q.algebraic: set([Q.algebraic, Q.complex]),\n+        Q.algebraic: set([Q.algebraic, Q.complex, Q.finite]),\n         Q.antihermitian: set([Q.antihermitian]),\n         Q.commutative: set([Q.commutative]),\n         Q.complex: set([Q.complex]),\n@@ -98,19 +102,19 @@ def get_known_facts_dict():\n         Q.diagonal: set([Q.diagonal, Q.lower_triangular, Q.normal, Q.square,\n         Q.symmetric, Q.triangular, Q.upper_triangular]),\n         Q.even: set([Q.algebraic, Q.complex, Q.even, Q.extended_real,\n-        Q.hermitian, Q.integer, Q.rational, Q.real]),\n+        Q.finite, Q.hermitian, Q.integer, Q.rational, Q.real]),\n         Q.extended_real: set([Q.extended_real]),\n         Q.finite: set([Q.finite]),\n         Q.fullrank: set([Q.fullrank]),\n         Q.hermitian: set([Q.hermitian]),\n         Q.imaginary: set([Q.antihermitian, Q.complex, Q.imaginary]),\n         Q.infinite: set([Q.extended_real, Q.infinite]),\n-        Q.integer: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,\n-        Q.integer, Q.rational, Q.real]),\n+        Q.integer: set([Q.algebraic, Q.complex, Q.extended_real, Q.finite,\n+        Q.hermitian, Q.integer, Q.rational, Q.real]),\n         Q.integer_elements: set([Q.complex_elements, Q.integer_elements,\n         Q.real_elements]),\n         Q.invertible: set([Q.fullrank, Q.invertible, Q.square]),\n-        Q.irrational: set([Q.complex, Q.extended_real, Q.hermitian,\n+        Q.irrational: set([Q.complex, Q.extended_real, Q.finite, Q.hermitian,\n         Q.irrational, Q.nonzero, Q.real]),\n         Q.is_true: set([Q.is_true]),\n         Q.lower_triangular: set([Q.lower_triangular, Q.triangular]),\n@@ -123,31 +127,31 @@ def get_known_facts_dict():\n         Q.nonzero: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonzero,\n         Q.real]),\n         Q.normal: set([Q.normal, Q.square]),\n-        Q.odd: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,\n-        Q.integer, Q.nonzero, Q.odd, Q.rational, Q.real]),\n+        Q.odd: set([Q.algebraic, Q.complex, Q.extended_real, Q.finite,\n+        Q.hermitian, Q.integer, Q.nonzero, Q.odd, Q.rational, Q.real]),\n         Q.orthogonal: set([Q.fullrank, Q.invertible, Q.normal, Q.orthogonal,\n         Q.positive_definite, Q.square, Q.unitary]),\n         Q.positive: set([Q.complex, Q.extended_real, Q.hermitian,\n         Q.nonnegative, Q.nonzero, Q.positive, Q.real]),\n         Q.positive_definite: set([Q.fullrank, Q.invertible,\n         Q.positive_definite, Q.square]),\n-        Q.prime: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,\n-        Q.integer, Q.nonnegative, Q.nonzero, Q.positive, Q.prime,\n-        Q.rational, Q.real]),\n-        Q.rational: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,\n-        Q.rational, Q.real]),\n+        Q.prime: set([Q.algebraic, Q.complex, Q.extended_real, Q.finite,\n+        Q.hermitian, Q.integer, Q.nonnegative, Q.nonzero, Q.positive,\n+        Q.prime, Q.rational, Q.real]),\n+        Q.rational: set([Q.algebraic, Q.complex, Q.extended_real, Q.finite,\n+        Q.hermitian, Q.rational, Q.real]),\n         Q.real: set([Q.complex, Q.extended_real, Q.hermitian, Q.real]),\n         Q.real_elements: set([Q.complex_elements, Q.real_elements]),\n         Q.singular: set([Q.singular]),\n         Q.square: set([Q.square]),\n         Q.symmetric: set([Q.square, Q.symmetric]),\n-        Q.transcendental: set([Q.complex, Q.transcendental]),\n+        Q.transcendental: set([Q.complex, Q.finite, Q.transcendental]),\n         Q.triangular: set([Q.triangular]),\n         Q.unit_triangular: set([Q.triangular, Q.unit_triangular]),\n         Q.unitary: set([Q.fullrank, Q.invertible, Q.normal, Q.square,\n         Q.unitary]),\n         Q.upper_triangular: set([Q.triangular, Q.upper_triangular]),\n         Q.zero: set([Q.algebraic, Q.complex, Q.even, Q.extended_real,\n-        Q.hermitian, Q.integer, Q.nonnegative, Q.nonpositive,\n-        Q.rational, Q.real, Q.zero]),\n+        Q.finite, Q.hermitian, Q.integer, Q.nonnegative,\n+        Q.nonpositive, Q.rational, Q.real, Q.zero]),\n     }\ndiff --git a/sympy/core/assumptions.py b/sympy/core/assumptions.py\n--- a/sympy/core/assumptions.py\n+++ b/sympy/core/assumptions.py\n@@ -163,9 +163,9 @@\n _assume_rules = FactRules([\n \n     'integer        ->  rational',\n-    'rational       ->  real',\n+    'rational       ->  real & finite',\n     'rational       ->  algebraic',\n-    'algebraic      ->  complex',\n+    'algebraic      ->  complex & finite',\n     'real           ->  complex',\n     'real           ->  hermitian',\n     'imaginary      ->  complex',\n@@ -176,7 +176,7 @@\n     'even           ==  integer & !odd',\n \n     'real           ==  negative | zero | positive',\n-    'transcendental ==  complex & !algebraic',\n+    'transcendental ==  complex & !algebraic & finite',\n \n     'negative       ==  nonpositive & nonzero',\n     'positive       ==  nonnegative & nonzero',\n@@ -191,7 +191,7 @@\n     'composite      ->  integer & positive & !prime',\n     '!composite     ->  !positive | !even | prime',\n \n-    'irrational     ==  real & !rational',\n+    'irrational     ==  real & !rational & finite',\n \n     'imaginary      ->  !real',\n \ndiff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -9,7 +9,7 @@\n from .evalf import PrecisionExhausted\n from .function import (_coeff_isneg, expand_complex, expand_multinomial,\n     expand_mul)\n-from .logic import fuzzy_bool, fuzzy_not\n+from .logic import fuzzy_bool, fuzzy_not, fuzzy_and\n from .compatibility import as_int, range\n from .evaluate import global_evaluate\n from sympy.utilities.iterables import sift\n@@ -1180,6 +1180,12 @@ def _eval_is_polynomial(self, syms):\n             return True\n \n     def _eval_is_rational(self):\n+        # The evaluation of self.func below can be very expensive in the case\n+        # of integer**integer if the exponent is large.  We should try to exit\n+        # before that if possible:\n+        if (self.exp.is_integer and self.base.is_rational\n+                and fuzzy_not(fuzzy_and([self.exp.is_negative, self.base.is_zero]))):\n+            return True\n         p = self.func(*self.as_base_exp())  # in case it's unevaluated\n         if not p.is_Pow:\n             return p.is_rational\ndiff --git a/sympy/printing/tree.py b/sympy/printing/tree.py\n--- a/sympy/printing/tree.py\n+++ b/sympy/printing/tree.py\n@@ -90,8 +90,10 @@ def print_tree(node):\n     | commutative: True\n     | complex: True\n     | even: True\n+    | finite: True\n     | hermitian: True\n     | imaginary: False\n+    | infinite: False\n     | integer: True\n     | irrational: False\n     | noninteger: False\n@@ -104,8 +106,10 @@ def print_tree(node):\n       commutative: True\n       complex: True\n       even: False\n+      finite: True\n       hermitian: True\n       imaginary: False\n+      infinite: False\n       integer: True\n       irrational: False\n       noninteger: False\ndiff --git a/sympy/tensor/indexed.py b/sympy/tensor/indexed.py\n--- a/sympy/tensor/indexed.py\n+++ b/sympy/tensor/indexed.py\n@@ -602,7 +602,8 @@ def __new__(cls, label, range=None, **kw_args):\n                 raise ValueError(filldedent(\"\"\"\n                     Idx range tuple must have length 2, but got %s\"\"\" % len(range)))\n             for bound in range:\n-                if bound.is_integer is False:\n+                if (bound.is_integer is False and bound is not S.Infinity\n+                        and bound is not S.NegativeInfinity):\n                     raise TypeError(\"Idx object requires integer bounds.\")\n             args = label, Tuple(*range)\n         elif isinstance(range, Expr):\n",
    "test_patch": "diff --git a/sympy/core/tests/test_assumptions.py b/sympy/core/tests/test_assumptions.py\n--- a/sympy/core/tests/test_assumptions.py\n+++ b/sympy/core/tests/test_assumptions.py\n@@ -98,26 +98,26 @@ def test_infinity():\n     oo = S.Infinity\n \n     assert oo.is_commutative is True\n-    assert oo.is_integer is None\n-    assert oo.is_rational is None\n-    assert oo.is_algebraic is None\n-    assert oo.is_transcendental is None\n+    assert oo.is_integer is False\n+    assert oo.is_rational is False\n+    assert oo.is_algebraic is False\n+    assert oo.is_transcendental is False\n     assert oo.is_real is True\n     assert oo.is_complex is True\n-    assert oo.is_noninteger is None\n-    assert oo.is_irrational is None\n+    assert oo.is_noninteger is True\n+    assert oo.is_irrational is False\n     assert oo.is_imaginary is False\n     assert oo.is_positive is True\n     assert oo.is_negative is False\n     assert oo.is_nonpositive is False\n     assert oo.is_nonnegative is True\n-    assert oo.is_even is None\n-    assert oo.is_odd is None\n+    assert oo.is_even is False\n+    assert oo.is_odd is False\n     assert oo.is_finite is False\n     assert oo.is_infinite is True\n     assert oo.is_comparable is True\n     assert oo.is_prime is False\n-    assert oo.is_composite is None\n+    assert oo.is_composite is False\n     assert oo.is_number is True\n \n \n@@ -125,21 +125,21 @@ def test_neg_infinity():\n     mm = S.NegativeInfinity\n \n     assert mm.is_commutative is True\n-    assert mm.is_integer is None\n-    assert mm.is_rational is None\n-    assert mm.is_algebraic is None\n-    assert mm.is_transcendental is None\n+    assert mm.is_integer is False\n+    assert mm.is_rational is False\n+    assert mm.is_algebraic is False\n+    assert mm.is_transcendental is False\n     assert mm.is_real is True\n     assert mm.is_complex is True\n-    assert mm.is_noninteger is None\n-    assert mm.is_irrational is None\n+    assert mm.is_noninteger is True\n+    assert mm.is_irrational is False\n     assert mm.is_imaginary is False\n     assert mm.is_positive is False\n     assert mm.is_negative is True\n     assert mm.is_nonpositive is True\n     assert mm.is_nonnegative is False\n-    assert mm.is_even is None\n-    assert mm.is_odd is None\n+    assert mm.is_even is False\n+    assert mm.is_odd is False\n     assert mm.is_finite is False\n     assert mm.is_infinite is True\n     assert mm.is_comparable is True\n@@ -567,46 +567,71 @@ def test_other_symbol():\n     x = Symbol('x', integer=True)\n     assert x.is_integer is True\n     assert x.is_real is True\n+    assert x.is_finite is True\n \n     x = Symbol('x', integer=True, nonnegative=True)\n     assert x.is_integer is True\n     assert x.is_nonnegative is True\n     assert x.is_negative is False\n     assert x.is_positive is None\n+    assert x.is_finite is True\n \n     x = Symbol('x', integer=True, nonpositive=True)\n     assert x.is_integer is True\n     assert x.is_nonpositive is True\n     assert x.is_positive is False\n     assert x.is_negative is None\n+    assert x.is_finite is True\n \n     x = Symbol('x', odd=True)\n     assert x.is_odd is True\n     assert x.is_even is False\n     assert x.is_integer is True\n+    assert x.is_finite is True\n \n     x = Symbol('x', odd=False)\n     assert x.is_odd is False\n     assert x.is_even is None\n     assert x.is_integer is None\n+    assert x.is_finite is None\n \n     x = Symbol('x', even=True)\n     assert x.is_even is True\n     assert x.is_odd is False\n     assert x.is_integer is True\n+    assert x.is_finite is True\n \n     x = Symbol('x', even=False)\n     assert x.is_even is False\n     assert x.is_odd is None\n     assert x.is_integer is None\n+    assert x.is_finite is None\n \n     x = Symbol('x', integer=True, nonnegative=True)\n     assert x.is_integer is True\n     assert x.is_nonnegative is True\n+    assert x.is_finite is True\n \n     x = Symbol('x', integer=True, nonpositive=True)\n     assert x.is_integer is True\n     assert x.is_nonpositive is True\n+    assert x.is_finite is True\n+\n+    x = Symbol('x', rational=True)\n+    assert x.is_real is True\n+    assert x.is_finite is True\n+\n+    x = Symbol('x', rational=False)\n+    assert x.is_real is None\n+    assert x.is_finite is None\n+\n+    x = Symbol('x', irrational=True)\n+    assert x.is_real is True\n+    assert x.is_finite is True\n+\n+    x = Symbol('x', irrational=False)\n+    assert x.is_real is None\n+    assert x.is_finite is None\n \n     with raises(AttributeError):\n         x.is_real = False\ndiff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -216,7 +216,7 @@ def test_minmax_assumptions():\n     a = Symbol('a', real=True, algebraic=True)\n     t = Symbol('t', real=True, transcendental=True)\n     q = Symbol('q', rational=True)\n-    p = Symbol('p', real=True, rational=False)\n+    p = Symbol('p', irrational=True)\n     n = Symbol('n', rational=True, integer=False)\n     i = Symbol('i', integer=True)\n     o = Symbol('o', odd=True)\n",
    "problem_statement": "`a.is_even` non implica `a.is_finite`\nNon sono sicuro di quale sia la risposta corretta in questo caso:\n```julia\nIn [1]: m = Symbol('m', even=True)                                                                                                             \n\nIn [2]: m.is_finite                                                                                                                            \n\nIn [3]: print(m.is_finite)                                                                                                                     \n None\n```\nMi aspetterei che un numero debba essere finito prima di poter essere pari.",
    "hints_text": "Ha provato qualcuno a rappresentare le ipotesi di SymPy come un grafo diretto? Anche solo provare a disegnarle su carta potrebbe essere una buona idea per testarle, anche se non è così che il codice effettivo le gestisce.\nMi piacerebbe molto vedere una spiegazione che definisca i significati dei diversi attributi `is_*` da qualche parte. Le relazioni implicite tra di essi sarebbero molto utili, ma già solo le definizioni sarebbero un buon inizio!\nSimilmente:\n```julia\nIn [1]: i = Symbol('i', integer=True)                                                                                                          \r\n\r\nIn [2]: print(i.is_finite)                                                                                                                     \r\nNone\n```\nCiao @oscarbenjamin, ci sono davvero molti fili sciolti nel caso delle ipotesi e di ciò che definiscono. Ho esaminato il loro codice in `core` e la maggior parte di esse è una sequenza di condizionali (che a volte possono produrre risultati diversi). Non sono logicamente molto ricche. Sarebbe davvero utile iniziare una discussione su cosa dovrebbe definire ogni ipotesi.\n> una spiegazione che definisca i significati dei diversi attributi is_*\r\n\nLa maggior parte di essi è definita in `_assume_rules` di `core.assumptions`. Forse la seconda regola `'rational       ->  real'` dovrebbe essere estesa a `'rational       ->  real & finite'`.\nIn realtà, `real` dovrebbe già implicare `finite`, ma attualmente il suo significato è `extended_real`, e aggiungere `finite` a `real` probabilmente romperebbe molto codice. Ma penso che dovrebbe essere sicuro aggiungere `finite` a `rational`.\nConsidera gli integrali e le sommatorie in cui le variabili sono reali e intere, rispettivamente. Tuttavia, è possibile integrare/accumulare con limiti di +/-oo. Non sono sicuro di cosa significhi qui, ma è leggermente correlato a #16014, (tranne che si dovrà contrassegnare le variabili di integrazione come `extended_real` per il caso generale).",
    "created_at": "2019-04-08T12:49:10Z",
    "version": "1.5",
    "FAIL_TO_PASS": "[\"test_infinity\", \"test_neg_infinity\", \"test_other_symbol\"]",
    "PASS_TO_PASS": "[\"test_symbol_unset\", \"test_zero\", \"test_one\", \"test_negativeone\", \"test_zoo\", \"test_nan\", \"test_pos_rational\", \"test_neg_rational\", \"test_pi\", \"test_E\", \"test_I\", \"test_symbol_real\", \"test_symbol_imaginary\", \"test_symbol_zero\", \"test_symbol_positive\", \"test_neg_symbol_positive\", \"test_symbol_nonpositive\", \"test_neg_symbol_nonpositive\", \"test_symbol_falsepositive\", \"test_symbol_falsepositive_mul\", \"test_neg_symbol_falsepositive\", \"test_neg_symbol_falsenegative\", \"test_symbol_falsepositive_real\", \"test_neg_symbol_falsepositive_real\", \"test_symbol_falsenonnegative\", \"test_symbol_falsenonnegative_real\", \"test_neg_symbol_falsenonnegative_real\", \"test_prime\", \"test_composite\", \"test_prime_symbol\", \"test_symbol_noncommutative\", \"test_issue_3825\", \"test_issue_4822\", \"test_hash_vs_typeinfo\", \"test_hash_vs_typeinfo_2\", \"test_hash_vs_eq\", \"test_Add_is_pos_neg\", \"test_Add_is_imaginary\", \"test_Add_is_algebraic\", \"test_Mul_is_algebraic\", \"test_Pow_is_algebraic\", \"test_Mul_is_prime_composite\", \"test_Pow_is_pos_neg\", \"test_Pow_is_prime_composite\", \"test_Mul_is_infinite\", \"test_special_is_rational\", \"test_sanitize_assumptions\", \"test_special_assumptions\", \"test_inconsistent\", \"test_issue_6631\", \"test_issue_2730\", \"test_issue_4149\", \"test_issue_2920\", \"test_issue_7899\", \"test_issue_8075\", \"test_issue_8642\", \"test_issues_8632_8633_8638_8675_8992\", \"test_issue_9115_9150\", \"test_issue_9165\", \"test_issue_10024\", \"test_issue_10302\", \"test_complex_reciprocal_imaginary\", \"test_Min\", \"test_Max\", \"test_minmax_assumptions\", \"test_issue_8413\", \"test_root\", \"test_real_root\", \"test_rewrite_MaxMin_as_Heaviside\", \"test_rewrite_MaxMin_as_Piecewise\", \"test_issue_11099\", \"test_issue_12638\", \"test_instantiation_evaluation\", \"test_rewrite_as_Abs\"]",
    "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15503",
    "base_commit": "859a87d873ce7152af73ab851653b4e1c3ffea4c",
    "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -172,6 +172,10 @@ def as_sql(self, compiler, connection):\n class HasKeyLookup(PostgresOperatorLookup):\n     logical_operator = None\n \n+    def compile_json_path_final_key(self, key_transform):\n+        # Compile the final key without interpreting ints as array elements.\n+        return \".%s\" % json.dumps(key_transform)\n+\n     def as_sql(self, compiler, connection, template=None):\n         # Process JSON path from the left-hand side.\n         if isinstance(self.lhs, KeyTransform):\n@@ -193,13 +197,10 @@ def as_sql(self, compiler, connection, template=None):\n                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n             else:\n                 rhs_key_transforms = [key]\n-            rhs_params.append(\n-                \"%s%s\"\n-                % (\n-                    lhs_json_path,\n-                    compile_json_path(rhs_key_transforms, include_root=False),\n-                )\n-            )\n+            *rhs_key_transforms, final_key = rhs_key_transforms\n+            rhs_json_path = compile_json_path(rhs_key_transforms, include_root=False)\n+            rhs_json_path += self.compile_json_path_final_key(final_key)\n+            rhs_params.append(lhs_json_path + rhs_json_path)\n         # Add condition for each key.\n         if self.logical_operator:\n             sql = \"(%s)\" % self.logical_operator.join([sql] * len(rhs_params))\n@@ -253,6 +254,11 @@ class HasAnyKeys(HasKeys):\n     logical_operator = \" OR \"\n \n \n+class HasKeyOrArrayIndex(HasKey):\n+    def compile_json_path_final_key(self, key_transform):\n+        return compile_json_path([key_transform], include_root=False)\n+\n+\n class CaseInsensitiveMixin:\n     \"\"\"\n     Mixin to allow case-insensitive comparison of JSON values on MySQL.\n@@ -387,7 +393,7 @@ def __init__(self, key_transform, *args, **kwargs):\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n-        sql, params = HasKey(\n+        sql, params = HasKeyOrArrayIndex(\n             self.lhs.lhs,\n             self.lhs.key_name,\n         ).as_oracle(compiler, connection)\n@@ -401,7 +407,7 @@ def as_sqlite(self, compiler, connection):\n         template = \"JSON_TYPE(%s, %%s) IS NULL\"\n         if not self.rhs:\n             template = \"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(\n+        return HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name).as_sql(\n             compiler,\n             connection,\n             template=template,\n@@ -466,7 +472,7 @@ def as_oracle(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n         if rhs_params == [\"null\"]:\n             # Field has key and it's NULL.\n-            has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+            has_key_expr = HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name)\n             has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)\n             is_null_expr = self.lhs.get_lookup(\"isnull\")(self.lhs, True)\n             is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)\n",
    "test_patch": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -576,6 +576,33 @@ def test_has_any_keys(self):\n             [self.objs[3], self.objs[4], self.objs[6]],\n         )\n \n+    def test_has_key_number(self):\n+        obj = NullableJSONModel.objects.create(\n+            value={\n+                \"123\": \"value\",\n+                \"nested\": {\"456\": \"bar\", \"lorem\": \"abc\", \"999\": True},\n+                \"array\": [{\"789\": \"baz\", \"777\": \"def\", \"ipsum\": 200}],\n+                \"000\": \"val\",\n+            }\n+        )\n+        tests = [\n+            Q(value__has_key=\"123\"),\n+            Q(value__nested__has_key=\"456\"),\n+            Q(value__array__0__has_key=\"789\"),\n+            Q(value__has_keys=[\"nested\", \"123\", \"array\", \"000\"]),\n+            Q(value__nested__has_keys=[\"lorem\", \"999\", \"456\"]),\n+            Q(value__array__0__has_keys=[\"789\", \"ipsum\", \"777\"]),\n+            Q(value__has_any_keys=[\"000\", \"nonexistent\"]),\n+            Q(value__nested__has_any_keys=[\"999\", \"nonexistent\"]),\n+            Q(value__array__0__has_any_keys=[\"777\", \"nonexistent\"]),\n+        ]\n+        for condition in tests:\n+            with self.subTest(condition=condition):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(condition),\n+                    [obj],\n+                )\n+\n     @skipUnlessDBFeature(\"supports_json_field_contains\")\n     def test_contains(self):\n         tests = [\n",
    "problem_statement": "`has_key`, `has_keys` e `has_any_keys` ricerche di `JSONField()` non gestiscono chiavi numeriche su SQLite, MySQL e Oracle.\n\n**Descrizione**\n\n(ultima modifica di TheTerrasque)\n\n**Problema**\n\nQuando si utilizza la ricerca `has_key` di `models.JSONField()` con chiavi numeriche su un database SQLite, non riesce a trovare le chiavi.\n\n**Versioni:**\n\n* Django: 4.0.3\n* Python: 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] su win32\n* sqlite3.version: '2.6.0'\n* sqlite3.sqlite_version: '3.35.5'\n\n**Esempio:**\n\n**Database**\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n```\n\n**Modello**\n\n```python\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n```\n\n**Test**\n\n```python\nfrom django.test import TestCase\nfrom .models import JsonFieldHasKeyTest\n\nclass JsonFieldHasKeyTestCase(TestCase):\n    def setUp(self) -> None:\n        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n        test.save()\n        test2.save()\n\n    def test_json_field_has_key(self):\n        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n        self.assertEqual(c1, 1, \"Dovrebbe aver trovato 1 voce con chiave 'foo'\")\n        self.assertEqual(c2, 1, \"Dovrebbe aver trovato 1 voce con chiave '1111'\")\n```\n\n**Risultato**\n\n```\nFAIL: test_json_field_has_key (markers.tests.JsonFieldHasKeyTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"H:\\Files\\Projects\\Electaco\\Webservice\\elecserve\\markers\\tests.py\", line 16, in test_json_field_has_key\n    self.assertEqual(c2, 1, \"Dovrebbe aver trovato 1 voce con chiave '1111'\")\nAssertionError: 0 != 1 : Dovrebbe aver trovato 1 voce con chiave '1111'\n```\n\n**Informazioni aggiuntive**\n\nQuesto problema è stato testato sui backend SQLite e PostgreSQL. Funziona su PostgreSQL ma fallisce su SQLite.",
    "hints_text": "Duplicato di #30566, vedi commento.\nNon è un duplicato di #30566 Questo è `models.JSONField()` di Django, non l'estensione `JSONField` di Postgres. Funziona come previsto su Postgresql, il bug è su SQLite. #30566 va direttamente contro i commenti per https://code.djangoproject.com/ticket/29504. Se si prevede un comportamento diverso su SQLite (o Postgres se la maggior parte dei backend ha il comportamento di SQLite), dovrebbe essere documentato.\nRiproduco questo problema su SQLite, MySQL e Oracle. Le ricerche `has_key`, `has_keys` e `has_any_keys` utilizzano `compile_json_path()` su SQLite, MySQL e Oracle, che utilizza percorsi di array per gli interi. Non dovremmo utilizzare percorsi di array per queste ricerche.",
    "created_at": "2022-03-12T06:22:37Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_has_key_number (model_fields.test_jsonfield.TestQuerying)\", \"test_has_keys (model_fields.test_jsonfield.TestQuerying)\"]",
    "PASS_TO_PASS": "[\"test_formfield (model_fields.test_jsonfield.TestFormField)\", \"test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField)\", \"test_custom_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_decoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_validation_error (model_fields.test_jsonfield.TestValidation)\", \"test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests)\", \"test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests)\", \"test_invalid_value (model_fields.test_jsonfield.JSONFieldTests)\", \"test_deconstruct (model_fields.test_jsonfield.TestMethods)\", \"test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods)\", \"test_get_transforms (model_fields.test_jsonfield.TestMethods)\", \"test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods)\", \"test_dict (model_fields.test_jsonfield.TestSaveLoad)\", \"test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_list (model_fields.test_jsonfield.TestSaveLoad)\", \"test_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_primitives (model_fields.test_jsonfield.TestSaveLoad)\", \"test_realistic_object (model_fields.test_jsonfield.TestSaveLoad)\", \"test_dumping (model_fields.test_jsonfield.TestSerialization)\", \"test_loading (model_fields.test_jsonfield.TestSerialization)\", \"test_xml_serialization (model_fields.test_jsonfield.TestSerialization)\", \"test_contained_by_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_contains_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_values (model_fields.test_jsonfield.TestQuerying)\", \"test_exact (model_fields.test_jsonfield.TestQuerying)\", \"test_exact_complex (model_fields.test_jsonfield.TestQuerying)\", \"test_expression_wrapper_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_has_any_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_deep (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_list (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_null_value (model_fields.test_jsonfield.TestQuerying)\", \"test_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying)\", \"test_join_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_endswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iendswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iexact (model_fields.test_jsonfield.TestQuerying)\", \"test_key_in (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iregex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_istartswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_quoted_string (model_fields.test_jsonfield.TestQuerying)\", \"test_key_regex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_startswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_values (model_fields.test_jsonfield.TestQuerying)\", \"test_key_values_boolean (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude_nonexistent_key (model_fields.test_jsonfield.TestQuerying)\", \"test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_on_subquery (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_order_grouping_custom_decoder (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "pytest-dev/pytest",
    "instance_id": "pytest-dev__pytest-5787",
    "base_commit": "955e54221008aba577ecbaefa15679f6777d3bf8",
    "patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -3,6 +3,7 @@\n \n import py\n \n+from _pytest._code.code import ExceptionChainRepr\n from _pytest._code.code import ExceptionInfo\n from _pytest._code.code import ReprEntry\n from _pytest._code.code import ReprEntryNative\n@@ -160,46 +161,7 @@ def _to_json(self):\n \n         Experimental method.\n         \"\"\"\n-\n-        def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n-\n-        d = self.__dict__.copy()\n-        if hasattr(self.longrepr, \"toterminal\"):\n-            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n-                self.longrepr, \"reprcrash\"\n-            ):\n-                d[\"longrepr\"] = disassembled_report(self)\n-            else:\n-                d[\"longrepr\"] = str(self.longrepr)\n-        else:\n-            d[\"longrepr\"] = self.longrepr\n-        for name in d:\n-            if isinstance(d[name], (py.path.local, Path)):\n-                d[name] = str(d[name])\n-            elif name == \"result\":\n-                d[name] = None  # for now\n-        return d\n+        return _report_to_json(self)\n \n     @classmethod\n     def _from_json(cls, reportdict):\n@@ -211,55 +173,8 @@ def _from_json(cls, reportdict):\n \n         Experimental method.\n         \"\"\"\n-        if reportdict[\"longrepr\"]:\n-            if (\n-                \"reprcrash\" in reportdict[\"longrepr\"]\n-                and \"reprtraceback\" in reportdict[\"longrepr\"]\n-            ):\n-\n-                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n-                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n-                unserialized_entries = []\n-                reprentry = None\n-                for entry_data in reprtraceback[\"reprentries\"]:\n-                    data = entry_data[\"data\"]\n-                    entry_type = entry_data[\"type\"]\n-                    if entry_type == \"ReprEntry\":\n-                        reprfuncargs = None\n-                        reprfileloc = None\n-                        reprlocals = None\n-                        if data[\"reprfuncargs\"]:\n-                            reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n-                        if data[\"reprfileloc\"]:\n-                            reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n-                        if data[\"reprlocals\"]:\n-                            reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n-\n-                        reprentry = ReprEntry(\n-                            lines=data[\"lines\"],\n-                            reprfuncargs=reprfuncargs,\n-                            reprlocals=reprlocals,\n-                            filelocrepr=reprfileloc,\n-                            style=data[\"style\"],\n-                        )\n-                    elif entry_type == \"ReprEntryNative\":\n-                        reprentry = ReprEntryNative(data[\"lines\"])\n-                    else:\n-                        _report_unserialization_failure(entry_type, cls, reportdict)\n-                    unserialized_entries.append(reprentry)\n-                reprtraceback[\"reprentries\"] = unserialized_entries\n-\n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n-\n-                for section in reportdict[\"longrepr\"][\"sections\"]:\n-                    exception_info.addsection(*section)\n-                reportdict[\"longrepr\"] = exception_info\n-\n-        return cls(**reportdict)\n+        kwargs = _report_kwargs_from_json(reportdict)\n+        return cls(**kwargs)\n \n \n def _report_unserialization_failure(type_name, report_class, reportdict):\n@@ -424,3 +339,142 @@ def pytest_report_from_serializable(data):\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n             data[\"_report_type\"]\n         )\n+\n+\n+def _report_to_json(report):\n+    \"\"\"\n+    This was originally the serialize_report() function from xdist (ca03269).\n+\n+    Returns the contents of this report as a dict of builtin entries, suitable for\n+    serialization.\n+    \"\"\"\n+\n+    def serialize_repr_entry(entry):\n+        entry_data = {\"type\": type(entry).__name__, \"data\": entry.__dict__.copy()}\n+        for key, value in entry_data[\"data\"].items():\n+            if hasattr(value, \"__dict__\"):\n+                entry_data[\"data\"][key] = value.__dict__.copy()\n+        return entry_data\n+\n+    def serialize_repr_traceback(reprtraceback):\n+        result = reprtraceback.__dict__.copy()\n+        result[\"reprentries\"] = [\n+            serialize_repr_entry(x) for x in reprtraceback.reprentries\n+        ]\n+        return result\n+\n+    def serialize_repr_crash(reprcrash):\n+        return reprcrash.__dict__.copy()\n+\n+    def serialize_longrepr(rep):\n+        result = {\n+            \"reprcrash\": serialize_repr_crash(rep.longrepr.reprcrash),\n+            \"reprtraceback\": serialize_repr_traceback(rep.longrepr.reprtraceback),\n+            \"sections\": rep.longrepr.sections,\n+        }\n+        if isinstance(rep.longrepr, ExceptionChainRepr):\n+            result[\"chain\"] = []\n+            for repr_traceback, repr_crash, description in rep.longrepr.chain:\n+                result[\"chain\"].append(\n+                    (\n+                        serialize_repr_traceback(repr_traceback),\n+                        serialize_repr_crash(repr_crash),\n+                        description,\n+                    )\n+                )\n+        else:\n+            result[\"chain\"] = None\n+        return result\n+\n+    d = report.__dict__.copy()\n+    if hasattr(report.longrepr, \"toterminal\"):\n+        if hasattr(report.longrepr, \"reprtraceback\") and hasattr(\n+            report.longrepr, \"reprcrash\"\n+        ):\n+            d[\"longrepr\"] = serialize_longrepr(report)\n+        else:\n+            d[\"longrepr\"] = str(report.longrepr)\n+    else:\n+        d[\"longrepr\"] = report.longrepr\n+    for name in d:\n+        if isinstance(d[name], (py.path.local, Path)):\n+            d[name] = str(d[name])\n+        elif name == \"result\":\n+            d[name] = None  # for now\n+    return d\n+\n+\n+def _report_kwargs_from_json(reportdict):\n+    \"\"\"\n+    This was originally the serialize_report() function from xdist (ca03269).\n+\n+    Returns **kwargs that can be used to construct a TestReport or CollectReport instance.\n+    \"\"\"\n+\n+    def deserialize_repr_entry(entry_data):\n+        data = entry_data[\"data\"]\n+        entry_type = entry_data[\"type\"]\n+        if entry_type == \"ReprEntry\":\n+            reprfuncargs = None\n+            reprfileloc = None\n+            reprlocals = None\n+            if data[\"reprfuncargs\"]:\n+                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+            if data[\"reprfileloc\"]:\n+                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+            if data[\"reprlocals\"]:\n+                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+            reprentry = ReprEntry(\n+                lines=data[\"lines\"],\n+                reprfuncargs=reprfuncargs,\n+                reprlocals=reprlocals,\n+                filelocrepr=reprfileloc,\n+                style=data[\"style\"],\n+            )\n+        elif entry_type == \"ReprEntryNative\":\n+            reprentry = ReprEntryNative(data[\"lines\"])\n+        else:\n+            _report_unserialization_failure(entry_type, TestReport, reportdict)\n+        return reprentry\n+\n+    def deserialize_repr_traceback(repr_traceback_dict):\n+        repr_traceback_dict[\"reprentries\"] = [\n+            deserialize_repr_entry(x) for x in repr_traceback_dict[\"reprentries\"]\n+        ]\n+        return ReprTraceback(**repr_traceback_dict)\n+\n+    def deserialize_repr_crash(repr_crash_dict):\n+        return ReprFileLocation(**repr_crash_dict)\n+\n+    if (\n+        reportdict[\"longrepr\"]\n+        and \"reprcrash\" in reportdict[\"longrepr\"]\n+        and \"reprtraceback\" in reportdict[\"longrepr\"]\n+    ):\n+\n+        reprtraceback = deserialize_repr_traceback(\n+            reportdict[\"longrepr\"][\"reprtraceback\"]\n+        )\n+        reprcrash = deserialize_repr_crash(reportdict[\"longrepr\"][\"reprcrash\"])\n+        if reportdict[\"longrepr\"][\"chain\"]:\n+            chain = []\n+            for repr_traceback_data, repr_crash_data, description in reportdict[\n+                \"longrepr\"\n+            ][\"chain\"]:\n+                chain.append(\n+                    (\n+                        deserialize_repr_traceback(repr_traceback_data),\n+                        deserialize_repr_crash(repr_crash_data),\n+                        description,\n+                    )\n+                )\n+            exception_info = ExceptionChainRepr(chain)\n+        else:\n+            exception_info = ReprExceptionInfo(reprtraceback, reprcrash)\n+\n+        for section in reportdict[\"longrepr\"][\"sections\"]:\n+            exception_info.addsection(*section)\n+        reportdict[\"longrepr\"] = exception_info\n+\n+    return reportdict\n",
    "test_patch": "diff --git a/testing/code/test_code.py b/testing/code/test_code.py\n--- a/testing/code/test_code.py\n+++ b/testing/code/test_code.py\n@@ -1,8 +1,6 @@\n import sys\n from unittest import mock\n \n-from test_excinfo import TWMock\n-\n import _pytest._code\n import pytest\n \n@@ -168,17 +166,15 @@ def test_getsource(self):\n \n \n class TestReprFuncArgs:\n-    def test_not_raise_exception_with_mixed_encoding(self):\n+    def test_not_raise_exception_with_mixed_encoding(self, tw_mock):\n         from _pytest._code.code import ReprFuncArgs\n \n-        tw = TWMock()\n-\n         args = [(\"unicode_string\", \"São Paulo\"), (\"utf8_string\", b\"S\\xc3\\xa3o Paulo\")]\n \n         r = ReprFuncArgs(args)\n-        r.toterminal(tw)\n+        r.toterminal(tw_mock)\n \n         assert (\n-            tw.lines[0]\n+            tw_mock.lines[0]\n             == r\"unicode_string = São Paulo, utf8_string = b'S\\xc3\\xa3o Paulo'\"\n         )\ndiff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -31,33 +31,6 @@ def limited_recursion_depth():\n     sys.setrecursionlimit(before)\n \n \n-class TWMock:\n-    WRITE = object()\n-\n-    def __init__(self):\n-        self.lines = []\n-        self.is_writing = False\n-\n-    def sep(self, sep, line=None):\n-        self.lines.append((sep, line))\n-\n-    def write(self, msg, **kw):\n-        self.lines.append((TWMock.WRITE, msg))\n-\n-    def line(self, line, **kw):\n-        self.lines.append(line)\n-\n-    def markup(self, text, **kw):\n-        return text\n-\n-    def get_write_msg(self, idx):\n-        flag, msg = self.lines[idx]\n-        assert flag == TWMock.WRITE\n-        return msg\n-\n-    fullwidth = 80\n-\n-\n def test_excinfo_simple() -> None:\n     try:\n         raise ValueError\n@@ -658,7 +631,7 @@ def func1():\n         assert loc.lineno == 3\n         # assert loc.message == \"ValueError: hello\"\n \n-    def test_repr_tracebackentry_lines2(self, importasmod):\n+    def test_repr_tracebackentry_lines2(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def func1(m, x, y, z):\n@@ -678,13 +651,12 @@ def func1(m, x, y, z):\n         p = FormattedExcinfo(funcargs=True)\n         repr_entry = p.repr_traceback_entry(entry)\n         assert repr_entry.reprfuncargs.args == reprfuncargs.args\n-        tw = TWMock()\n-        repr_entry.toterminal(tw)\n-        assert tw.lines[0] == \"m = \" + repr(\"m\" * 90)\n-        assert tw.lines[1] == \"x = 5, y = 13\"\n-        assert tw.lines[2] == \"z = \" + repr(\"z\" * 120)\n+        repr_entry.toterminal(tw_mock)\n+        assert tw_mock.lines[0] == \"m = \" + repr(\"m\" * 90)\n+        assert tw_mock.lines[1] == \"x = 5, y = 13\"\n+        assert tw_mock.lines[2] == \"z = \" + repr(\"z\" * 120)\n \n-    def test_repr_tracebackentry_lines_var_kw_args(self, importasmod):\n+    def test_repr_tracebackentry_lines_var_kw_args(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def func1(x, *y, **z):\n@@ -703,9 +675,8 @@ def func1(x, *y, **z):\n         p = FormattedExcinfo(funcargs=True)\n         repr_entry = p.repr_traceback_entry(entry)\n         assert repr_entry.reprfuncargs.args == reprfuncargs.args\n-        tw = TWMock()\n-        repr_entry.toterminal(tw)\n-        assert tw.lines[0] == \"x = 'a', y = ('b',), z = {'c': 'd'}\"\n+        repr_entry.toterminal(tw_mock)\n+        assert tw_mock.lines[0] == \"x = 'a', y = ('b',), z = {'c': 'd'}\"\n \n     def test_repr_tracebackentry_short(self, importasmod):\n         mod = importasmod(\n@@ -842,7 +813,7 @@ def raiseos():\n         assert p._makepath(__file__) == __file__\n         p.repr_traceback(excinfo)\n \n-    def test_repr_excinfo_addouterr(self, importasmod):\n+    def test_repr_excinfo_addouterr(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def entry():\n@@ -852,10 +823,9 @@ def entry():\n         excinfo = pytest.raises(ValueError, mod.entry)\n         repr = excinfo.getrepr()\n         repr.addsection(\"title\", \"content\")\n-        twmock = TWMock()\n-        repr.toterminal(twmock)\n-        assert twmock.lines[-1] == \"content\"\n-        assert twmock.lines[-2] == (\"-\", \"title\")\n+        repr.toterminal(tw_mock)\n+        assert tw_mock.lines[-1] == \"content\"\n+        assert tw_mock.lines[-2] == (\"-\", \"title\")\n \n     def test_repr_excinfo_reprcrash(self, importasmod):\n         mod = importasmod(\n@@ -920,7 +890,7 @@ def toterminal(self, tw):\n         x = str(MyRepr())\n         assert x == \"я\"\n \n-    def test_toterminal_long(self, importasmod):\n+    def test_toterminal_long(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def g(x):\n@@ -932,27 +902,26 @@ def f():\n         excinfo = pytest.raises(ValueError, mod.f)\n         excinfo.traceback = excinfo.traceback.filter()\n         repr = excinfo.getrepr()\n-        tw = TWMock()\n-        repr.toterminal(tw)\n-        assert tw.lines[0] == \"\"\n-        tw.lines.pop(0)\n-        assert tw.lines[0] == \"    def f():\"\n-        assert tw.lines[1] == \">       g(3)\"\n-        assert tw.lines[2] == \"\"\n-        line = tw.get_write_msg(3)\n+        repr.toterminal(tw_mock)\n+        assert tw_mock.lines[0] == \"\"\n+        tw_mock.lines.pop(0)\n+        assert tw_mock.lines[0] == \"    def f():\"\n+        assert tw_mock.lines[1] == \">       g(3)\"\n+        assert tw_mock.lines[2] == \"\"\n+        line = tw_mock.get_write_msg(3)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[4] == (\":5: \")\n-        assert tw.lines[5] == (\"_ \", None)\n-        assert tw.lines[6] == \"\"\n-        assert tw.lines[7] == \"    def g(x):\"\n-        assert tw.lines[8] == \">       raise ValueError(x)\"\n-        assert tw.lines[9] == \"E       ValueError: 3\"\n-        assert tw.lines[10] == \"\"\n-        line = tw.get_write_msg(11)\n+        assert tw_mock.lines[4] == (\":5: \")\n+        assert tw_mock.lines[5] == (\"_ \", None)\n+        assert tw_mock.lines[6] == \"\"\n+        assert tw_mock.lines[7] == \"    def g(x):\"\n+        assert tw_mock.lines[8] == \">       raise ValueError(x)\"\n+        assert tw_mock.lines[9] == \"E       ValueError: 3\"\n+        assert tw_mock.lines[10] == \"\"\n+        line = tw_mock.get_write_msg(11)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[12] == \":3: ValueError\"\n+        assert tw_mock.lines[12] == \":3: ValueError\"\n \n-    def test_toterminal_long_missing_source(self, importasmod, tmpdir):\n+    def test_toterminal_long_missing_source(self, importasmod, tmpdir, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def g(x):\n@@ -965,25 +934,24 @@ def f():\n         tmpdir.join(\"mod.py\").remove()\n         excinfo.traceback = excinfo.traceback.filter()\n         repr = excinfo.getrepr()\n-        tw = TWMock()\n-        repr.toterminal(tw)\n-        assert tw.lines[0] == \"\"\n-        tw.lines.pop(0)\n-        assert tw.lines[0] == \">   ???\"\n-        assert tw.lines[1] == \"\"\n-        line = tw.get_write_msg(2)\n+        repr.toterminal(tw_mock)\n+        assert tw_mock.lines[0] == \"\"\n+        tw_mock.lines.pop(0)\n+        assert tw_mock.lines[0] == \">   ???\"\n+        assert tw_mock.lines[1] == \"\"\n+        line = tw_mock.get_write_msg(2)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[3] == \":5: \"\n-        assert tw.lines[4] == (\"_ \", None)\n-        assert tw.lines[5] == \"\"\n-        assert tw.lines[6] == \">   ???\"\n-        assert tw.lines[7] == \"E   ValueError: 3\"\n-        assert tw.lines[8] == \"\"\n-        line = tw.get_write_msg(9)\n+        assert tw_mock.lines[3] == \":5: \"\n+        assert tw_mock.lines[4] == (\"_ \", None)\n+        assert tw_mock.lines[5] == \"\"\n+        assert tw_mock.lines[6] == \">   ???\"\n+        assert tw_mock.lines[7] == \"E   ValueError: 3\"\n+        assert tw_mock.lines[8] == \"\"\n+        line = tw_mock.get_write_msg(9)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[10] == \":3: ValueError\"\n+        assert tw_mock.lines[10] == \":3: ValueError\"\n \n-    def test_toterminal_long_incomplete_source(self, importasmod, tmpdir):\n+    def test_toterminal_long_incomplete_source(self, importasmod, tmpdir, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def g(x):\n@@ -996,25 +964,24 @@ def f():\n         tmpdir.join(\"mod.py\").write(\"asdf\")\n         excinfo.traceback = excinfo.traceback.filter()\n         repr = excinfo.getrepr()\n-        tw = TWMock()\n-        repr.toterminal(tw)\n-        assert tw.lines[0] == \"\"\n-        tw.lines.pop(0)\n-        assert tw.lines[0] == \">   ???\"\n-        assert tw.lines[1] == \"\"\n-        line = tw.get_write_msg(2)\n+        repr.toterminal(tw_mock)\n+        assert tw_mock.lines[0] == \"\"\n+        tw_mock.lines.pop(0)\n+        assert tw_mock.lines[0] == \">   ???\"\n+        assert tw_mock.lines[1] == \"\"\n+        line = tw_mock.get_write_msg(2)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[3] == \":5: \"\n-        assert tw.lines[4] == (\"_ \", None)\n-        assert tw.lines[5] == \"\"\n-        assert tw.lines[6] == \">   ???\"\n-        assert tw.lines[7] == \"E   ValueError: 3\"\n-        assert tw.lines[8] == \"\"\n-        line = tw.get_write_msg(9)\n+        assert tw_mock.lines[3] == \":5: \"\n+        assert tw_mock.lines[4] == (\"_ \", None)\n+        assert tw_mock.lines[5] == \"\"\n+        assert tw_mock.lines[6] == \">   ???\"\n+        assert tw_mock.lines[7] == \"E   ValueError: 3\"\n+        assert tw_mock.lines[8] == \"\"\n+        line = tw_mock.get_write_msg(9)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[10] == \":3: ValueError\"\n+        assert tw_mock.lines[10] == \":3: ValueError\"\n \n-    def test_toterminal_long_filenames(self, importasmod):\n+    def test_toterminal_long_filenames(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def f():\n@@ -1022,23 +989,22 @@ def f():\n         \"\"\"\n         )\n         excinfo = pytest.raises(ValueError, mod.f)\n-        tw = TWMock()\n         path = py.path.local(mod.__file__)\n         old = path.dirpath().chdir()\n         try:\n             repr = excinfo.getrepr(abspath=False)\n-            repr.toterminal(tw)\n+            repr.toterminal(tw_mock)\n             x = py.path.local().bestrelpath(path)\n             if len(x) < len(str(path)):\n-                msg = tw.get_write_msg(-2)\n+                msg = tw_mock.get_write_msg(-2)\n                 assert msg == \"mod.py\"\n-                assert tw.lines[-1] == \":3: ValueError\"\n+                assert tw_mock.lines[-1] == \":3: ValueError\"\n \n             repr = excinfo.getrepr(abspath=True)\n-            repr.toterminal(tw)\n-            msg = tw.get_write_msg(-2)\n+            repr.toterminal(tw_mock)\n+            msg = tw_mock.get_write_msg(-2)\n             assert msg == path\n-            line = tw.lines[-1]\n+            line = tw_mock.lines[-1]\n             assert line == \":3: ValueError\"\n         finally:\n             old.chdir()\n@@ -1073,7 +1039,7 @@ def f():\n         repr.toterminal(tw)\n         assert tw.stringio.getvalue()\n \n-    def test_traceback_repr_style(self, importasmod):\n+    def test_traceback_repr_style(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             def f():\n@@ -1091,35 +1057,34 @@ def i():\n         excinfo.traceback[1].set_repr_style(\"short\")\n         excinfo.traceback[2].set_repr_style(\"short\")\n         r = excinfo.getrepr(style=\"long\")\n-        tw = TWMock()\n-        r.toterminal(tw)\n-        for line in tw.lines:\n+        r.toterminal(tw_mock)\n+        for line in tw_mock.lines:\n             print(line)\n-        assert tw.lines[0] == \"\"\n-        assert tw.lines[1] == \"    def f():\"\n-        assert tw.lines[2] == \">       g()\"\n-        assert tw.lines[3] == \"\"\n-        msg = tw.get_write_msg(4)\n+        assert tw_mock.lines[0] == \"\"\n+        assert tw_mock.lines[1] == \"    def f():\"\n+        assert tw_mock.lines[2] == \">       g()\"\n+        assert tw_mock.lines[3] == \"\"\n+        msg = tw_mock.get_write_msg(4)\n         assert msg.endswith(\"mod.py\")\n-        assert tw.lines[5] == \":3: \"\n-        assert tw.lines[6] == (\"_ \", None)\n-        tw.get_write_msg(7)\n-        assert tw.lines[8].endswith(\"in g\")\n-        assert tw.lines[9] == \"    h()\"\n-        tw.get_write_msg(10)\n-        assert tw.lines[11].endswith(\"in h\")\n-        assert tw.lines[12] == \"    i()\"\n-        assert tw.lines[13] == (\"_ \", None)\n-        assert tw.lines[14] == \"\"\n-        assert tw.lines[15] == \"    def i():\"\n-        assert tw.lines[16] == \">       raise ValueError()\"\n-        assert tw.lines[17] == \"E       ValueError\"\n-        assert tw.lines[18] == \"\"\n-        msg = tw.get_write_msg(19)\n+        assert tw_mock.lines[5] == \":3: \"\n+        assert tw_mock.lines[6] == (\"_ \", None)\n+        tw_mock.get_write_msg(7)\n+        assert tw_mock.lines[8].endswith(\"in g\")\n+        assert tw_mock.lines[9] == \"    h()\"\n+        tw_mock.get_write_msg(10)\n+        assert tw_mock.lines[11].endswith(\"in h\")\n+        assert tw_mock.lines[12] == \"    i()\"\n+        assert tw_mock.lines[13] == (\"_ \", None)\n+        assert tw_mock.lines[14] == \"\"\n+        assert tw_mock.lines[15] == \"    def i():\"\n+        assert tw_mock.lines[16] == \">       raise ValueError()\"\n+        assert tw_mock.lines[17] == \"E       ValueError\"\n+        assert tw_mock.lines[18] == \"\"\n+        msg = tw_mock.get_write_msg(19)\n         msg.endswith(\"mod.py\")\n-        assert tw.lines[20] == \":9: ValueError\"\n+        assert tw_mock.lines[20] == \":9: ValueError\"\n \n-    def test_exc_chain_repr(self, importasmod):\n+    def test_exc_chain_repr(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             class Err(Exception):\n@@ -1140,72 +1105,71 @@ def h():\n         )\n         excinfo = pytest.raises(AttributeError, mod.f)\n         r = excinfo.getrepr(style=\"long\")\n-        tw = TWMock()\n-        r.toterminal(tw)\n-        for line in tw.lines:\n+        r.toterminal(tw_mock)\n+        for line in tw_mock.lines:\n             print(line)\n-        assert tw.lines[0] == \"\"\n-        assert tw.lines[1] == \"    def f():\"\n-        assert tw.lines[2] == \"        try:\"\n-        assert tw.lines[3] == \">           g()\"\n-        assert tw.lines[4] == \"\"\n-        line = tw.get_write_msg(5)\n+        assert tw_mock.lines[0] == \"\"\n+        assert tw_mock.lines[1] == \"    def f():\"\n+        assert tw_mock.lines[2] == \"        try:\"\n+        assert tw_mock.lines[3] == \">           g()\"\n+        assert tw_mock.lines[4] == \"\"\n+        line = tw_mock.get_write_msg(5)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[6] == \":6: \"\n-        assert tw.lines[7] == (\"_ \", None)\n-        assert tw.lines[8] == \"\"\n-        assert tw.lines[9] == \"    def g():\"\n-        assert tw.lines[10] == \">       raise ValueError()\"\n-        assert tw.lines[11] == \"E       ValueError\"\n-        assert tw.lines[12] == \"\"\n-        line = tw.get_write_msg(13)\n+        assert tw_mock.lines[6] == \":6: \"\n+        assert tw_mock.lines[7] == (\"_ \", None)\n+        assert tw_mock.lines[8] == \"\"\n+        assert tw_mock.lines[9] == \"    def g():\"\n+        assert tw_mock.lines[10] == \">       raise ValueError()\"\n+        assert tw_mock.lines[11] == \"E       ValueError\"\n+        assert tw_mock.lines[12] == \"\"\n+        line = tw_mock.get_write_msg(13)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[14] == \":12: ValueError\"\n-        assert tw.lines[15] == \"\"\n+        assert tw_mock.lines[14] == \":12: ValueError\"\n+        assert tw_mock.lines[15] == \"\"\n         assert (\n-            tw.lines[16]\n+            tw_mock.lines[16]\n             == \"The above exception was the direct cause of the following exception:\"\n         )\n-        assert tw.lines[17] == \"\"\n-        assert tw.lines[18] == \"    def f():\"\n-        assert tw.lines[19] == \"        try:\"\n-        assert tw.lines[20] == \"            g()\"\n-        assert tw.lines[21] == \"        except Exception as e:\"\n-        assert tw.lines[22] == \">           raise Err() from e\"\n-        assert tw.lines[23] == \"E           test_exc_chain_repr0.mod.Err\"\n-        assert tw.lines[24] == \"\"\n-        line = tw.get_write_msg(25)\n+        assert tw_mock.lines[17] == \"\"\n+        assert tw_mock.lines[18] == \"    def f():\"\n+        assert tw_mock.lines[19] == \"        try:\"\n+        assert tw_mock.lines[20] == \"            g()\"\n+        assert tw_mock.lines[21] == \"        except Exception as e:\"\n+        assert tw_mock.lines[22] == \">           raise Err() from e\"\n+        assert tw_mock.lines[23] == \"E           test_exc_chain_repr0.mod.Err\"\n+        assert tw_mock.lines[24] == \"\"\n+        line = tw_mock.get_write_msg(25)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[26] == \":8: Err\"\n-        assert tw.lines[27] == \"\"\n+        assert tw_mock.lines[26] == \":8: Err\"\n+        assert tw_mock.lines[27] == \"\"\n         assert (\n-            tw.lines[28]\n+            tw_mock.lines[28]\n             == \"During handling of the above exception, another exception occurred:\"\n         )\n-        assert tw.lines[29] == \"\"\n-        assert tw.lines[30] == \"    def f():\"\n-        assert tw.lines[31] == \"        try:\"\n-        assert tw.lines[32] == \"            g()\"\n-        assert tw.lines[33] == \"        except Exception as e:\"\n-        assert tw.lines[34] == \"            raise Err() from e\"\n-        assert tw.lines[35] == \"        finally:\"\n-        assert tw.lines[36] == \">           h()\"\n-        assert tw.lines[37] == \"\"\n-        line = tw.get_write_msg(38)\n+        assert tw_mock.lines[29] == \"\"\n+        assert tw_mock.lines[30] == \"    def f():\"\n+        assert tw_mock.lines[31] == \"        try:\"\n+        assert tw_mock.lines[32] == \"            g()\"\n+        assert tw_mock.lines[33] == \"        except Exception as e:\"\n+        assert tw_mock.lines[34] == \"            raise Err() from e\"\n+        assert tw_mock.lines[35] == \"        finally:\"\n+        assert tw_mock.lines[36] == \">           h()\"\n+        assert tw_mock.lines[37] == \"\"\n+        line = tw_mock.get_write_msg(38)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[39] == \":10: \"\n-        assert tw.lines[40] == (\"_ \", None)\n-        assert tw.lines[41] == \"\"\n-        assert tw.lines[42] == \"    def h():\"\n-        assert tw.lines[43] == \">       raise AttributeError()\"\n-        assert tw.lines[44] == \"E       AttributeError\"\n-        assert tw.lines[45] == \"\"\n-        line = tw.get_write_msg(46)\n+        assert tw_mock.lines[39] == \":10: \"\n+        assert tw_mock.lines[40] == (\"_ \", None)\n+        assert tw_mock.lines[41] == \"\"\n+        assert tw_mock.lines[42] == \"    def h():\"\n+        assert tw_mock.lines[43] == \">       raise AttributeError()\"\n+        assert tw_mock.lines[44] == \"E       AttributeError\"\n+        assert tw_mock.lines[45] == \"\"\n+        line = tw_mock.get_write_msg(46)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[47] == \":15: AttributeError\"\n+        assert tw_mock.lines[47] == \":15: AttributeError\"\n \n     @pytest.mark.parametrize(\"mode\", [\"from_none\", \"explicit_suppress\"])\n-    def test_exc_repr_chain_suppression(self, importasmod, mode):\n+    def test_exc_repr_chain_suppression(self, importasmod, mode, tw_mock):\n         \"\"\"Check that exc repr does not show chained exceptions in Python 3.\n         - When the exception is raised with \"from None\"\n         - Explicitly suppressed with \"chain=False\" to ExceptionInfo.getrepr().\n@@ -1226,24 +1190,23 @@ def g():\n         )\n         excinfo = pytest.raises(AttributeError, mod.f)\n         r = excinfo.getrepr(style=\"long\", chain=mode != \"explicit_suppress\")\n-        tw = TWMock()\n-        r.toterminal(tw)\n-        for line in tw.lines:\n+        r.toterminal(tw_mock)\n+        for line in tw_mock.lines:\n             print(line)\n-        assert tw.lines[0] == \"\"\n-        assert tw.lines[1] == \"    def f():\"\n-        assert tw.lines[2] == \"        try:\"\n-        assert tw.lines[3] == \"            g()\"\n-        assert tw.lines[4] == \"        except Exception:\"\n-        assert tw.lines[5] == \">           raise AttributeError(){}\".format(\n+        assert tw_mock.lines[0] == \"\"\n+        assert tw_mock.lines[1] == \"    def f():\"\n+        assert tw_mock.lines[2] == \"        try:\"\n+        assert tw_mock.lines[3] == \"            g()\"\n+        assert tw_mock.lines[4] == \"        except Exception:\"\n+        assert tw_mock.lines[5] == \">           raise AttributeError(){}\".format(\n             raise_suffix\n         )\n-        assert tw.lines[6] == \"E           AttributeError\"\n-        assert tw.lines[7] == \"\"\n-        line = tw.get_write_msg(8)\n+        assert tw_mock.lines[6] == \"E           AttributeError\"\n+        assert tw_mock.lines[7] == \"\"\n+        line = tw_mock.get_write_msg(8)\n         assert line.endswith(\"mod.py\")\n-        assert tw.lines[9] == \":6: AttributeError\"\n-        assert len(tw.lines) == 10\n+        assert tw_mock.lines[9] == \":6: AttributeError\"\n+        assert len(tw_mock.lines) == 10\n \n     @pytest.mark.parametrize(\n         \"reason, description\",\n@@ -1304,7 +1267,7 @@ def g():\n             ]\n         )\n \n-    def test_exc_chain_repr_cycle(self, importasmod):\n+    def test_exc_chain_repr_cycle(self, importasmod, tw_mock):\n         mod = importasmod(\n             \"\"\"\n             class Err(Exception):\n@@ -1325,9 +1288,8 @@ def unreraise():\n         )\n         excinfo = pytest.raises(ZeroDivisionError, mod.unreraise)\n         r = excinfo.getrepr(style=\"short\")\n-        tw = TWMock()\n-        r.toterminal(tw)\n-        out = \"\\n\".join(line for line in tw.lines if isinstance(line, str))\n+        r.toterminal(tw_mock)\n+        out = \"\\n\".join(line for line in tw_mock.lines if isinstance(line, str))\n         expected_out = textwrap.dedent(\n             \"\"\"\\\n             :13: in unreraise\ndiff --git a/testing/conftest.py b/testing/conftest.py\n--- a/testing/conftest.py\n+++ b/testing/conftest.py\n@@ -55,3 +55,36 @@ def pytest_collection_modifyitems(config, items):\n     items[:] = fast_items + neutral_items + slow_items + slowest_items\n \n     yield\n+\n+\n+@pytest.fixture\n+def tw_mock():\n+    \"\"\"Returns a mock terminal writer\"\"\"\n+\n+    class TWMock:\n+        WRITE = object()\n+\n+        def __init__(self):\n+            self.lines = []\n+            self.is_writing = False\n+\n+        def sep(self, sep, line=None):\n+            self.lines.append((sep, line))\n+\n+        def write(self, msg, **kw):\n+            self.lines.append((TWMock.WRITE, msg))\n+\n+        def line(self, line, **kw):\n+            self.lines.append(line)\n+\n+        def markup(self, text, **kw):\n+            return text\n+\n+        def get_write_msg(self, idx):\n+            flag, msg = self.lines[idx]\n+            assert flag == TWMock.WRITE\n+            return msg\n+\n+        fullwidth = 80\n+\n+    return TWMock()\ndiff --git a/testing/test_reports.py b/testing/test_reports.py\n--- a/testing/test_reports.py\n+++ b/testing/test_reports.py\n@@ -1,4 +1,5 @@\n import pytest\n+from _pytest._code.code import ExceptionChainRepr\n from _pytest.pathlib import Path\n from _pytest.reports import CollectReport\n from _pytest.reports import TestReport\n@@ -220,8 +221,8 @@ def test_a():\n         assert data[\"path1\"] == str(testdir.tmpdir)\n         assert data[\"path2\"] == str(testdir.tmpdir)\n \n-    def test_unserialization_failure(self, testdir):\n-        \"\"\"Check handling of failure during unserialization of report types.\"\"\"\n+    def test_deserialization_failure(self, testdir):\n+        \"\"\"Check handling of failure during deserialization of report types.\"\"\"\n         testdir.makepyfile(\n             \"\"\"\n             def test_a():\n@@ -242,6 +243,75 @@ def test_a():\n         ):\n             TestReport._from_json(data)\n \n+    @pytest.mark.parametrize(\"report_class\", [TestReport, CollectReport])\n+    def test_chained_exceptions(self, testdir, tw_mock, report_class):\n+        \"\"\"Check serialization/deserialization of report objects containing chained exceptions (#5786)\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            def foo():\n+                raise ValueError('value error')\n+            def test_a():\n+                try:\n+                    foo()\n+                except ValueError as e:\n+                    raise RuntimeError('runtime error') from e\n+            if {error_during_import}:\n+                test_a()\n+        \"\"\".format(\n+                error_during_import=report_class is CollectReport\n+            )\n+        )\n+\n+        reprec = testdir.inline_run()\n+        if report_class is TestReport:\n+            reports = reprec.getreports(\"pytest_runtest_logreport\")\n+            # we have 3 reports: setup/call/teardown\n+            assert len(reports) == 3\n+            # get the call report\n+            report = reports[1]\n+        else:\n+            assert report_class is CollectReport\n+            # two collection reports: session and test file\n+            reports = reprec.getreports(\"pytest_collectreport\")\n+            assert len(reports) == 2\n+            report = reports[1]\n+\n+        def check_longrepr(longrepr):\n+            \"\"\"Check the attributes of the given longrepr object according to the test file.\n+\n+            We can get away with testing both CollectReport and TestReport with this function because\n+            the longrepr objects are very similar.\n+            \"\"\"\n+            assert isinstance(longrepr, ExceptionChainRepr)\n+            assert longrepr.sections == [(\"title\", \"contents\", \"=\")]\n+            assert len(longrepr.chain) == 2\n+            entry1, entry2 = longrepr.chain\n+            tb1, fileloc1, desc1 = entry1\n+            tb2, fileloc2, desc2 = entry2\n+\n+            assert \"ValueError('value error')\" in str(tb1)\n+            assert \"RuntimeError('runtime error')\" in str(tb2)\n+\n+            assert (\n+                desc1\n+                == \"The above exception was the direct cause of the following exception:\"\n+            )\n+            assert desc2 is None\n+\n+        assert report.failed\n+        assert len(report.sections) == 0\n+        report.longrepr.addsection(\"title\", \"contents\", \"=\")\n+        check_longrepr(report.longrepr)\n+\n+        data = report._to_json()\n+        loaded_report = report_class._from_json(data)\n+        check_longrepr(loaded_report.longrepr)\n+\n+        # make sure we don't blow up on ``toterminal`` call; we don't test the actual output because it is very\n+        # brittle and hard to maintain, but we can assume it is correct because ``toterminal`` is already tested\n+        # elsewhere and we do check the contents of the longrepr object after loading it.\n+        loaded_report.longrepr.toterminal(tw_mock)\n+\n \n class TestHooks:\n     \"\"\"Test that the hooks are working correctly for plugins\"\"\"\n",
    "problem_statement": "La serializzazione delle eccezioni dovrebbe includere le eccezioni concatenate.\nConsiderati alcuni test semplici:\n```\ndef test_chained_exception_with_from():\n    try:\n        try:\n            raise ValueError(11)\n        except Exception as e1:\n            raise ValueError(12) from e1\n    except Exception as e2:\n        raise ValueError(13) from e2\n\n\ndef test_chained_exception_without_from():\n    try:\n        try:\n            raise ValueError(21)\n        except Exception:\n            raise ValueError(22)\n    except Exception:\n        raise ValueError(23)\n```\nquando eseguiti senza xdist, mostrano l'intero tracciato delle eccezioni in modo chiaro:\n```\n================ FAILURES ==========================\n__________________________ test_chained_exception_with_from _______________________\n\n    def test_chained_exception_with_from():\n        try:\n            try:\n>               raise ValueError(11)\nE               ValueError: 11\n\nbasic/test_basic.py:80: ValueError\n\nThe above exception was the direct cause of the following exception:\n\n    def test_chained_exception_with_from():\n        try:\n            try:\n                raise ValueError(11)\n            except Exception as e1:\n>               raise ValueError(12) from e1\nE               ValueError: 12\n\nbasic/test_basic.py:82: ValueError\n\nThe above exception was the direct cause of the following exception:\n\n    def test_chained_exception_with_from():\n        try:\n            try:\n                raise ValueError(11)\n            except Exception as e1:\n                raise ValueError(12) from e1\n        except Exception as e2:\n>           raise ValueError(13) from e2\nE           ValueError: 13\n\nbasic/test_basic.py:84: ValueError\n\n\n_____________________ test_chained_exception_without_from ____________________________\n\n    def test_chained_exception_without_from():\n        try:\n            try:\n>               raise ValueError(21)\nE               ValueError: 21\n\nbasic/test_basic.py:90: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_chained_exception_without_from():\n        try:\n            try:\n                raise ValueError(21)\n            except Exception:\n>               raise ValueError(22)\nE               ValueError: 22\n\nbasic/test_basic.py:92: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_chained_exception_without_from():\n        try:\n            try:\n                raise ValueError(21)\n            except Exception:\n                raise ValueError(22)\n        except Exception:\n>           raise ValueError(23)\nE           ValueError: 23\n\nbasic/test_basic.py:94: ValueError\n\n```\n\nma quando eseguiti con xdist (`-n auto`), mostrano solo l'ultima eccezione:\n```\n============ FAILURES ================\n_____________ test_chained_exception_with_from _______________________________\n[gw0] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\n\n    def test_chained_exception_with_from():\n        try:\n            try:\n                raise ValueError(11)\n            except Exception as e1:\n                raise ValueError(12) from e1\n        except Exception as e2:\n>           raise ValueError(13) from e2\nE           ValueError: 13\n\nbasic/test_basic.py:84: ValueError\n\n____________ test_chained_exception_without_from ____________\n[gw1] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\n\n    def test_chained_exception_without_from():\n        try:\n            try:\n                raise ValueError(21)\n            except Exception:\n                raise ValueError(22)\n        except Exception:\n>           raise ValueError(23)\nE           ValueError: 23\n\nbasic/test_basic.py:94: ValueError\n\n```\n\nla mia configurazione:\n```\npytest           4.0.2       \npytest-xdist     1.25.0\n```",
    "hints_text": "attualmente la serializzazione delle eccezioni può essere descritta come limitata e semplicistica,\nquesto è il problema principale lì",
    "created_at": "2019-08-26T16:43:31Z",
    "version": "5.1",
    "FAIL_TO_PASS": "[\"testing/test_reports.py::TestReportSerialization::test_chained_exceptions[TestReport]\", \"testing/test_reports.py::TestReportSerialization::test_chained_exceptions[CollectReport]\"]",
    "PASS_TO_PASS": "[\"testing/code/test_code.py::test_ne\", \"testing/code/test_code.py::test_code_gives_back_name_for_not_existing_file\", \"testing/code/test_code.py::test_code_with_class\", \"testing/code/test_code.py::test_code_fullsource\", \"testing/code/test_code.py::test_code_source\", \"testing/code/test_code.py::test_frame_getsourcelineno_myself\", \"testing/code/test_code.py::test_getstatement_empty_fullsource\", \"testing/code/test_code.py::test_code_from_func\", \"testing/code/test_code.py::test_unicode_handling\", \"testing/code/test_code.py::test_code_getargs\", \"testing/code/test_code.py::test_frame_getargs\", \"testing/code/test_code.py::TestExceptionInfo::test_bad_getsource\", \"testing/code/test_code.py::TestExceptionInfo::test_from_current_with_missing\", \"testing/code/test_code.py::TestTracebackEntry::test_getsource\", \"testing/code/test_code.py::TestReprFuncArgs::test_not_raise_exception_with_mixed_encoding\", \"testing/code/test_excinfo.py::test_excinfo_simple\", \"testing/code/test_excinfo.py::test_excinfo_from_exc_info_simple\", \"testing/code/test_excinfo.py::test_excinfo_getstatement\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entries\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource_in_construct\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-True]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-False]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide2-True]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide3-False]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_recursion_index\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_only_specific_recursion_errors\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_no_recursion_index\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry_empty\", \"testing/code/test_excinfo.py::test_excinfo_exconly\", \"testing/code/test_excinfo.py::test_excinfo_repr_str\", \"testing/code/test_excinfo.py::test_excinfo_for_later\", \"testing/code/test_excinfo.py::test_excinfo_errisinstance\", \"testing/code/test_excinfo.py::test_excinfo_no_sourcecode\", \"testing/code/test_excinfo.py::test_entrysource_Queue_example\", \"testing/code/test_excinfo.py::test_codepath_Queue_example\", \"testing/code/test_excinfo.py::test_match_succeeds\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_excinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_not_existing\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_many_line_source_not_existing\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_failing_fullsource\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_error\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_exception_in_class_property\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_truncated\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines2\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines_var_kw_args\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_short\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_no\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_tbfilter\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_short_no_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_and_excinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_with_invalid_cwd\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_addouterr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_reprcrash\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_recursion\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_getrepr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_unicode\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_missing_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_incomplete_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_filenames\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions0]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions1]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions2]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions3]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions4]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions5]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions6]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions7]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions8]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions9]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions10]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions11]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions12]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions13]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions14]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions15]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions16]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions17]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions18]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions19]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions20]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions21]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions22]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions23]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_repr_style\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[from_none]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[explicit_suppress]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[cause-The\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[context-During\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_cycle\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-long]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-long]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-long]\", \"testing/code/test_excinfo.py::test_exception_repr_extraction_error_on_recursion\", \"testing/code/test_excinfo.py::test_no_recursion_index_on_recursion_error\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut_excludepath\", \"testing/code/test_excinfo.py::test_match_raises_error\", \"testing/code/test_excinfo.py::test_cwd_deleted\", \"testing/test_reports.py::TestReportSerialization::test_xdist_longrepr_to_str_issue_241\", \"testing/test_reports.py::TestReportSerialization::test_xdist_report_longrepr_reprcrash_130\", \"testing/test_reports.py::TestReportSerialization::test_reprentries_serialization_170\", \"testing/test_reports.py::TestReportSerialization::test_reprentries_serialization_196\", \"testing/test_reports.py::TestReportSerialization::test_itemreport_outcomes\", \"testing/test_reports.py::TestReportSerialization::test_collectreport_passed\", \"testing/test_reports.py::TestReportSerialization::test_collectreport_fail\", \"testing/test_reports.py::TestReportSerialization::test_extended_report_deserialization\", \"testing/test_reports.py::TestReportSerialization::test_paths_support\", \"testing/test_reports.py::TestReportSerialization::test_deserialization_failure\", \"testing/test_reports.py::TestHooks::test_test_report\", \"testing/test_reports.py::TestHooks::test_collect_report\", \"testing/test_reports.py::TestHooks::test_invalid_report_types[pytest_runtest_logreport]\", \"testing/test_reports.py::TestHooks::test_invalid_report_types[pytest_collectreport]\"]",
    "environment_setup_commit": "c1361b48f83911aa721b21a4515a5446515642e2",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "pytest-dev/pytest",
    "instance_id": "pytest-dev__pytest-6197",
    "base_commit": "e856638ba086fcf5bebf1bebea32d5cf78de87b4",
    "patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -251,21 +251,18 @@ class PyobjMixin(PyobjContext):\n     @property\n     def obj(self):\n         \"\"\"Underlying Python object.\"\"\"\n-        self._mount_obj_if_needed()\n-        return self._obj\n-\n-    @obj.setter\n-    def obj(self, value):\n-        self._obj = value\n-\n-    def _mount_obj_if_needed(self):\n         obj = getattr(self, \"_obj\", None)\n         if obj is None:\n             self._obj = obj = self._getobj()\n             # XXX evil hack\n             # used to avoid Instance collector marker duplication\n             if self._ALLOW_MARKERS:\n-                self.own_markers.extend(get_unpacked_marks(obj))\n+                self.own_markers.extend(get_unpacked_marks(self.obj))\n+        return obj\n+\n+    @obj.setter\n+    def obj(self, value):\n+        self._obj = value\n \n     def _getobj(self):\n         \"\"\"Gets the underlying Python object. May be overwritten by subclasses.\"\"\"\n@@ -432,14 +429,6 @@ def _genfunctions(self, name, funcobj):\n class Module(nodes.File, PyCollector):\n     \"\"\" Collector for test classes and functions. \"\"\"\n \n-    def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):\n-        if fspath.basename == \"__init__.py\":\n-            self._ALLOW_MARKERS = False\n-\n-        nodes.FSCollector.__init__(\n-            self, fspath, parent=parent, config=config, session=session, nodeid=nodeid\n-        )\n-\n     def _getobj(self):\n         return self._importtestmodule()\n \n@@ -639,7 +628,6 @@ def isinitpath(self, path):\n         return path in self.session._initialpaths\n \n     def collect(self):\n-        self._mount_obj_if_needed()\n         this_path = self.fspath.dirpath()\n         init_module = this_path.join(\"__init__.py\")\n         if init_module.check(file=1) and path_matches_patterns(\n",
    "test_patch": "diff --git a/testing/test_collection.py b/testing/test_collection.py\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1257,3 +1257,24 @@ def test_collector_respects_tbstyle(testdir):\n             \"*= 1 error in *\",\n         ]\n     )\n+\n+\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\"\n+        \"def test():\\n\"\n+        \"    with pytest.raises(ImportError):\\n\"\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\ndiff --git a/testing/test_skipping.py b/testing/test_skipping.py\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1162,26 +1162,3 @@ def test_importorskip():\n         match=\"^could not import 'doesnotexist': No module named .*\",\n     ):\n         pytest.importorskip(\"doesnotexist\")\n-\n-\n-def test_skip_package(testdir):\n-    testdir.makepyfile(\n-        __init__=\"\"\"\n-        import pytest\n-        pytestmark = pytest.mark.skip\n-    \"\"\"\n-    )\n-\n-    testdir.makepyfile(\n-        \"\"\"\n-        import pytest\n-        def test_skip1():\n-            assert 0\n-        def test_skip2():\n-            assert 0\n-    \"\"\"\n-    )\n-\n-    result = testdir.inline_run()\n-    _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n",
    "problem_statement": "Regressione in 5.2.3: pytest tenta di raccogliere file __init__.py arbitrari\nQuesto è stato rilevato dal nostro server di build questa mattina. Sembra che pytest 5.2.3 tenti di importare qualsiasi file `__init__.py` presente nella directory corrente. (Abbiamo un pacchetto che viene utilizzato solo su Windows e non può essere importato su Linux.)\n\nEcco un esempio minimo che riproduce il problema utilizzando tox (sto eseguendo su Debian 10 con Python 3.7.3):\n```sh\n❯❯❯ mkdir foobar\n❯❯❯ echo 'assert False' >! foobar/__init__.py\n❯❯❯ cat > tox.ini <<EOF\n[tox]\nenvlist = py37-pytest{522,523}\nskipsdist = true\n\n[testenv]\ndeps =\n    pytest522: pytest==5.2.2\n    pytest523: pytest==5.2.3\ncommands = pytest\nEOF\n❯❯❯ tox\npy37-pytest522 installed: atomicwrites==1.3.0,attrs==19.3.0,importlib-metadata==0.23,more-itertools==7.2.0,packaging==19.2,pkg-resources==0.0.0,pluggy==0.13.0,py==1.8.0,pyparsing==2.4.5,pytest==5.2.2,six==1.13.0,wcwidth==0.1.7,zipp==0.6.0\npy37-pytest522 run-test-pre: PYTHONHASHSEED='2092702735'\npy37-pytest522 runtests: commands[0] | pytest\n============================= test session starts ==============================\nplatform linux -- Python 3.7.3, pytest-5.2.2, py-1.8.0, pluggy-0.13.0\ncachedir: .tox/py37-pytest522/.pytest_cache\nrootdir: /tmp/gregoire/tmp.Fm6yiwvARV\ncollected 1 item\n\ntest_foo.py .                                                            [100%]\n\n============================== 1 passed in 0.01s ===============================\npy37-pytest523 installed: atomicwrites==1.3.0,attrs==19.3.0,importlib-metadata==0.23,more-itertools==7.2.0,packaging==19.2,pkg-resources==0.0.0,pluggy==0.13.0,py==1.8.0,pyparsing==2.4.5,pytest==5.2.3,six==1.13.0,wcwidth==0.1.7,zipp==0.6.0\npy37-pytest523 run-test-pre: PYTHONHASHSEED='2092702735'\npy37-pytest523 runtests: commands[0] | pytest\n============================= test session starts ==============================\nplatform linux -- Python 3.7.3, pytest-5.2.3, py-1.8.0, pluggy-0.13.0\ncachedir: .tox/py37-pytest523/.pytest_cache\nrootdir: /tmp/gregoire/tmp.Fm6yiwvARV\ncollected 1 item / 1 errors\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting foobar/__init__.py ______________________\nfoobar/__init__.py:1: in <module>\n    assert False\nE   AssertionError\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.04s ===============================\nERROR: InvocationError for command '/tmp/gregoire/tmp.Fm6yiwvARV/.tox/py37-pytest523/bin/pytest' (exited with code 2)\n___________________________________ summary ____________________________________\n  py37-pytest522: commands succeeded\nERROR:   py37-pytest523: commands failed\n```",
    "hints_text": "Anche io ho avuto lo stesso problema. Sospetto che #5831 possa essere il colpevole, ma non ho ancora eseguito il bisect.\nBitten, anche io.. \nL'importazione dei file `__init__.py` all'inizio di un progetto Django aggira le impostazioni, interferendo con qualsiasi ottimizzazione che deve avvenire prima che i modelli Django vengano istanziati.\n\nSì, ho eseguito il bisect e ho scoperto che #5831 è il colpevole quando si indaga sulla rottura in `flake8` quando si tenta di passare a `pytest==5.2.3`.\n\nhttps://gitlab.com/pycqa/flake8/issues/594\n\nIndipendentemente, devo seguire con `entrypoints` sul suo comportamento previsto.\nGrazie per la segnalazione, cercherò di risolvere o annullare la modifica quando sarò vicino a un computer e di fare un rilascio per risolvere questo problema (poiché mi aspetto che colpisca molte persone)\nQuesto può anche causare la mancanza di dati di copertura per i pacchetti con layout `src` (vedi #6196)",
    "created_at": "2019-11-15T16:37:22Z",
    "version": "5.2",
    "FAIL_TO_PASS": "[\"testing/test_collection.py::test_does_not_eagerly_collect_packages\", \"testing/test_collection.py::test_does_not_put_src_on_path\"]",
    "PASS_TO_PASS": "[\"testing/test_collection.py::TestCollector::test_collect_versus_item\", \"testing/test_skipping.py::test_importorskip\", \"testing/test_collection.py::TestCollector::test_check_equality\", \"testing/test_collection.py::TestCollector::test_getparent\", \"testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip\", \"testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr\", \"testing/test_collection.py::TestCollectFS::test_ignored_certain_directories\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_custom_norecursedirs\", \"testing/test_collection.py::TestCollectFS::test_testpaths_ini\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_directory\", \"testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_path\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument\", \"testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen\", \"testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir\", \"testing/test_collection.py::TestSession::test_parsearg\", \"testing/test_collection.py::TestSession::test_collect_topdir\", \"testing/test_collection.py::TestSession::test_collect_protocol_single_function\", \"testing/test_collection.py::TestSession::test_collect_protocol_method\", \"testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id\", \"testing/test_collection.py::TestSession::test_collect_subdir_event_ordering\", \"testing/test_collection.py::TestSession::test_collect_two_commandline_args\", \"testing/test_collection.py::TestSession::test_serialization_byid\", \"testing/test_collection.py::TestSession::test_find_byid_without_instance_parents\", \"testing/test_collection.py::Test_getinitialnodes::test_global_file\", \"testing/test_collection.py::Test_getinitialnodes::test_pkgfile\", \"testing/test_collection.py::Test_genitems::test_check_collect_hashes\", \"testing/test_collection.py::Test_genitems::test_example_items1\", \"testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob\", \"testing/test_collection.py::test_matchnodes_two_collections_same_file\", \"testing/test_collection.py::TestNodekeywords::test_no_under\", \"testing/test_collection.py::TestNodekeywords::test_issue345\", \"testing/test_collection.py::test_exit_on_collection_error\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors\", \"testing/test_collection.py::test_continue_on_collection_errors\", \"testing/test_collection.py::test_continue_on_collection_errors_maxfail\", \"testing/test_collection.py::test_fixture_scope_sibling_conftests\", \"testing/test_collection.py::test_collect_init_tests\", \"testing/test_collection.py::test_collect_invalid_signature_message\", \"testing/test_collection.py::test_collect_handles_raising_on_dunder_class\", \"testing/test_collection.py::test_collect_with_chdir_during_import\", \"testing/test_collection.py::test_collect_pyargs_with_testpaths\", \"testing/test_collection.py::test_collect_symlink_file_arg\", \"testing/test_collection.py::test_collect_symlink_out_of_tree\", \"testing/test_collection.py::test_collectignore_via_conftest\", \"testing/test_collection.py::test_collect_pkg_init_and_file_in_args\", \"testing/test_collection.py::test_collect_pkg_init_only\", \"testing/test_collection.py::test_collect_sub_with_symlinks[True]\", \"testing/test_collection.py::test_collect_sub_with_symlinks[False]\", \"testing/test_collection.py::test_collector_respects_tbstyle\", \"testing/test_skipping.py::TestEvaluator::test_no_marker\", \"testing/test_skipping.py::TestEvaluator::test_marked_no_args\", \"testing/test_skipping.py::TestEvaluator::test_marked_one_arg\", \"testing/test_skipping.py::TestEvaluator::test_marked_one_arg_with_reason\", \"testing/test_skipping.py::TestEvaluator::test_marked_one_arg_twice\", \"testing/test_skipping.py::TestEvaluator::test_marked_one_arg_twice2\", \"testing/test_skipping.py::TestEvaluator::test_marked_skip_with_not_string\", \"testing/test_skipping.py::TestEvaluator::test_skipif_class\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed\", \"testing/test_skipping.py::TestXFail::test_xfail_using_platform\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict\", \"testing/test_skipping.py::TestXFail::test_xfail_run_anyway\", \"testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails\", \"testing/test_skipping.py::TestXFail::test_xfail_not_report_default\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run\", \"testing/test_skipping.py::TestXFail::test_xfail_xpass\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1\", \"testing/test_skipping.py::TestXFail::test_strict_sanity\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9\", \"testing/test_skipping.py::TestSkip::test_skip_class\", \"testing/test_skipping.py::TestSkip::test_skips_on_false_string\", \"testing/test_skipping.py::TestSkip::test_arg_as_reason\", \"testing/test_skipping.py::TestSkip::test_skip_no_reason\", \"testing/test_skipping.py::TestSkip::test_skip_with_reason\", \"testing/test_skipping.py::TestSkip::test_only_skips_marked_test\", \"testing/test_skipping.py::TestSkip::test_strict_and_skip\", \"testing/test_skipping.py::TestSkipif::test_skipif_conditional\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[\\\"hasattr(sys,\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,\", \"testing/test_skipping.py::TestSkipif::test_skipif_using_platform\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]\", \"testing/test_skipping.py::test_skip_not_report_default\", \"testing/test_skipping.py::test_skipif_class\", \"testing/test_skipping.py::test_skipped_reasons_functional\", \"testing/test_skipping.py::test_skipped_folding\", \"testing/test_skipping.py::test_reportchars\", \"testing/test_skipping.py::test_reportchars_error\", \"testing/test_skipping.py::test_reportchars_all\", \"testing/test_skipping.py::test_reportchars_all_error\", \"testing/test_skipping.py::test_errors_in_xfail_skip_expressions\", \"testing/test_skipping.py::test_xfail_skipif_with_globals\", \"testing/test_skipping.py::test_direct_gives_error\", \"testing/test_skipping.py::test_default_markers\", \"testing/test_skipping.py::test_xfail_test_setup_exception\", \"testing/test_skipping.py::test_imperativeskip_on_xfail_test\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason\", \"testing/test_skipping.py::TestBooleanCondition::test_xfail\", \"testing/test_skipping.py::test_xfail_item\", \"testing/test_skipping.py::test_module_level_skip_error\", \"testing/test_skipping.py::test_module_level_skip_with_allow_module_level\", \"testing/test_skipping.py::test_invalid_skip_keyword_parameter\", \"testing/test_skipping.py::test_mark_xfail_item\", \"testing/test_skipping.py::test_summary_list_after_errors\"]",
    "environment_setup_commit": "f36ea240fe3579f945bf5d6cc41b5e45a572249d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11885",
    "base_commit": "04ac9b45a34440fa447feb6ae934687aacbfc5f4",
    "patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -182,9 +182,9 @@ def collect(self, objs, source=None, source_attr=None, **kwargs):\n         except models.ProtectedError as e:\n             self.protected.update(e.protected_objects)\n \n-    def related_objects(self, related, objs):\n-        qs = super().related_objects(related, objs)\n-        return qs.select_related(related.field.name)\n+    def related_objects(self, related_model, related_fields, objs):\n+        qs = super().related_objects(related_model, related_fields, objs)\n+        return qs.select_related(*[related_field.name for related_field in related_fields])\n \n     def _nested(self, obj, seen, format_callback):\n         if obj in seen:\ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -1,9 +1,11 @@\n-from collections import Counter\n+import operator\n+from collections import Counter, defaultdict\n+from functools import partial, reduce\n from itertools import chain\n from operator import attrgetter\n \n from django.db import IntegrityError, connections, transaction\n-from django.db.models import signals, sql\n+from django.db.models import query_utils, signals, sql\n \n \n class ProtectedError(IntegrityError):\n@@ -65,8 +67,9 @@ class Collector:\n     def __init__(self, using):\n         self.using = using\n         # Initially, {model: {instances}}, later values become lists.\n-        self.data = {}\n-        self.field_updates = {}  # {model: {(field, value): {instances}}}\n+        self.data = defaultdict(set)\n+        # {model: {(field, value): {instances}}}\n+        self.field_updates = defaultdict(partial(defaultdict, set))\n         # fast_deletes is a list of queryset-likes that can be deleted without\n         # fetching the objects into memory.\n         self.fast_deletes = []\n@@ -76,7 +79,7 @@ def __init__(self, using):\n         # should be included, as the dependencies exist only between actual\n         # database tables; proxy models are represented here by their concrete\n         # parent.\n-        self.dependencies = {}  # {model: {models}}\n+        self.dependencies = defaultdict(set)  # {model: {models}}\n \n     def add(self, objs, source=None, nullable=False, reverse_dependency=False):\n         \"\"\"\n@@ -90,7 +93,7 @@ def add(self, objs, source=None, nullable=False, reverse_dependency=False):\n             return []\n         new_objs = []\n         model = objs[0].__class__\n-        instances = self.data.setdefault(model, set())\n+        instances = self.data[model]\n         for obj in objs:\n             if obj not in instances:\n                 new_objs.append(obj)\n@@ -101,8 +104,7 @@ def add(self, objs, source=None, nullable=False, reverse_dependency=False):\n         if source is not None and not nullable:\n             if reverse_dependency:\n                 source, model = model, source\n-            self.dependencies.setdefault(\n-                source._meta.concrete_model, set()).add(model._meta.concrete_model)\n+            self.dependencies[source._meta.concrete_model].add(model._meta.concrete_model)\n         return new_objs\n \n     def add_field_update(self, field, value, objs):\n@@ -113,9 +115,7 @@ def add_field_update(self, field, value, objs):\n         if not objs:\n             return\n         model = objs[0].__class__\n-        self.field_updates.setdefault(\n-            model, {}).setdefault(\n-            (field, value), set()).update(objs)\n+        self.field_updates[model][field, value].update(objs)\n \n     def _has_signal_listeners(self, model):\n         return (\n@@ -137,7 +137,7 @@ def can_fast_delete(self, objs, from_field=None):\n         if from_field and from_field.remote_field.on_delete is not CASCADE:\n             return False\n         if hasattr(objs, '_meta'):\n-            model = type(objs)\n+            model = objs._meta.model\n         elif hasattr(objs, 'model') and hasattr(objs, '_raw_delete'):\n             model = objs.model\n         else:\n@@ -159,12 +159,13 @@ def can_fast_delete(self, objs, from_field=None):\n             )\n         )\n \n-    def get_del_batches(self, objs, field):\n+    def get_del_batches(self, objs, fields):\n         \"\"\"\n         Return the objs in suitably sized batches for the used connection.\n         \"\"\"\n+        field_names = [field.name for field in fields]\n         conn_batch_size = max(\n-            connections[self.using].ops.bulk_batch_size([field.name], objs), 1)\n+            connections[self.using].ops.bulk_batch_size(field_names, objs), 1)\n         if len(objs) > conn_batch_size:\n             return [objs[i:i + conn_batch_size]\n                     for i in range(0, len(objs), conn_batch_size)]\n@@ -211,51 +212,60 @@ def collect(self, objs, source=None, nullable=False, collect_related=True,\n                                  source_attr=ptr.remote_field.related_name,\n                                  collect_related=False,\n                                  reverse_dependency=True)\n-        if collect_related:\n-            if keep_parents:\n-                parents = set(model._meta.get_parent_list())\n-            for related in get_candidate_relations_to_delete(model._meta):\n-                # Preserve parent reverse relationships if keep_parents=True.\n-                if keep_parents and related.model in parents:\n-                    continue\n-                field = related.field\n-                if field.remote_field.on_delete == DO_NOTHING:\n-                    continue\n-                batches = self.get_del_batches(new_objs, field)\n-                for batch in batches:\n-                    sub_objs = self.related_objects(related, batch)\n-                    if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n-                    else:\n-                        related_model = related.related_model\n-                        # Non-referenced fields can be deferred if no signal\n-                        # receivers are connected for the related model as\n-                        # they'll never be exposed to the user. Skip field\n-                        # deferring when some relationships are select_related\n-                        # as interactions between both features are hard to\n-                        # get right. This should only happen in the rare\n-                        # cases where .related_objects is overridden anyway.\n-                        if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n-                            referenced_fields = set(chain.from_iterable(\n-                                (rf.attname for rf in rel.field.foreign_related_fields)\n-                                for rel in get_candidate_relations_to_delete(related_model._meta)\n-                            ))\n-                            sub_objs = sub_objs.only(*tuple(referenced_fields))\n-                        if sub_objs:\n-                            field.remote_field.on_delete(self, field, sub_objs, self.using)\n-            for field in model._meta.private_fields:\n-                if hasattr(field, 'bulk_related_objects'):\n-                    # It's something like generic foreign key.\n-                    sub_objs = field.bulk_related_objects(new_objs, self.using)\n-                    self.collect(sub_objs, source=model, nullable=True)\n-\n-    def related_objects(self, related, objs):\n+        if not collect_related:\n+            return\n+\n+        if keep_parents:\n+            parents = set(model._meta.get_parent_list())\n+        model_fast_deletes = defaultdict(list)\n+        for related in get_candidate_relations_to_delete(model._meta):\n+            # Preserve parent reverse relationships if keep_parents=True.\n+            if keep_parents and related.model in parents:\n+                continue\n+            field = related.field\n+            if field.remote_field.on_delete == DO_NOTHING:\n+                continue\n+            related_model = related.related_model\n+            if self.can_fast_delete(related_model, from_field=field):\n+                model_fast_deletes[related_model].append(field)\n+                continue\n+            batches = self.get_del_batches(new_objs, [field])\n+            for batch in batches:\n+                sub_objs = self.related_objects(related_model, [field], batch)\n+                # Non-referenced fields can be deferred if no signal receivers\n+                # are connected for the related model as they'll never be\n+                # exposed to the user. Skip field deferring when some\n+                # relationships are select_related as interactions between both\n+                # features are hard to get right. This should only happen in\n+                # the rare cases where .related_objects is overridden anyway.\n+                if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n+                    referenced_fields = set(chain.from_iterable(\n+                        (rf.attname for rf in rel.field.foreign_related_fields)\n+                        for rel in get_candidate_relations_to_delete(related_model._meta)\n+                    ))\n+                    sub_objs = sub_objs.only(*tuple(referenced_fields))\n+                if sub_objs:\n+                    field.remote_field.on_delete(self, field, sub_objs, self.using)\n+        for related_model, related_fields in model_fast_deletes.items():\n+            batches = self.get_del_batches(new_objs, related_fields)\n+            for batch in batches:\n+                sub_objs = self.related_objects(related_model, related_fields, batch)\n+                self.fast_deletes.append(sub_objs)\n+        for field in model._meta.private_fields:\n+            if hasattr(field, 'bulk_related_objects'):\n+                # It's something like generic foreign key.\n+                sub_objs = field.bulk_related_objects(new_objs, self.using)\n+                self.collect(sub_objs, source=model, nullable=True)\n+\n+    def related_objects(self, related_model, related_fields, objs):\n         \"\"\"\n-        Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Get a QuerySet of the related model to objs via related fields.\n         \"\"\"\n-        return related.related_model._base_manager.using(self.using).filter(\n-            **{\"%s__in\" % related.field.name: objs}\n-        )\n+        predicate = reduce(operator.or_, (\n+            query_utils.Q(**{'%s__in' % related_field.name: objs})\n+            for related_field in related_fields\n+        ))\n+        return related_model._base_manager.using(self.using).filter(predicate)\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n",
    "test_patch": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -582,3 +582,11 @@ def test_fast_delete_empty_no_update_can_self_select(self):\n                 User.objects.filter(avatar__desc='missing').delete(),\n                 (0, {'delete.User': 0})\n             )\n+\n+    def test_fast_delete_combined_relationships(self):\n+        # The cascading fast-delete of SecondReferrer should be combined\n+        # in a single DELETE WHERE referrer_id OR unique_field.\n+        origin = Origin.objects.create()\n+        referer = Referrer.objects.create(origin=origin, unique_field=42)\n+        with self.assertNumQueries(2):\n+            referer.delete()\n",
    "problem_statement": "Combina le query di eliminazione veloce\nDescrizione\n\nQuando si emula ON DELETE CASCADE tramite on_delete=models.CASCADE, il deletion.Collector cercherà di eseguire query veloci del tipo DELETE FROM table WHERE table.pk IN .... Ci sono alcune condizioni necessarie perché questo percorso veloce venga seguito, ma quando ciò accade, la logica di raccolta dovrebbe combinare tali query per tabella per ridurre il numero di roundtrip al database.\nAd esempio, dati i seguenti modelli:\n```python\nclass Person(models.Model):\n    friends = models.ManyToManyField('self')\n\nclass User(models.Model):\n    pass\n\nclass Entry(models.Model):\n    created_by = models.ForeignKey(User)\n    updated_by = models.ForeignKey(User)\n```\nEseguire `person.delete()` o `user.delete()` risulterà in 6 query del tipo:\n```sql\nDELETE FROM person_friends WHERE from_id = :id\nDELETE FROM person_friends WHERE to_id = :id\nDELETE FROM person WHERE id = :id\nDELETE FROM entry WHERE created_by_id = :id\nDELETE FROM entry WHERE updated_by = :id\nDELETE FROM user WHERE id = :id\n```\nMa entrambe le query (o N query a seconda del numero di relazioni esterne) possono essere combinate in una sola utilizzando OR:\n```sql\nDELETE FROM person_friends WHERE from_id = :id OR to_id = :id\nDELETE FROM person WHERE id = :id\nDELETE FROM entry WHERE created_by_id = :id OR updated_by = :id\nDELETE FROM user WHERE id = :id\n```",
    "hints_text": null,
    "created_at": "2019-10-08T15:22:07Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"test_fast_delete_combined_relationships (delete.tests.FastDeleteTests)\"]",
    "PASS_TO_PASS": "[\"test_fast_delete_empty_no_update_can_self_select (delete.tests.FastDeleteTests)\", \"test_fast_delete_fk (delete.tests.FastDeleteTests)\", \"test_fast_delete_inheritance (delete.tests.FastDeleteTests)\", \"test_fast_delete_instance_set_pk_none (delete.tests.FastDeleteTests)\", \"test_fast_delete_joined_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_large_batch (delete.tests.FastDeleteTests)\", \"test_fast_delete_m2m (delete.tests.FastDeleteTests)\", \"test_fast_delete_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_revm2m (delete.tests.FastDeleteTests)\", \"test_auto (delete.tests.OnDeleteTests)\", \"test_auto_nullable (delete.tests.OnDeleteTests)\", \"test_cascade (delete.tests.OnDeleteTests)\", \"test_cascade_from_child (delete.tests.OnDeleteTests)\", \"test_cascade_from_parent (delete.tests.OnDeleteTests)\", \"test_cascade_nullable (delete.tests.OnDeleteTests)\", \"test_do_nothing (delete.tests.OnDeleteTests)\", \"test_do_nothing_qscount (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_down (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_up (delete.tests.OnDeleteTests)\", \"test_non_callable (delete.tests.OnDeleteTests)\", \"test_o2o_setnull (delete.tests.OnDeleteTests)\", \"test_protect (delete.tests.OnDeleteTests)\", \"test_setdefault (delete.tests.OnDeleteTests)\", \"test_setdefault_none (delete.tests.OnDeleteTests)\", \"test_setnull (delete.tests.OnDeleteTests)\", \"test_setnull_from_child (delete.tests.OnDeleteTests)\", \"test_setnull_from_parent (delete.tests.OnDeleteTests)\", \"test_setvalue (delete.tests.OnDeleteTests)\", \"test_bulk (delete.tests.DeletionTests)\", \"test_can_defer_constraint_checks (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents_relationships (delete.tests.DeletionTests)\", \"test_deletion_order (delete.tests.DeletionTests)\", \"test_hidden_related (delete.tests.DeletionTests)\", \"test_instance_update (delete.tests.DeletionTests)\", \"test_large_delete (delete.tests.DeletionTests)\", \"test_large_delete_related (delete.tests.DeletionTests)\", \"test_m2m (delete.tests.DeletionTests)\", \"test_model_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_only_referenced_fields_selected (delete.tests.DeletionTests)\", \"test_proxied_model_duplicate_queries (delete.tests.DeletionTests)\", \"test_queryset_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_relational_post_delete_signals_happen_before_parent_object (delete.tests.DeletionTests)\"]",
    "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "pylint-dev/pylint",
    "instance_id": "pylint-dev__pylint-8898",
    "base_commit": "1f8c4d9eb185c16a2c1d881c054f015e1c2eb334",
    "patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,7 +114,7 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in pylint_utils._check_regexp_csv(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \ndiff --git a/pylint/utils/__init__.py b/pylint/utils/__init__.py\n--- a/pylint/utils/__init__.py\n+++ b/pylint/utils/__init__.py\n@@ -14,6 +14,7 @@\n     HAS_ISORT_5,\n     IsortDriver,\n     _check_csv,\n+    _check_regexp_csv,\n     _splitstrip,\n     _unquote,\n     decoding_stream,\n@@ -32,6 +33,7 @@\n     \"HAS_ISORT_5\",\n     \"IsortDriver\",\n     \"_check_csv\",\n+    \"_check_regexp_csv\",\n     \"_splitstrip\",\n     \"_unquote\",\n     \"decoding_stream\",\ndiff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -22,7 +22,8 @@\n import textwrap\n import tokenize\n import warnings\n-from collections.abc import Sequence\n+from collections import deque\n+from collections.abc import Iterable, Sequence\n from io import BufferedReader, BytesIO\n from typing import (\n     TYPE_CHECKING,\n@@ -253,6 +254,31 @@ def _check_csv(value: list[str] | tuple[str] | str) -> Sequence[str]:\n     return _splitstrip(value)\n \n \n+def _check_regexp_csv(value: list[str] | tuple[str] | str) -> Iterable[str]:\n+    r\"\"\"Split a comma-separated list of regexps, taking care to avoid splitting\n+    a regex employing a comma as quantifier, as in `\\d{1,2}`.\"\"\"\n+    if isinstance(value, (list, tuple)):\n+        yield from value\n+    else:\n+        # None is a sentinel value here\n+        regexps: deque[deque[str] | None] = deque([None])\n+        open_braces = False\n+        for char in value:\n+            if char == \"{\":\n+                open_braces = True\n+            elif char == \"}\" and open_braces:\n+                open_braces = False\n+\n+            if char == \",\" and not open_braces:\n+                regexps.append(None)\n+            elif regexps[-1] is None:\n+                regexps.pop()\n+                regexps.append(deque([char]))\n+            else:\n+                regexps[-1].append(char)\n+        yield from (\"\".join(regexp).strip() for regexp in regexps if regexp is not None)\n+\n+\n def _comment(string: str) -> str:\n     \"\"\"Return string as a comment.\"\"\"\n     lines = [line.strip() for line in string.splitlines()]\n",
    "test_patch": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -5,8 +5,10 @@\n from __future__ import annotations\n \n import os\n+import re\n from pathlib import Path\n from tempfile import TemporaryDirectory\n+from typing import Any\n \n import pytest\n from pytest import CaptureFixture\n@@ -115,6 +117,31 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+\n def test_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n     with pytest.raises(SystemExit):\n@@ -137,12 +164,12 @@ def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"\n     with pytest.raises(SystemExit):\n         Run(\n-            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,3})\"],\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,}, foo{1,3}})\"],\n             exit=False,\n         )\n     output = capsys.readouterr()\n     assert (\n-        r\"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern\"\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n         in output.err\n     )\n \n",
    "problem_statement": "bad-names-rgxs rovina le espressioni regolari con virgole\n### Descrizione del bug\n\nPoiché pylint divide in base alle virgole in questa opzione, invece di prendere una lista di stringhe, se ci sono virgole nell'espressione regolare, il risultato viene rovinato prima di essere analizzato. La configurazione qui sotto dimostra chiaramente questo problema causando il crash immediato di pylint.\n\n### Configurazione\n\n```ini\n[tool.pylint.basic]\n# Il gruppo di cattura assicura che la parte dopo la virgola sia un'espressione regolare non valida,\n# causando il crash di pylint\nbad-name-rgxs = \"(foo{1,3})\"\n```\n### Comando utilizzato\n\n```shell\npylint foo.py\n```\n### Output di Pylint\n\n```shell\nTraceback (most recent call last):\n  File \"/home/lihu/.venv/bin/pylint\", line 8, in <module>\n    sys.exit(run_pylint())\n  File \"/home/lihu/.venv/lib/python3.10/site-packages/pylint/__init__.py\", line 25, in run_pylint\n    PylintRun(argv or sys.argv[1:])\n  File \"/home/lihu/.venv/lib/python3.10/site-packages/pylint/lint/run.py\", line 161, in __init__\n    args = _config_initialization(\n  File \"/home/lihu/.venv/lib/python3.10/site-packages/pylint/config/config_initialization.py\", line 57, in _config_initialization\n    linter._parse_configuration_file(config_args)\n  File \"/home/lihu/.venv/lib/python3.10/site-packages/pylint/config/arguments_manager.py\", line 244, in _parse_configuration_file\n    self.config, parsed_args = self._arg_parser.parse_known_args(\n  File \"/usr/lib/python3.10/argparse.py\", line 1870, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n  File \"/usr/lib/python3.10/argparse.py\", line 2079, in _parse_known_args\n    start_index = consume_optional(start_index)\n  File \"/usr/lib/python3.10/argparse.py\", line 2019, in consume_optional\n    take_action(action, args, option_string)\n  File \"/usr/lib/python3.10/argparse.py\", line 1931, in take_action\n    argument_values = self._get_values(action, argument_strings)\n  File \"/usr/lib/python3.10/argparse.py\", line 2462, in _get_values\n    value = self._get_value(action, arg_string)\n  File \"/usr/lib/python3.10/argparse.py\", line 2495, in _get_value\n    result = type_func(arg_string)\n  File \"/home/lihu/.venv/lib/python3.10/site-packages/pylint/config/argument.py\", line 106, in _regexp_csv_transfomer\n    patterns.append(re.compile(pattern))\n  File \"/usr/lib/python3.10/re.py\", line 251, in compile\n    return _compile(pattern, flags)\n  File \"/usr/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/usr/lib/python3.10/sre_compile.py\", line 764, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/usr/lib/python3.10/sre_parse.py\", line 950, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/usr/lib/python3.10/sre_parse.py\", line 443, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/usr/lib/python3.10/sre_parse.py\", line 838, in _parse\n    raise source.error(\"missing ), unterminated subpattern\",\nre.error: missing ), unterminated subpattern at position 0\n```\n\n### Comportamento atteso\n\nMi aspetterei che qualsiasi espressione regolare valida possa essere espressa in questa opzione. Se non direttamente, aggiungendo un modo per sfuggire alle virgole in modo da poter aggirare questo problema.\n\n### Versione di Pylint\n\n```shell\npylint 2.14.4\nastroid 2.11.7\nPython 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0]\n```\n\n### OS / Ambiente\n\nPop! OS 22.04\n\n### Dipendenze aggiuntive\n\n_Nessuna risposta_",
    "hints_text": "Il crash verrà risolto in https://github.com/PyCQA/pylint/pull/7228. Riguardo al problema con la virgola, penso che una lista di regex non sia possibile e potrebbe essere una grande regex con entrambe le regex più piccole e un ``|``. Quindi potremmo voler cambiare il modo in cui gestiamo questo.\ngrazie per la risposta! Come hai detto, questo non è urgente o bloccante, poiché i quantificatori sono l'unica sintassi regex di Python che utilizza le virgole e le virgole non sono altrimenti valide negli identificatori Python. Qualsiasi quantificatore può essere riscritto con un po' di copia/incolla e `|` ma diventa brutto abbastanza velocemente quindi ho pensato di sollevarlo qui.\nAlmeno, penso che questo possa giustificare una documentazione esplicita poiché questo potrebbe silenziosamente creare due regex valide invece di solo errori, che è lo scenario peggiore IMO\nNon sto suggerendo che dovresti aggirare questo usando ``|`` e nulla dovrebbe essere fatto in pylint, Permettere di avere una lista di regex separate da virgola probabilmente non è qualcosa che dovremmo continuare a fare vedendo la virgola avere significato nelle regex. Immagino che se rimuoviamo la possibilità di creare una lista di regex con virgola da pylint e se qualcuno vuole più regex può farlo facilmente unendole insieme. ad esempio invece di ``[a-z]*,[A-Z]*`` per ``[a-z]*`` e ``[A-Z]*`` è possibile avere una singola regex ``[a-z]*|[A-Z]*``.\nCiao @Pierre-Sassoulas. Il crash in questo caso non verrà risolto da #7228 poiché questo ha un argomento diverso [type](https://github.com/PyCQA/pylint/blob/main/pylint/config/argument.py#L134). Preferiresti che io aggiorni l'esistente MR per gestire anche questo caso o creare un MR separato?\n\nAnche se - a seconda che tu voglia mantenere la funzionalità csv, forse possiamo trattare entrambi i casi come se stessimo passando una singola regex (e non una lista di esse separate da virgola)\nCosa ne pensi @DanielNoord, dovremmo mantenere la sequenza del tipo di pattern e correggerla?\nCambiare questo sarebbe una rottura importante per molte opzioni. Penso che dovremmo provare a evitarle in futuro.\nMa va bene convalidare ogni singola regex nel csv utilizzando la nuova funzione [qui](https://github.com/PyCQA/pylint/pull/7228/files#diff-9c59ebc09daac00e7f077e099aa4edbe3d8e5c5ec118ba0ffb2c398e8a059673R102), giusto @DanielNoord?\nSe va bene, posso aggiornare l'esistente MR o crearne uno nuovo qui per mantenere le cose in ordine.\n> Ma va bene convalidare ogni singola regex nel csv utilizzando la nuova funzione [qui](https://github.com/PyCQA/pylint/pull/7228/files#diff-9c59ebc09daac00e7f077e099aa4edbe3d8e5c5ec118ba0ffb2c398e8a059673R102), giusto @DanielNoord?\n> \n> Se va bene, posso aggiornare l'esistente MR o crearne uno nuovo qui per mantenere le cose in ordine.\n\nSì! Usciamo puliti.\nSe lo manteniamo, dovremmo fare qualcosa di più complesso come non dividere su una virgola se è all'interno di un ``{`` non chiuso? Forse mantenere il bug come è deprecato e rimuoverlo in pylint 3.0?\nPenso che abbia senso rimuoverlo in Pylint 3.0 se 1. vogliamo rimuoverlo e 2. la preoccupazione per rimuoverlo è che è una modifica di rottura.\nAggiornato #7228 per gestire il crash in questo problema; anche se nulla è in atto per evitare la divisione nel mezzo della regex stessa.\nPosso fare una PR per evitare la divisione sulle virgole nei quantificatori senza rompere la funzionalità esistente, se lo desideri. Poiché le virgole nelle espressioni regolari si verificano solo in circostanze limitate, questo è fattibile senza troppa complessità, IMO\n> Poiché le virgole nelle espressioni regolari si verificano solo in circostanze limitate, questo è fattibile senza troppa complessità,\n\nApprezziamo tutto l'aiuto che possiamo ottenere :) Come lo faresti @lbenezriravin? Cosa ne pensi di \"non dividere su una virgola se è all'interno di un ``{`` non chiuso\"?\nNon sarebbe un uso migliore dei nostri sforzi deprecare queste opzioni e crearne di nuove che non dividono?\nÈ un po' un fastidio per gli utenti cambiare il nome nei file di configurazione, ma è molto più futuro e ci avvia sul percorso della deprecazione.\n@Pierre-Sassoulas sì, è esattamente quello che stavo pensando. Ecco un prototipo veloce che ho verificato funziona sui casi banali. Ovviamente lo pulirei prima di PRarlo\n```\ndef split_on_commas(x):\r\n    splits = [None]\r\n    open = False\r\n    for char in x:\r\n        if char == '{':\r\n            open = True\r\n        elif char == '}' and open is not False:\r\n            open = False\r\n        if char == ',' and open is False:\r\n            splits.append(None)\r\n        else:\r\n            if splits[-1] is None:\r\n                splits.append([char])\r\n            else:\r\n                splits[-1].append(char)\r\n    return [''.join(split) for split in splits if split is not None]\r\n ```\n\n@DanielNoord Sono d'accordo che deprecare la funzionalità a lungo termine è meglio, ma se posso rapidamente correggere un bug a breve termine, sono felice di aiutare.\nSto esitando tra 'facciamo la correzione e aspettiamo di vedere se la correzione è abbastanza buona prima della deprecazione' e 'avvertiamo della deprecazione solo quando c'è una virgola dentro {} grazie alla correzione' :smile:",
    "created_at": "2023-07-29T21:53:59Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"tests/config/test_config.py::test_csv_regex_error\"]",
    "PASS_TO_PASS": "[\"tests/config/test_config.py::test_can_read_toml_env_variable\", \"tests/config/test_config.py::test_unknown_message_id\", \"tests/config/test_config.py::test_unknown_option_name\", \"tests/config/test_config.py::test_unknown_short_option_name\", \"tests/config/test_config.py::test_unknown_confidence\", \"tests/config/test_config.py::test_empty_confidence\", \"tests/config/test_config.py::test_unknown_yes_no\", \"tests/config/test_config.py::test_unknown_py_version\", \"tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo-expected0]\", \"tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo,bar-expected1]\", \"tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo,\", \"tests/config/test_config.py::test_regex_error\", \"tests/config/test_config.py::test_short_verbose\", \"tests/config/test_config.py::test_argument_separator\", \"tests/config/test_config.py::test_clear_cache_post_run\", \"tests/config/test_config.py::test_enable_all_disable_all_mutually_exclusive\", \"tests/config/test_config.py::test_disable_before_enable_all_takes_effect\", \"tests/config/test_config.py::test_enable_before_disable_all_takes_effect\"]",
    "environment_setup_commit": "a0ce6e424e3a208f3aed1cbf6e16c40853bec3c0",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13449",
    "base_commit": "2a55431a5678af52f669ffe7dff3dd0bd21727f8",
    "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1253,7 +1253,7 @@ def desc(self):\n         self.descending = True\n \n \n-class Window(Expression):\n+class Window(SQLiteNumericMixin, Expression):\n     template = '%(expression)s OVER (%(window)s)'\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n@@ -1332,6 +1332,16 @@ def as_sql(self, compiler, connection, template=None):\n             'window': ''.join(window_sql).strip()\n         }, params\n \n+    def as_sqlite(self, compiler, connection):\n+        if isinstance(self.output_field, fields.DecimalField):\n+            # Casting to numeric must be outside of the window expression.\n+            copy = self.copy()\n+            source_expressions = copy.get_source_expressions()\n+            source_expressions[0].output_field = fields.FloatField()\n+            copy.set_source_expressions(source_expressions)\n+            return super(Window, copy).as_sqlite(compiler, connection)\n+        return self.as_sql(compiler, connection)\n+\n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(\n             str(self.source_expression),\n",
    "test_patch": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -12,3 +12,4 @@ class Employee(models.Model):\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n     classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\ndiff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,4 +1,5 @@\n import datetime\n+from decimal import Decimal\n from unittest import mock, skipIf\n \n from django.core.exceptions import FieldError\n@@ -21,7 +22,14 @@ class WindowFunctionTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n         Employee.objects.bulk_create([\n-            Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4])\n+            Employee(\n+                name=e[0],\n+                salary=e[1],\n+                department=e[2],\n+                hire_date=e[3],\n+                age=e[4],\n+                bonus=Decimal(e[1]) / 400,\n+            )\n             for e in [\n                 ('Jones', 45000, 'Accounting', datetime.datetime(2005, 11, 1), 20),\n                 ('Williams', 37000, 'Accounting', datetime.datetime(2009, 6, 1), 20),\n@@ -202,6 +210,27 @@ def test_lag(self):\n             ('Smith', 55000, 'Sales', 53000),\n         ], transform=lambda row: (row.name, row.salary, row.department, row.lag))\n \n+    def test_lag_decimalfield(self):\n+        qs = Employee.objects.annotate(lag=Window(\n+            expression=Lag(expression='bonus', offset=1),\n+            partition_by=F('department'),\n+            order_by=[F('bonus').asc(), F('name').asc()],\n+        )).order_by('department', F('bonus').asc(), F('name').asc())\n+        self.assertQuerysetEqual(qs, [\n+            ('Williams', 92.5, 'Accounting', None),\n+            ('Jenson', 112.5, 'Accounting', 92.5),\n+            ('Jones', 112.5, 'Accounting', 112.5),\n+            ('Adams', 125, 'Accounting', 112.5),\n+            ('Moore', 85, 'IT', None),\n+            ('Wilkinson', 150, 'IT', 85),\n+            ('Johnson', 200, 'Management', None),\n+            ('Miller', 250, 'Management', 200),\n+            ('Smith', 95, 'Marketing', None),\n+            ('Johnson', 100, 'Marketing', 95),\n+            ('Brown', 132.5, 'Sales', None),\n+            ('Smith', 137.5, 'Sales', 132.5),\n+        ], transform=lambda row: (row.name, row.bonus, row.department, row.lag))\n+\n     def test_first_value(self):\n         qs = Employee.objects.annotate(first_value=Window(\n             expression=FirstValue('salary'),\n",
    "problem_statement": "**Lag() con DecimalField si blocca su SQLite.**\n\n**Descrizione**\n\nSu Django 3.0.7 con un database SQLite utilizzando il seguente modello:\n```python\nfrom django.db import models\nclass LagTest(models.Model):\n    modified = models.DateField()\n    data = models.FloatField()\n    amount = models.DecimalField(decimal_places=4, max_digits=7)\n```\ne la seguente query:\n```python\nfrom django.db.models import F\nfrom django.db.models.functions import Lag\nfrom django.db.models import Window\nfrom test1.models import LagTest\nw = Window(expression=Lag('amount',7), partition_by=[F('modified')], order_by=F('modified').asc())\nq = LagTest.objects.all().annotate(w=w)\n```\ngenera il seguente errore:\n```\nIn [12]: print(q)\n---------------------------------------------------------------------------\nOperationalError\t\t\t\t\t\t Traceback (most recent call last)\nC:\\ProgramData\\Anaconda3\\envs\\djbase\\lib\\site-packages\\django\\db\\backends\\utils.py in _execute(self, sql, params, *ignored_wrapper_args)\n\t 85\t\t\t else:\n---> 86\t\t\t\t return self.cursor.execute(sql, params)\n\t 87\nC:\\ProgramData\\Anaconda3\\envs\\djbase\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py in execute(self, query, params)\n\t395\t\t query = self.convert_query(query)\n--> 396\t\t return Database.Cursor.execute(self, query, params)\n\t397 \nOperationalError: near \"OVER\": syntax error\n```\nL'eccezione sopra è la causa diretta della seguente eccezione:\n```\nOperationalError\t\t\t\t\t\t Traceback (most recent call last)\n<ipython-input-12-996617e96a38> in <module>\n----> 1 print(q)\nC:\\ProgramData\\Anaconda3\\envs\\djbase\\lib\\site-packages\\django\\db\\models\\query.py in __repr__(self)\n\t250\n\t251\t def __repr__(self):\n--> 252\t\t data = list(self[:REPR_OUTPUT_SIZE + 1])\n\t253\t\t if len(data) > REPR_OUTPUT_SIZE:\n\t254\t\t\t data[-1] = \"...(remaining elements truncated)...\"\n...\nOperationalError: near \"OVER\": syntax error\n```\nLa query SQL generata è:\n```sql\nSELECT \"test1_lagtest\".\"id\", \"test1_lagtest\".\"modified\", \"test1_lagtest\".\"data\", \n\"test1_lagtest\".\"amount\", CAST(LAG(\"test1_lagtest\".\"amount\", 7) AS NUMERIC) OVER \n(PARTITION BY \"test1_lagtest\".\"modified\" ORDER BY \"test1_lagtest\".\"modified\" ASC) \nAS \"w\" FROM \"test1_lagtest\"\n```\nCredo che questo fallisca perché la dichiarazione CAST() termina dopo LAG, mentre dovrebbe essere intorno all'intera dichiarazione fino a \"w\".\nQuesto si applica solo quando il campo lagged è un DecimalField, ad esempio:\n```python\nw = Window(expression=Lag('data',7), partition_by=[F('modified')], order_by=F('modified').asc())\n```\nfunziona correttamente.\nPosso sovrascriverlo aggiungendo `output_field=FloatField()` alla funzione Lag, ad esempio:\n```python\nw = Window(expression=Lag('amount',7,output_field=FloatField()), partition_by=[F('modified')], order_by=F('modified').asc())\n```",
    "hints_text": "Grazie per questa segnalazione. Posso confermare che funziona correttamente anche con `FloatField()`. Riprodotto alla commit 27c09043da52ca1f02605bf28600bfd5ace95ae4.\n\nProbabilmente si tratta di un problema dovuto a `SQLiteNumericMixin` ​https://github.com/django/django/blob/27c09043da52ca1f02605bf28600bfd5ace95ae4/django/db/models/expressions.py#L16-L28. Potremmo far ereditare `Window` da `SQLiteNumericMixin` e rendere `SQLiteNumericMixin.as_sqlite` un'operazione noop quando `getattr(self, 'window_compatible', False)`. Un'alternativa potrebbe essere far ereditare `Window` da `SQLiteNumericMixin` e far sì che il suo `as_sqlite` gestisca un caso speciale quando `isinstance(self.output_field, 'DecimalField')` con qualcosa del tipo:\n\n```python\ndef as_sqlite(self, compiler, connection):\n    if isinstance(self.output_field, 'DecimalField'):\n        copy = self.copy()\n        source_expressions = copy.get_source_expressions()\n        source_expressions[0].output_field = FloatField()\n        copy.set_source_expressions(source_expressions)\n        return super(Window, copy).as_sqlite(compiler, connection)\n    return self.as_sql(compiler, connection)\n```\n\nQuesto eviterebbe di dover insegnare a `SQLiteNumericMixin` le funzioni di finestra e garantirebbe che le funzioni compatibili con le finestre possano essere utilizzate al di fuori delle espressioni di finestra, essendo avvolte in modo appropriato.",
    "created_at": "2020-09-22T13:04:03Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_lag_decimalfield (expressions_window.tests.WindowFunctionTests)\"]",
    "PASS_TO_PASS": "[\"test_conditional_annotation (expressions_window.tests.NonQueryWindowTests)\", \"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_unsupported_backend (expressions_window.tests.WindowUnsupportedTests)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"test_range_n_preceding_and_following (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_related_ordering_with_count (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15128",
    "base_commit": "cb383753c0e0eb52306e1024d32a782549c27e61",
    "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -572,6 +572,15 @@ def combine(self, rhs, connector):\n         if self.distinct_fields != rhs.distinct_fields:\n             raise TypeError('Cannot combine queries with different distinct fields.')\n \n+        # If lhs and rhs shares the same alias prefix, it is possible to have\n+        # conflicting alias changes like T4 -> T5, T5 -> T6, which might end up\n+        # as T4 -> T6 while combining two querysets. To prevent this, change an\n+        # alias prefix of the rhs and update current aliases accordingly,\n+        # except if the alias is the base table since it must be present in the\n+        # query on both sides.\n+        initial_alias = self.get_initial_alias()\n+        rhs.bump_prefix(self, exclude={initial_alias})\n+\n         # Work out how to relabel the rhs aliases, if necessary.\n         change_map = {}\n         conjunction = (connector == AND)\n@@ -589,9 +598,6 @@ def combine(self, rhs, connector):\n         # the AND case. The results will be correct but this creates too many\n         # joins. This is something that could be fixed later on.\n         reuse = set() if conjunction else set(self.alias_map)\n-        # Base table must be present in the query - this is the same\n-        # table on both sides.\n-        self.get_initial_alias()\n         joinpromoter = JoinPromoter(connector, 2, False)\n         joinpromoter.add_votes(\n             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n@@ -846,6 +852,9 @@ def change_aliases(self, change_map):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        # If keys and values of change_map were to intersect, an alias might be\n+        # updated twice (e.g. T4 -> T5, T5 -> T6, so also T4 -> T6) depending\n+        # on their order in change_map.\n         assert set(change_map).isdisjoint(change_map.values())\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n@@ -879,12 +888,12 @@ def change_aliases(self, change_map):\n             for alias, aliased in self.external_aliases.items()\n         }\n \n-    def bump_prefix(self, outer_query):\n+    def bump_prefix(self, other_query, exclude=None):\n         \"\"\"\n         Change the alias prefix to the next letter in the alphabet in a way\n-        that the outer query's aliases and this query's aliases will not\n+        that the other query's aliases and this query's aliases will not\n         conflict. Even tables that previously had no alias will get an alias\n-        after this call.\n+        after this call. To prevent changing aliases use the exclude parameter.\n         \"\"\"\n         def prefix_gen():\n             \"\"\"\n@@ -904,7 +913,7 @@ def prefix_gen():\n                     yield ''.join(s)\n                 prefix = None\n \n-        if self.alias_prefix != outer_query.alias_prefix:\n+        if self.alias_prefix != other_query.alias_prefix:\n             # No clashes between self and outer query should be possible.\n             return\n \n@@ -922,10 +931,13 @@ def prefix_gen():\n                     'Maximum recursion depth exceeded: too many subqueries.'\n                 )\n         self.subq_aliases = self.subq_aliases.union([self.alias_prefix])\n-        outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)\n+        other_query.subq_aliases = other_query.subq_aliases.union(self.subq_aliases)\n+        if exclude is None:\n+            exclude = {}\n         self.change_aliases({\n             alias: '%s%d' % (self.alias_prefix, pos)\n             for pos, alias in enumerate(self.alias_map)\n+            if alias not in exclude\n         })\n \n     def get_initial_alias(self):\n",
    "test_patch": "diff --git a/tests/queries/models.py b/tests/queries/models.py\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,13 +613,14 @@ def __str__(self):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey(Annotation, models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n     title = models.CharField(max_length=10)\n     owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n     creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n+    note = models.ForeignKey(Note, on_delete=models.CASCADE, null=True, blank=True)\n \n     def __str__(self):\n         return self.title\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -15,7 +15,7 @@\n from django.test.utils import CaptureQueriesContext\n \n from .models import (\n-    FK1, Annotation, Article, Author, BaseA, Book, CategoryItem,\n+    FK1, Annotation, Article, Author, BaseA, BaseUser, Book, CategoryItem,\n     CategoryRelationship, Celebrity, Channel, Chapter, Child, ChildObjectA,\n     Classroom, CommonMixedCaseForeignKeys, Company, Cover, CustomPk,\n     CustomPkTag, DateTimePK, Detail, DumbCategory, Eaten, Employment,\n@@ -2094,6 +2094,15 @@ def setUpTestData(cls):\n         cls.room_2 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 2')\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n+        tag = Tag.objects.create()\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n \n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_rhs_slice(self):\n@@ -2130,6 +2139,17 @@ def test_subquery_aliases(self):\n         nested_combined = School.objects.filter(pk__in=combined.values('pk'))\n         self.assertSequenceEqual(nested_combined, [self.school])\n \n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n+\n \n class CloneTests(TestCase):\n \n",
    "problem_statement": "**Query.change_aliases genera un AssertionError**\n\n**Descrizione**\n\nVersione Python: 3.9.2  \nVersione Django: 2.2.24, 3.2.9 (riprodotto con due versioni diverse)\n\n**Codice per Riprodurre l'Errore**\n\n```python\n# models.py\nfrom django.db import models\n\nclass Foo(models.Model):\n    qux = models.ForeignKey(\"app.Qux\", on_delete=models.CASCADE, related_name=\"foos\")\n\nclass Bar(models.Model):\n    foo = models.ForeignKey(\"app.Foo\", on_delete=models.CASCADE, related_name=\"bars\")\n    another_foo = models.ForeignKey(\"app.Foo\", on_delete=models.CASCADE, related_name=\"other_bars\")\n    baz = models.ForeignKey(\"app.Baz\", on_delete=models.CASCADE, related_name=\"bars\")\n\nclass Baz(models.Model):\n    pass\n\nclass Qux(models.Model):\n    bazes = models.ManyToManyField(\"app.Baz\", related_name=\"quxes\")\n```\n\n**Test che Falliscono**\n\n```python\nfrom django.db.models import Q\nfrom bug.app.models import Foo, Qux\n\nqux = Qux.objects.create()\nqs1 = qux.foos.all()\nqs2 = Foo.objects.filter(\n    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n)\n\n# Funziona correttamente.\nqs2 | qs1\n\n# AssertionError\n# \"/django/db/models/sql/query.py\", linea 854, in Query.change_aliases\n# change_map = {'T4': 'T5', 'T5': 'T6'}\nqs1 | qs2\n```\n\n**Descrizione**\n\nHo riscontrato questo bug durante il lavoro su un progetto e ho ricreato il codice per riprodurlo nel modo più semplice possibile. Ho anche esaminato la causa del bug e, per quanto ho capito, il problema si verifica durante un'operazione `__or__` tra due QuerySet. Nel metodo `Query.combine`, se il QuerySet di `rhs` ha alias sequenziali (ad esempio `T4` e `T5`) e i nomi delle tabelle correlate esistono anche in `lhs.table_map`, la chiamata a `Query.table_alias` in `Query.join` porta alla creazione di alias come `T5` per `T4` e `T6` per `T5`. Ciò fa sì che le chiavi di `change_map` intersechino i valori, causando il `AssertionError` sopra riportato.\n\n**Aspettativa**\n\nPotresti per favore risolvere questo bug? Forse `alias_map` di `rhs` potrebbe essere fornito a `Query.join` e `Query.table_alias`, e il suffisso (numero) del nuovo alias potrebbe essere incrementato fino a quando non è presente in `rhs.alias_map`, per evitare l'intersezione tra chiavi e valori di `change_map`.\n\nL'asserzione nella prima riga di `QuerySet.change_aliases` non è documentata tramite un commento. Per quanto ho capito, è presente perché se le chiavi e i valori si intersecano, significa che un alias potrebbe essere modificato due volte (ad esempio, prima `T4 -> T5` e poi `T5 -> T6`) in base al loro ordine in `change_map`. A mio parere, potrebbe essere aggiunto un commento su cosa garantisce, o un' spiegazione potrebbe essere aggiunta al `AssertionError` (come le asserzioni nel metodo `Query.combine`).\n\nSembra che l'operazione OR di QuerySet non sia commutativa (possono generare query diverse, anche se i risultati sono gli stessi). A mio parere, questo potrebbe essere dichiarato esplicitamente nella documentazione.",
    "hints_text": "Grazie per il report. Riprodotto in b8c0b22f2f0f8ce664642332d6d872f300c662b4.\nVishal Pandey, se stai cercando suggerimenti su come risolvere il problema, credo di avere una buona comprensione della questione. La causa principale è che entrambe le query capita di condividere lo stesso `alias_prefix`; la lettera utilizzata per generare alias quando la stessa tabella viene riferita più di una volta in una query. Abbiamo già un metodo che fa tutto il lavoro pesante per prevenire queste collisioni, utilizzato dall'ORM quando sono coinvolte sottoquery, che è `Query.bump_prefix`, ma non è del tutto applicabile qui. Credo che il miglior modo per procedere sia modificare l'`alias_prefix` del lato destro (`rhs`) e cambiare il suo alias di conseguenza, in modo da evitare conflitti prima di procedere con la creazione della `change_map`.\n\n**Risposta a Mariusz Felisiak**: Grazie per il report. Riprodotto in b8c0b22f2f0f8ce664642332d6d872f300c662b4. Grazie per la tua rapida risposta, ma il commit che hai menzionato non sembra correlato. A proposito, posso aprire una PR per aggiungermi ad `AUTHORS`?  \n**Risposta a Simon Charette**: Vishal Pandey, se stai cercando suggerimenti su come risolvere il problema, credo di avere una buona comprensione della questione. La causa principale è che entrambe le query capita di condividere lo stesso `alias_prefix`; la lettera utilizzata per generare alias quando la stessa tabella viene riferita più di una volta in una query. Abbiamo già un metodo che fa tutto il lavoro pesante per prevenire queste collisioni, utilizzato dall'ORM quando sono coinvolte sottoquery, che è `Query.bump_prefix`, ma non è del tutto applicabile qui. Credo che il miglior modo per procedere sia modificare l'`alias_prefix` del lato destro (`rhs`) e cambiare il suo alias di conseguenza, in modo da evitare conflitti prima di procedere con la creazione della `change_map`. Sono completamente d'accordo con te. Il mio primo tentativo è stato di usare `Query.bump_prefix`, ma come hai detto, ha generato un errore.\n\nGrazie per la tua rapida risposta, ma il commit che hai menzionato non sembra correlato. Sì, non è correlato. Ho aggiunto questo commento per mostrare che è ancora riproducibile sul ramo principale. A proposito, posso aprire una PR per aggiungermi ad `AUTHORS`? Puoi aggiungere una voce in `AUTHORS` con una patch per questo problema. Una PR separata non è necessaria.\n\n**Risposta a Simon Charette**: Grazie per il tuo aiuto. Ho provato due approcci per risolvere questo problema modificando il metodo `table_alias` della classe `Query`, e funziona con il codice di esempio sopra riportato, ma sfortunatamente, entrambi falliscono con alcuni test. Con entrambi gli approcci, sto cercando di risolvere i conflitti tra le chiavi di `change_map` e i suoi valori. **1° approccio**: `if alias_list: from random import choice alias = '%s%d' % (choice(ascii_uppercase), len(self.alias_map) + 1) alias_list.append(alias)` Qui, sto scegliendo casualmente una lettera maiuscola come primo carattere dell'alias, questo restituisce alias diversi, ma un test fallisce con questo approccio, con il seguente traceback. **FALLITO**: `test_multiple_search_fields` (admin_changelist.tests.ChangeListTests) [`<object object at 0x7fc0aa886cf0>`] (search_string='Tiny Desk Concert') Tutte le righe contenenti ciascuna delle parole cercate vengono restituite, dove ciascuna ---------------------------------------------------------------------- **Traceback** (chiamata più recente per ultima): File \"/usr/lib/python3.8/unittest/case.py\", line 60, in testPartExecutor yield File \"/usr/lib/python3.8/unittest/case.py\", line 582, in subTest yield File \"/home/vishal/Desktop/open_source/django/tests/admin_changelist/tests.py\", line 550, in test_multiple_search_fields group_changelist = group_model_admin.get_changelist_instance(request) File \"/home/vishal/Desktop/open_source/django/django/contrib/admin/options.py\", line 742, in get_changelist_instance return ChangeList( File \"/home/vishal/Desktop/open_source/django/django/contrib/admin/views/main.py\", line 100, in __init__ self.queryset = self.get_queryset(request) File \"/home/vishal/Desktop/open_source/django/django/contrib/admin/views/main.py\", line 498, in get_queryset qs = self.root_queryset.filter(Exists(qs)) File \"/home/vishal/Desktop/open_source/django/django/db/models/query.py\", line 977, in filter return self._filter_or_exclude(False, args, kwargs) File \"/home/vishal/Desktop/open_source/django/django/db/models/query.py\", line 995, in _filter_or_exclude clone._filter_or_exclude_inplace(negate, args, kwargs) File \"/home/vishal/Desktop/open_source/django/django/db/models/query.py\", line 1002, in _filter_or_exclude_inplace self._query.add_q(Q(*args, **kwargs)) File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 1374, in add_q clause, _ = self._add_q(q_object, self.used_aliases) File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 1395, in _add_q child_clause, needed_inner = self.build_filter( File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 1263, in build_filter condition = filter_expr.resolve_expression(self, allow_joins=allow_joins) File \"/home/vishal/Desktop/open_source/django/django/db/models/expressions.py\", line 248, in resolve_expression c.set_source_expressions([ File \"/home/vishal/Desktop/open_source/django/django/db/models/expressions.py\", line 249, in <listcomp> expr.resolve_expression(query, allow_joins, reuse, summarize) File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 1035, in resolve_expression clone.bump_prefix(query) File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 925, in bump_prefix self.change_aliases({ File \"/home/vishal/Desktop/open_source/django/django/db/models/sql/query.py\", line 848, in change_aliases assert set(change_map).isdisjoint(change_map.values()) AssertionError **Nel 2° approccio**, ho ruotato l'`alias_prefix` in modo circolare da `T` (la variabile di classe `alias_prefix` ha valore `T`) a `Z`, poi da `A` a `Z`, e così via, e funziona anche con il codice sopra riportato, ma fallisce altri cinque test. `if alias_list: alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1) self.alias_prefix = chr(ord(self.alias_prefix)+1) if chr(ord(self.alias_prefix)+1) <= 'Z' else 'A' alias_list.append(alias)` Sento che qualcosa deve essere modificato qui per risolvere il problema, ma a causa della mia limitata conoscenza del codebase sottostante, non riesco a risolverlo. Chiedo aiuto ai miei colleghi sviluppatori senior per risolvere questo problema.\n\nÖmer, Il mio primo tentativo è stato di usare `Query.bump_prefix`, ma come hai detto, ha generato un errore. L'errore che hai incontrato è dovuto al fatto che `bump_prefix` richiede alcuni aggiustamenti. L'algoritmo di fusione degli alias che `Query.combine` utilizza richiede che entrambe le query condividano lo stesso alias iniziale per funzionare, altrimenti otterrai un `KeyError`. Dovrai trovare un modo per far sì che `bump_prefix` modifichi tutti gli alias tranne quello iniziale, in modo che possa ancora essere utilizzato come punto di partenza per la fusione.  \n---  \nVishal, Qui, sto scegliendo casualmente una lettera maiuscola come primo carattere dell'alias, questo restituisce alias diversi, ma un test fallisce con questo approccio, con il seguente traceback. Scegliere un alias iniziale casuale porterà più danni che benefici, poiché non fare affidamento su `alias_prefix` causerà fallimenti non deterministici in tutto il codice. Ci sono motivi per cui il prefisso viene utilizzato e incrementato solo in caso di conflitto; rende più semplice ragionare sulle possibili collisioni. **Nel 2° approccio**, ho ruotato l'`alias_prefix` in modo circolare da `T` (la variabile di classe `alias_prefix` ha valore `T`) a `Z`, poi da `A` a `Z`, e così via, e funziona anche con il codice sopra riportato, ma fallisce altri cinque test. Questo approccio non tiene conto delle possibili collisioni con gli alias delle sottoquery e alla fine colliderà una volta che avrai completato il ciclo delle 26 lettere dell'alfabeto invece di utilizzare l'approccio del prodotto cartesiano.  \n---  \nTutta la logica necessaria per prevenire le collisioni di `alias_prefix` è già presente in `bump_prefix`, è solo una questione di regolarla per consentire il suo utilizzo nell'algoritmo di fusione degli alias di `combine`.\n\n**Risposta a Simon Charette**: Ciao Simon, Credo di aver risolto questo problema fornendo un parametro a `bump_prefix` per prevenire la modifica diretta degli alias, ma solo incrementando il prefisso di conseguenza. Sembra funzionare bene, superando tutti i test, inclusi i test di regressione che ho aggiunto per questo problema. Apprezzerei le tue recensioni per la ​PR. Grazie anche per il tuo impegno, Vishal!\n\nAssegno questo ticket a me stesso poiché c'è una patch in corso ​qui.",
    "created_at": "2021-11-25T15:50:24Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_conflicting_aliases_during_combine (queries.tests.QuerySetBitwiseOperationTests)\"]",
    "PASS_TO_PASS": "[\"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_datetimes_invalid_field (queries.tests.Queries3Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"Generating the query string doesn't alter the query's state\", \"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"Cloning a queryset does not get out of hand. While complete\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"Subquery table names should be quoted.\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"When passing proxy model objects, child objects, or parent objects,\", \"#23396 - Ensure ValueQuerySets are not checked for compatibility with the lookup field\", \"A ValueError is raised when the incorrect object type is passed to a\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_col_alias_quoted (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_queryset_reuse (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_o2o_object (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_combine_or_filter_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13128",
    "base_commit": "2d67222472f80f251607ae1b720527afceba06ad",
    "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -443,23 +443,6 @@ def set_source_expressions(self, exprs):\n         self.lhs, self.rhs = exprs\n \n     def as_sql(self, compiler, connection):\n-        try:\n-            lhs_type = self.lhs.output_field.get_internal_type()\n-        except FieldError:\n-            lhs_type = None\n-        try:\n-            rhs_type = self.rhs.output_field.get_internal_type()\n-        except FieldError:\n-            rhs_type = None\n-        if (\n-            not connection.features.has_native_duration_field and\n-            'DurationField' in {lhs_type, rhs_type} and\n-            lhs_type != rhs_type\n-        ):\n-            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n-        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n-        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -474,10 +457,30 @@ def as_sql(self, compiler, connection):\n         return expression_wrapper % sql, expression_params\n \n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n+        lhs = self.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+        rhs = self.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+        if not isinstance(self, (DurationExpression, TemporalSubtraction)):\n+            try:\n+                lhs_type = lhs.output_field.get_internal_type()\n+            except (AttributeError, FieldError):\n+                lhs_type = None\n+            try:\n+                rhs_type = rhs.output_field.get_internal_type()\n+            except (AttributeError, FieldError):\n+                rhs_type = None\n+            if 'DurationField' in {lhs_type, rhs_type} and lhs_type != rhs_type:\n+                return DurationExpression(self.lhs, self.connector, self.rhs).resolve_expression(\n+                    query, allow_joins, reuse, summarize, for_save,\n+                )\n+            datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+            if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n+                return TemporalSubtraction(self.lhs, self.rhs).resolve_expression(\n+                    query, allow_joins, reuse, summarize, for_save,\n+                )\n         c = self.copy()\n         c.is_summary = summarize\n-        c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n-        c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+        c.lhs = lhs\n+        c.rhs = rhs\n         return c\n \n \n@@ -494,6 +497,8 @@ def compile(self, side, compiler, connection):\n         return compiler.compile(side)\n \n     def as_sql(self, compiler, connection):\n+        if connection.features.has_native_duration_field:\n+            return super().as_sql(compiler, connection)\n         connection.ops.check_expression_support(self)\n         expressions = []\n         expression_params = []\n",
    "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1493,9 +1493,7 @@ def test_duration_expressions(self):\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n-            completion_duration=ExpressionWrapper(\n-                F('completed') - F('assigned'), output_field=DurationField()\n-            )\n+            completion_duration=F('completed') - F('assigned'),\n         )\n \n         at_least_5_days = {e.name for e in queryset.filter(completion_duration__gte=datetime.timedelta(days=5))}\n@@ -1507,10 +1505,9 @@ def test_date_subtraction(self):\n         less_than_5_days = {e.name for e in queryset.filter(completion_duration__lt=datetime.timedelta(days=5))}\n         self.assertEqual(less_than_5_days, {'e0', 'e1', 'e2'})\n \n-        queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n-            F('completed') - Value(None, output_field=DateField()),\n-            output_field=DurationField(),\n-        ))\n+        queryset = Experiment.objects.annotate(\n+            difference=F('completed') - Value(None, output_field=DateField()),\n+        )\n         self.assertIsNone(queryset.first().difference)\n \n         queryset = Experiment.objects.annotate(shifted=ExpressionWrapper(\n@@ -1523,9 +1520,7 @@ def test_date_subtraction(self):\n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n         queryset = Experiment.objects.annotate(\n-            difference=ExpressionWrapper(\n-                subquery - F('completed'), output_field=DurationField(),\n-            ),\n+            difference=subquery - F('completed'),\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n \n@@ -1540,9 +1535,7 @@ def test_date_case_subtraction(self):\n                 self.e0.completed,\n                 output_field=DateField(),\n             ),\n-            difference=ExpressionWrapper(\n-                F('date_case') - F('completed_value'), output_field=DurationField(),\n-            ),\n+            difference=F('date_case') - F('completed_value'),\n         ).filter(difference=datetime.timedelta())\n         self.assertEqual(queryset.get(), self.e0)\n \n@@ -1550,20 +1543,16 @@ def test_date_case_subtraction(self):\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n-            difference=ExpressionWrapper(\n-                F('time') - Value(datetime.time(11, 15, 0), output_field=TimeField()),\n-                output_field=DurationField(),\n-            )\n+            difference=F('time') - Value(datetime.time(11, 15, 0), output_field=TimeField()),\n         )\n         self.assertEqual(\n             queryset.get().difference,\n             datetime.timedelta(hours=1, minutes=15, seconds=15, microseconds=2345)\n         )\n \n-        queryset = Time.objects.annotate(difference=ExpressionWrapper(\n-            F('time') - Value(None, output_field=TimeField()),\n-            output_field=DurationField(),\n-        ))\n+        queryset = Time.objects.annotate(\n+            difference=F('time') - Value(None, output_field=TimeField()),\n+        )\n         self.assertIsNone(queryset.first().difference)\n \n         queryset = Time.objects.annotate(shifted=ExpressionWrapper(\n@@ -1577,9 +1566,7 @@ def test_time_subquery_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         subquery = Time.objects.filter(pk=OuterRef('pk')).values('time')\n         queryset = Time.objects.annotate(\n-            difference=ExpressionWrapper(\n-                subquery - F('time'), output_field=DurationField(),\n-            ),\n+            difference=subquery - F('time'),\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n \n@@ -1595,10 +1582,9 @@ def test_datetime_subtraction(self):\n         ]\n         self.assertEqual(over_estimate, ['e4'])\n \n-        queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n-            F('start') - Value(None, output_field=DateTimeField()),\n-            output_field=DurationField(),\n-        ))\n+        queryset = Experiment.objects.annotate(\n+            difference=F('start') - Value(None, output_field=DateTimeField()),\n+        )\n         self.assertIsNone(queryset.first().difference)\n \n         queryset = Experiment.objects.annotate(shifted=ExpressionWrapper(\n@@ -1611,9 +1597,7 @@ def test_datetime_subtraction(self):\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n         queryset = Experiment.objects.annotate(\n-            difference=ExpressionWrapper(\n-                subquery - F('start'), output_field=DurationField(),\n-            ),\n+            difference=subquery - F('start'),\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n \n@@ -1621,9 +1605,7 @@ def test_datetime_subquery_subtraction(self):\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n-        qs = Experiment.objects.annotate(\n-            delta=ExpressionWrapper(F('end') - F('start'), output_field=DurationField())\n-        )\n+        qs = Experiment.objects.annotate(delta=F('end') - F('start'))\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n",
    "problem_statement": "fai funzionare la sottrazione temporale senza ExpressionWrapper\nDescrizione\n\nclass Experiment(models.Model):\n\tstart = models.DateTimeField()\n\tend = models.DateTimeField()\nExperiment.objects.annotate(\n\tdelta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())\n)\nQuesto genera:\ndjango.core.exceptions.FieldError: L'espressione contiene tipi misti: DateTimeField, DurationField. Devi impostare output_field.",
    "hints_text": null,
    "created_at": "2020-06-30T18:06:56Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\"]",
    "PASS_TO_PASS": "[\"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14011",
    "base_commit": "e4430f22c8e3d29ce5d9d0263fba57121938d06d",
    "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -16,6 +16,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.core.handlers.wsgi import LimitedStream\n from django.core.wsgi import get_wsgi_application\n+from django.db import connections\n from django.utils.module_loading import import_string\n \n __all__ = ('WSGIServer', 'WSGIRequestHandler')\n@@ -81,6 +82,28 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n \n+    def __init__(self, *args, connections_override=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.connections_override = connections_override\n+\n+    # socketserver.ThreadingMixIn.process_request() passes this method as\n+    # the target to a new Thread object.\n+    def process_request_thread(self, request, client_address):\n+        if self.connections_override:\n+            # Override this thread's database connections with the ones\n+            # provided by the parent thread.\n+            for alias, conn in self.connections_override.items():\n+                connections[alias] = conn\n+        super().process_request_thread(request, client_address)\n+\n+    def _close_connections(self):\n+        # Used for mocking in tests.\n+        connections.close_all()\n+\n+    def close_request(self, request):\n+        self._close_connections()\n+        super().close_request(request)\n+\n \n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -83,6 +83,7 @@ def django_test_skips(self):\n                 \"the sqlite backend's close() method is a no-op when using an \"\n                 \"in-memory database\": {\n                     'servers.test_liveserverthread.LiveServerThreadTest.test_closes_connections',\n+                    'servers.tests.LiveServerTestCloseConnectionTest.test_closes_connections',\n                 },\n             })\n         return skips\n",
    "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1513,11 +1513,12 @@ def run(self):\n         finally:\n             connections.close_all()\n \n-    def _create_server(self):\n+    def _create_server(self, connections_override=None):\n         return self.server_class(\n             (self.host, self.port),\n             QuietWSGIRequestHandler,\n             allow_reuse_address=False,\n+            connections_override=connections_override,\n         )\n \n     def terminate(self):\n@@ -1553,21 +1554,28 @@ def allowed_host(cls):\n         return cls.host\n \n     @classmethod\n-    def setUpClass(cls):\n-        super().setUpClass()\n+    def _make_connections_override(cls):\n         connections_override = {}\n         for conn in connections.all():\n             # If using in-memory sqlite databases, pass the connections to\n             # the server thread.\n             if conn.vendor == 'sqlite' and conn.is_in_memory_db():\n-                # Explicitly enable thread-shareability for this connection\n-                conn.inc_thread_sharing()\n                 connections_override[conn.alias] = conn\n+        return connections_override\n \n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n         cls._live_server_modified_settings = modify_settings(\n             ALLOWED_HOSTS={'append': cls.allowed_host},\n         )\n         cls._live_server_modified_settings.enable()\n+\n+        connections_override = cls._make_connections_override()\n+        for conn in connections_override.values():\n+            # Explicitly enable thread-shareability for this connection.\n+            conn.inc_thread_sharing()\n+\n         cls.server_thread = cls._create_server_thread(connections_override)\n         cls.server_thread.daemon = True\n         cls.server_thread.start()\n@@ -1593,7 +1601,7 @@ def _create_server_thread(cls, connections_override):\n     def _tearDownClassInternal(cls):\n         # Terminate the live server's thread.\n         cls.server_thread.terminate()\n-        # Restore sqlite in-memory database connections' non-shareability.\n+        # Restore shared connections' non-shareability.\n         for conn in cls.server_thread.connections_override.values():\n             conn.dec_thread_sharing()\n \ndiff --git a/tests/servers/tests.py b/tests/servers/tests.py\n--- a/tests/servers/tests.py\n+++ b/tests/servers/tests.py\n@@ -4,13 +4,15 @@\n import errno\n import os\n import socket\n+import threading\n from http.client import HTTPConnection\n from urllib.error import HTTPError\n from urllib.parse import urlencode\n from urllib.request import urlopen\n \n from django.conf import settings\n-from django.core.servers.basehttp import WSGIServer\n+from django.core.servers.basehttp import ThreadedWSGIServer, WSGIServer\n+from django.db import DEFAULT_DB_ALIAS, connections\n from django.test import LiveServerTestCase, override_settings\n from django.test.testcases import LiveServerThread, QuietWSGIRequestHandler\n \n@@ -40,6 +42,71 @@ def urlopen(self, url):\n         return urlopen(self.live_server_url + url)\n \n \n+class CloseConnectionTestServer(ThreadedWSGIServer):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        # This event is set right after the first time a request closes its\n+        # database connections.\n+        self._connections_closed = threading.Event()\n+\n+    def _close_connections(self):\n+        super()._close_connections()\n+        self._connections_closed.set()\n+\n+\n+class CloseConnectionTestLiveServerThread(LiveServerThread):\n+\n+    server_class = CloseConnectionTestServer\n+\n+    def _create_server(self, connections_override=None):\n+        return super()._create_server(connections_override=self.connections_override)\n+\n+\n+class LiveServerTestCloseConnectionTest(LiveServerBase):\n+\n+    server_thread_class = CloseConnectionTestLiveServerThread\n+\n+    @classmethod\n+    def _make_connections_override(cls):\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        cls.conn = conn\n+        cls.old_conn_max_age = conn.settings_dict['CONN_MAX_AGE']\n+        # Set the connection's CONN_MAX_AGE to None to simulate the\n+        # CONN_MAX_AGE setting being set to None on the server. This prevents\n+        # Django from closing the connection and allows testing that\n+        # ThreadedWSGIServer closes connections.\n+        conn.settings_dict['CONN_MAX_AGE'] = None\n+        # Pass a database connection through to the server to check it is being\n+        # closed by ThreadedWSGIServer.\n+        return {DEFAULT_DB_ALIAS: conn}\n+\n+    @classmethod\n+    def tearDownConnectionTest(cls):\n+        cls.conn.settings_dict['CONN_MAX_AGE'] = cls.old_conn_max_age\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        cls.tearDownConnectionTest()\n+        super().tearDownClass()\n+\n+    def test_closes_connections(self):\n+        # The server's request thread sets this event after closing\n+        # its database connections.\n+        closed_event = self.server_thread.httpd._connections_closed\n+        conn = self.conn\n+        # Open a connection to the database.\n+        conn.connect()\n+        self.assertIsNotNone(conn.connection)\n+        with self.urlopen('/model_view/') as f:\n+            # The server can access the database.\n+            self.assertEqual(f.read().splitlines(), [b'jane', b'robert'])\n+        # Wait for the server's request thread to close the connection.\n+        # A timeout of 0.1 seconds should be more than enough. If the wait\n+        # times out, the assertion after should fail.\n+        closed_event.wait(timeout=0.1)\n+        self.assertIsNone(conn.connection)\n+\n+\n class FailingLiveServerThread(LiveServerThread):\n     def _create_server(self):\n         raise RuntimeError('Error creating server.')\n",
    "problem_statement": "LiveServerTestCase's ThreadedWSGIServer non chiude le connessioni al database dopo ogni thread\nDescrizione\n\nIn Django 2.2.17, sto riscontrando la ricomparsa di #22414 dopo che era stato risolto in 1.11. #22414 è il problema in cui il seguente errore si verifica al termine di un'esecuzione di test quando viene chiamato destroy_test_db():\nOperationalError: il database \"test_myapp\" è accessibile da altri utenti\nQuesto errore si verifica quando non tutte le connessioni al database sono chiuse. Nel mio caso, oggi sto riscontrando questo problema eseguendo un singolo test che è un LiveServerTestCase. Lo vedo in circa la metà delle mie esecuzioni di test, quindi non è completamente deterministico (si tratta di una condizione di corsa).\nNon ci sono stati molti cambiamenti nel codice relativo a LiveServerTestCase tra 1.11 e 2.2, quindi li ho esaminati individualmente.\nLa issue #20238 ha aggiunto il supporto per i thread a LiveServerTestCase. Una delle modifiche apportate è stata la sostituzione di LiveServerThread con ThreadedWSGIServer al posto di WSGIServer. LiveServerThread viene utilizzato da LiveServerTestCase.\nQuando ho provato a modificare LiveServerThread per utilizzare il vecchio WSGIServer, non sono più riuscito a riprodurre l'errore sopra riportato. Le mie modifiche sono state le seguenti:\n```python\nclass NonThreadedLiveServerThread(LiveServerThread):\n    def _create_server(self):\n        return WSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n\nclass MyTest(LiveServerTestCase):\n    server_thread_class = NonThreadedLiveServerThread\n```\nLa documentazione di CPython descrive ThreadingMixIn come un attributo che indica \"se il server deve attendere la terminazione del thread\".\nIn linea con quanto descritto sopra, Aymeric ha detto quanto segue sul ticket #20238, sembrando preannunciare problemi come questo:\n```\nmore threading will certainly create more race conditions on shutdown, especially when it comes to the database connections — it's taken months to eliminate most from LiveServerTestCase, and I'm sure there are still some left,\n```",
    "hints_text": "Mi chiedo se questo problema sia dovuto al fatto che ThreadingMixIn crea un nuovo thread per ogni richiesta, ma questi thread non chiudono le connessioni al database al termine, ad esempio come fa LiveServerThread. Ecco il codice in CPython per `process_request()` e `server_close()` di ThreadingMixIn: ​https://github.com/python/cpython/blob/v3.9.1/Lib/socketserver.py#L656-L674 E qui c'è il codice per `LiveServerThread.run()` di Django, che chiude le connessioni (modifica apportata per #22414): ​https://github.com/django/django/blob/3f8979e37b6c498101d09a583ccc521d7f2879e5/django/test/testcases.py#L1460-L1484 (Mi chiedo se sia anche un problema che ThreadingMixIn non implementi la stessa logica di condivisione dei thread di LiveServerThread, necessaria per SQLite.)\n\nEcco alcune informazioni aggiuntive che ho raccolto. Per ogni richiesta, `ThreadedWSGIServer` di Django chiama il suo metodo `process_request()`, che risiede in `ThreadingMixIn` di CPython. In questo metodo, `ThreadingMixIn` crea un nuovo thread con `target=self.process_request_thread`. Il metodo `ThreadingMixIn.process_request_thread()` è così strutturato:\n\n```python\ndef process_request_thread(self, request, client_address):\n    \"\"\"Same as in BaseServer but as a thread. In addition, exception handling is done here. \"\"\"\n    try:\n        self.finish_request(request, client_address)\n    except Exception:\n        self.handle_error(request, client_address)\n    finally:\n        self.shutdown_request(request)\n```\n\nIl metodo `shutdown_request()` ha la sua implementazione all'interno di `socketserver.TCPServer` di CPython. Questo metodo è strutturato come segue (inclusa `close_request()`):\n\n```python\ndef shutdown_request(self, request):\n    \"\"\"Called to shutdown and close an individual request.\"\"\"\n    try:\n        #explicitly shutdown. socket.close() merely releases\n        #the socket and waits for GC to perform the actual close.\n        request.shutdown(socket.SHUT_WR)\n    except OSError:\n        pass  #some platforms may raise ENOTCONN here\n    self.close_request(request)\n\ndef close_request(self, request):\n    \"\"\"Called to clean up an individual request.\"\"\"\n    request.close()\n```\n\nQuindi, se lo desideriamo, le connessioni al database potrebbero essere chiuse all'interno di `close_request()`. Ciò potrebbe essere fatto aggiungendo un'implementazione adatta a `ThreadedWSGIServer`, sovrascrivendo così `socketserver.TCPServer.close_request()`. La condivisione dei thread necessaria per SQLite potrebbe probabilmente essere gestita aggiungendo override di metodo appropriati a `ThreadedWSGIServer`.\n\nA proposito, poiché `LiveServerThread` attualmente crea il suo server con una classe codificata in modo rigido come segue:\n\n```python\ndef _create_server(self):\n    return ThreadedWSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n```\n\nsarebbe più facile per gli utenti se invece ottenesse la classe da un attributo di classe, ad esempio:\n\n```python\ndef _create_server(self):\n    return self.http_server_class((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n```\n\nCiò consentirebbe alle persone di modificare `ThreadedWSGIServer` più facilmente, se necessario. Questo è simile a come `LiveServerTestCase` ha un attributo di classe `server_thread_class` attualmente impostato su `LiveServerThread` (con l'attributo aggiunto in #26976).\n\nNon ho riprodotto personalmente, ma accetto sulla base dell'analisi molto dettagliata.\n\nPer tua informazione, vedo che la mancanza della logica di condivisione dei thread SQLite che ho menzionato sopra è stata precedentemente segnalata qui: #29062 (ma senza un'analisi della causa radice / proposta di correzione). Farò sapere a quell'issue le mie scoperte qui.\n\nSembra che la correzione di questo problema possa essere semplice come aggiungere il seguente metodo a `ThreadedWSGIServer` di Django (codice: ​https://github.com/django/django/blob/50a5f8840fa564dcefdb1fa5c58f06fcd472ee70/django/core/servers/basehttp.py#L80-L82) (sembra che stia risolvendo il problema per me):\n\n```python\nfrom django.db import connections\n\ndef close_request(self, request):\n    \"\"\"Called to clean up an individual request.\"\"\"\n    connections.close_all()\n    super().close_request(request)\n```\n\nLa documentazione del modulo `socketserver` di CPython conferma che il metodo è destinato a essere sovrascritto: ​https://github.com/python/cpython/blob/v3.9.1/Lib/socketserver.py#L165-L175\n\nHo appena inviato la PR #14002 per consentire alle persone di personalizzare più facilmente `ThreadedWSGIServer` utilizzato da `LiveServerThread`. Questo è ciò che ho suggerito sopra alla fine di questo commento. Ciò renderà più facile per le persone implementare soluzioni alternative ogni volta che vengono trovati problemi come quello attuale con il server utilizzato da `LiveServerThread`. (Questa non è la prima volta che il server utilizzato ha dovuto essere modificato.)\n\nIn 91c243f8: Refs #32416 -- Aggiunto `LiveServerThread.server_class` per semplificare la sottoclasse.\n\nHo pubblicato una PR per questo: ​https://github.com/django/django/pull/14011",
    "created_at": "2021-02-15T06:15:21Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"test_live_server_url_is_class_property (servers.tests.LiveServerAddress)\", \"Data written to the database by a view can be read.\", \"Fixtures are properly loaded and visible to the live server thread.\", \"test_check_model_instance_from_subview (servers.tests.LiveServerThreadedTests)\", \"test_view_calls_subview (servers.tests.LiveServerThreadedTests)\", \"test_404 (servers.tests.LiveServerViews)\", \"A HTTP 1.1 server is supposed to support keep-alive. Since our\", \"test_environ (servers.tests.LiveServerViews)\", \"test_keep_alive_connection_clears_previous_request_data (servers.tests.LiveServerViews)\", \"See `test_closes_connection_without_content_length` for details. This\", \"test_media_files (servers.tests.LiveServerViews)\", \"LiveServerTestCase reports a 404 status code when HTTP client\", \"Launched server serves with HTTP 1.1.\", \"test_static_files (servers.tests.LiveServerViews)\", \"test_view (servers.tests.LiveServerViews)\", \"Each LiveServerTestCase binds to a unique port or fails to start a\", \"LiveServerTestCase.port customizes the server's port.\"]",
    "PASS_TO_PASS": "[\"test_set_up_class (servers.tests.LiveServerTestCaseSetupTest)\", \"Contrast to\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-8548",
    "base_commit": "dd1615c59dc6fff633e27dbb3861f2d27e1fb976",
    "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1584,7 +1584,7 @@ def add_directive_header(self, sig: str) -> None:\n                 self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n-        members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)\n+        members = get_class_members(self.object, self.objpath, self.get_attr)\n         if not want_all:\n             if not self.options.members:\n                 return False, []  # type: ignore\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -14,7 +14,7 @@\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias\n-from sphinx.pycode import ModuleAnalyzer\n+from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import logging\n from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,\n                                  safe_getattr)\n@@ -251,8 +251,8 @@ def __init__(self, cls: Any, name: str, value: Any, docstring: Optional[str] = N\n         self.docstring = docstring\n \n \n-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n-                      analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:\n+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n+                      ) -> Dict[str, ClassAttribute]:\n     \"\"\"Get members and attributes of target class.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n@@ -297,23 +297,31 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             continue\n \n-    # annotation only member (ex. attr: int)\n-    for cls in getmro(subject):\n-        try:\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n-        except AttributeError:\n-            pass\n-\n-    if analyzer:\n-        # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n-        for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n-                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n-                                               '\\n'.join(docstring))\n+    try:\n+        for cls in getmro(subject):\n+            # annotation only member (ex. attr: int)\n+            try:\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n+            except AttributeError:\n+                pass\n+\n+            # append instance attributes (cf. self.attr1) if analyzer knows\n+            try:\n+                modname = safe_getattr(cls, '__module__')\n+                qualname = safe_getattr(cls, '__qualname__')\n+                analyzer = ModuleAnalyzer.for_module(modname)\n+                analyzer.analyze()\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if ns == qualname and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except (AttributeError, PycodeError):\n+                pass\n+    except AttributeError:\n+        pass\n \n     return members\n \n",
    "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/instance_variable.py b/tests/roots/test-ext-autodoc/target/instance_variable.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/instance_variable.py\n@@ -0,0 +1,10 @@\n+class Foo:\n+    def __init__(self):\n+        self.attr1 = None  #: docstring foo\n+        self.attr2 = None  #: docstring foo\n+\n+\n+class Bar(Foo):\n+    def __init__(self):\n+        self.attr2 = None  #: docstring bar\n+        self.attr3 = None  #: docstring bar\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -51,6 +51,61 @@ def test_classes(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_instance_variable(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_instance_variable(app):\n+    options = {'members': True,\n+               'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring foo',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
    "problem_statement": "`autodoc` non funziona per i membri ereditati.\n`autodoc` cerca una docstring memorizzata nella cache utilizzando `(namespace, attrname)` come chiave di ricerca, ma non controlla il `namespace` della classe base.\n\n---\n- Bitbucket: https://bitbucket.org/birkenfeld/sphinx/issue/741\n- Segnalato originariamente da: Anonimo\n- Creato originariamente il: 2011-08-02T17:05:58.754",
    "hints_text": "_De [mitar](https://bitbucket.org/mitar) el 2012-01-07 18:21:47+00:00_\n\nParece que {{{find_attr_doc}}} tampoco encuentra los atributos heredados.\n\n_De [mitar](https://bitbucket.org/mitar) el 2012-01-07 20:04:22+00:00_\n\nEl problema también es que el analizador de cadenas de documentación de atributos solo analiza un módulo. Debería analizar los módulos de todas las clases padre y combinar todo.\n\n_De Jon Waltman el 2012-11-30 15:14:18+00:00_\n\nEl problema #1048 fue marcado como duplicado de este problema.\n\nActualmente estoy afectado por este problema en la versión 1.2.3. https://github.com/sphinx-doc/sphinx/issues/2233 me impide trabajar con `1.3.x`. ¿Hay alguna solución alternativa que recomiendes?\n\n¿Hay alguna esperanza de que esto se solucione o de encontrar una solución alternativa? Como se mencionó en #1048, incluso usar autoattribute no funciona.\n\nTambién me estoy encontrando con esto. Por ahora, estoy duplicando manualmente las cadenas de documentación, pero sería genial si `:inherited-members:` funcionara.\n\nNo estoy familiarizado con la base de código en absoluto, pero si alguien está dispuesto a guiarme, puedo intentar escribir una solución.\n\n¿Alguna novedad sobre esta característica/corrección de errores?\nTambién estoy esperando una solución para esto, por si sirve.\nNo entiendo este problema. ¿Alguien podría darme un ejemplo? Intentaré solucionarlo si es posible.\n@tk0miya Aquí hay un ejemplo de proyecto muy simple: [sphinx-example.tar.gz](https://github.com/sphinx-doc/sphinx/files/2753140/sphinx-example.tar.gz).\n\n```python\nclass Base:\n    \"\"\"La clase base.\"\"\"\n\n    #: Un atributo base.\n    ham = True\n\n    def eggs(self):\n        \"\"\"Un método base.\"\"\"\n\n\nclass Inherited(Base):\n    \"\"\"La subclase.\"\"\"\n\n    #: Un atributo local.\n    foo = 3\n\n    def bar(self):\n        \"\"\"Un método local.\"\"\"\n```\n\n```rst\n.. autoclass:: example.Inherited\n    :inherited-members:\n```\n\nEl atributo `Base.ham` no aparece en la documentación de `Inherited`. Sin embargo, el método heredado `Base.eggs` se muestra.\nEn mi caso, ham es un atributo de instancia y quiero que se documente automáticamente, pero no funciona.\n\n```python\nclass Base:\n    \"\"\"La clase base.\"\"\"\n\n    def __init__(self):\n        #: Un atributo base.\n        self.ham = True\n\n    def eggs(self):\n        \"\"\"Un método base.\"\"\"\n```\n\nNo estoy seguro de que sea técnicamente posible que Sphinx documente automáticamente `self.ham`. Según entiendo, Sphinx encuentra los atributos mediante inspección de código, no instanciando realmente la clase. Y para detectar el atributo de instancia ham, parece que necesitas instanciar la clase Base.\nParece que la última versión de Sphinx (2.0.1) es capaz de procesar atributos heredados. Por otro lado, los atributos de instancia heredados aún no están compatibles (registrado como #6415 ahora).\nAsí que creo que este problema se ha resuelto ahora.\n\nEstoy cerrando esto. Por favor, avísame si sigues teniendo problemas.\n\nGracias,\n@tk0miya Acabo de probar el ejemplo que publiqué anteriormente con Sphinx 2.1.0 y este problema todavía ocurre. https://github.com/sphinx-doc/sphinx/issues/741#issuecomment-453832459\n\n#6415 y el comentario de @Dmitrii-I son diferentes, pero posiblemente relacionados.\nGracias por el comentario. Mi error. Acabo de reabrirlo. Podría probar la opción `:undoc-members:` en las pruebas...\n\nDentro de autodoc, la cadena de documentación basada en comentarios está fuertemente acoplada con su clase. Por lo tanto, autodoc considera que la cadena de documentación para `Base.ham` no está relacionada con `Inherited.ham`. Como resultado, `Inherited.ham` se detecta como una variable no documentada.\n\nIntentaré solucionar esto de nuevo.\n\nGracias,",
    "created_at": "2020-12-17T13:46:32Z",
    "version": "3.4",
    "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable\"]",
    "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_ext_autodoc_autoclass.py::test_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_ext_autodoc_autoclass.py::test_slots_attribute\", \"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type\"]",
    "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14631",
    "base_commit": "84400d2e9db7c51fee4e9bb04c028f665b8e7624",
    "patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n \n+from django.core.exceptions import ValidationError\n from django.forms.utils import flatatt, pretty_name\n from django.forms.widgets import Textarea, TextInput\n from django.utils.functional import cached_property\n@@ -118,7 +119,7 @@ def data(self):\n         \"\"\"\n         Return the data for this BoundField, or None if it wasn't given.\n         \"\"\"\n-        return self.form._field_data_value(self.field, self.html_name)\n+        return self.form._widget_data_value(self.field.widget, self.html_name)\n \n     def value(self):\n         \"\"\"\n@@ -130,6 +131,22 @@ def value(self):\n             data = self.field.bound_data(self.data, data)\n         return self.field.prepare_value(data)\n \n+    def _has_changed(self):\n+        field = self.field\n+        if field.show_hidden_initial:\n+            hidden_widget = field.hidden_widget()\n+            initial_value = self.form._widget_data_value(\n+                hidden_widget, self.html_initial_name,\n+            )\n+            try:\n+                initial_value = field.to_python(initial_value)\n+            except ValidationError:\n+                # Always assume data has changed if validation fails.\n+                return True\n+        else:\n+            initial_value = self.initial\n+        return field.has_changed(initial_value, self.data)\n+\n     def label_tag(self, contents=None, attrs=None, label_suffix=None):\n         \"\"\"\n         Wrap the given contents in a <label>, if the field has an ID attribute.\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -143,7 +143,13 @@ def __repr__(self):\n             'fields': ';'.join(self.fields),\n         }\n \n+    def _bound_items(self):\n+        \"\"\"Yield (name, bf) pairs, where bf is a BoundField object.\"\"\"\n+        for name in self.fields:\n+            yield name, self[name]\n+\n     def __iter__(self):\n+        \"\"\"Yield the form's fields as BoundField objects.\"\"\"\n         for name in self.fields:\n             yield self[name]\n \n@@ -197,18 +203,15 @@ def _widget_data_value(self, widget, html_name):\n         # widgets split data over several HTML fields.\n         return widget.value_from_datadict(self.data, self.files, html_name)\n \n-    def _field_data_value(self, field, html_name):\n-        return self._widget_data_value(field.widget, html_name)\n-\n     def _html_output(self, normal_row, error_row, row_ender, help_text_html, errors_on_separate_row):\n         \"Output HTML. Used by as_table(), as_ul(), as_p().\"\n         # Errors that should be displayed above all fields.\n         top_errors = self.non_field_errors().copy()\n         output, hidden_fields = [], []\n \n-        for name, field in self.fields.items():\n+        for name, bf in self._bound_items():\n+            field = bf.field\n             html_class_attr = ''\n-            bf = self[name]\n             bf_errors = self.error_class(bf.errors)\n             if bf.is_hidden:\n                 if bf_errors:\n@@ -387,15 +390,12 @@ def full_clean(self):\n         self._post_clean()\n \n     def _clean_fields(self):\n-        for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n-            else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+        for name, bf in self._bound_items():\n+            field = bf.field\n+            value = bf.initial if field.disabled else bf.data\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                    value = field.clean(value, bf.initial)\n                 else:\n                     value = field.clean(value)\n                 self.cleaned_data[name] = value\n@@ -436,27 +436,7 @@ def has_changed(self):\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf._has_changed()]\n \n     @property\n     def media(self):\n",
    "test_patch": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2112,15 +2112,47 @@ class DateTimeForm(Form):\n         self.assertEqual(unbound['hi_without_microsec'].value(), now_no_ms)\n         self.assertEqual(unbound['ti_without_microsec'].value(), now_no_ms)\n \n-    def test_datetime_clean_initial_callable_disabled(self):\n-        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+    def get_datetime_form_with_callable_initial(self, disabled, microseconds=0):\n+        class FakeTime:\n+            def __init__(self):\n+                self.elapsed_seconds = 0\n+\n+            def now(self):\n+                self.elapsed_seconds += 1\n+                return datetime.datetime(\n+                    2006, 10, 25, 14, 30, 45 + self.elapsed_seconds,\n+                    microseconds,\n+                )\n \n         class DateTimeForm(forms.Form):\n-            dt = DateTimeField(initial=lambda: now, disabled=True)\n+            dt = DateTimeField(initial=FakeTime().now, disabled=disabled)\n+\n+        return DateTimeForm({})\n+\n+    def test_datetime_clean_disabled_callable_initial_microseconds(self):\n+        \"\"\"\n+        Cleaning a form with a disabled DateTimeField and callable initial\n+        removes microseconds.\n+        \"\"\"\n+        form = self.get_datetime_form_with_callable_initial(\n+            disabled=True, microseconds=123456,\n+        )\n+        self.assertEqual(form.errors, {})\n+        self.assertEqual(form.cleaned_data, {\n+            'dt': datetime.datetime(2006, 10, 25, 14, 30, 46),\n+        })\n \n-        form = DateTimeForm({})\n+    def test_datetime_clean_disabled_callable_initial_bound_field(self):\n+        \"\"\"\n+        The cleaned value for a form with a disabled DateTimeField and callable\n+        initial matches the bound field's cached initial value.\n+        \"\"\"\n+        form = self.get_datetime_form_with_callable_initial(disabled=True)\n         self.assertEqual(form.errors, {})\n-        self.assertEqual(form.cleaned_data, {'dt': now})\n+        cleaned = form.cleaned_data['dt']\n+        self.assertEqual(cleaned, datetime.datetime(2006, 10, 25, 14, 30, 46))\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n \n     def test_datetime_changed_data_callable_with_microseconds(self):\n         class DateTimeForm(forms.Form):\n",
    "problem_statement": "BaseForm's _clean_fields() e changed_data dovrebbero accedere ai valori tramite BoundField\nDescrizione\n\n(ultima modifica di Chris Jerdonek)\n\nMentre lavoravo su #32917, ho notato che ​BaseForm._clean_fields() e ​BaseForm.changed_data non accedono attualmente ai loro valori tramite un oggetto BoundField. Sarebbe meglio per la coerenza se lo facessero, e per ridurre il numero di percorsi di codice.\nUna conseguenza del codice attuale è che form._clean_fields() può restituire un valore diverso da form[name].initial quando dovrebbero essere uguali. Questo caso è quasi, ma non del tutto, coperto da ​test_datetime_clean_initial_callable_disabled() (il test può essere modificato per coprire questo caso).\nCome parte di questo ticket e in linea con l'accesso ai dati tramite gli oggetti BoundField, ho notato che il codice sarebbe anche più semplice se la logica per campo di changed_data() fosse spostata in un metodo della classe BoundField. Potrebbe essere chiamato qualcosa come `bf.did_change()`. Questo sarebbe più appropriato perché se i dati del modulo sono cambiati per un campo è una proprietà del suo BoundField (poiché dipende dai dati sottostanti del modulo), rispetto al campo non vincolato. Con questa modifica, il metodo potrebbe passare dalle attuali ~20 righe a qualcosa di simile a questo:\n\n```python\n@cached_property\ndef changed_data(self):\n    return [name for name, bf in self._bound_items() if bf._did_change()]\n```\n\nUna modifica simile potrebbe essere apportata a BaseForm._clean_fields().",
    "hints_text": "Ecco come creare il test fallito che ho menzionato sopra (approssimativamente):\n\n```python\ndef test_datetime_clean_initial_callable_disabled(self):\n    - now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n    - class DateTimeForm(forms.Form):\n    -     dt = DateTimeField(initial=lambda: now, disabled=True)\n    +     dt = DateTimeField(initial=datetime.datetime.now, disabled=True)\n    form = DateTimeForm({})\n    self.assertEqual(form.errors, {})\n    - self.assertEqual(form.cleaned_data, {'dt': now})\n    + cleaned_value = form.cleaned_data['dt']\n    + bf = form['dt']\n    + self.assertEqual(cleaned_value, bf.initial)\n```\n\nCiao Chris, questo è interessante e ha senso. :) — Penso che dovremmo dare un'occhiata a questo, sì. Grazie!",
    "created_at": "2021-07-13T09:16:48Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"The cleaned value for a form with a disabled DateTimeField and callable\", \"Cleaning a form with a disabled DateTimeField and callable initial\"]",
    "PASS_TO_PASS": "[\"test_attribute_class (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_override (forms_tests.tests.test_forms.RendererTests)\", \"test_default (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_class (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_accessing_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_on_form_and_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_true (forms_tests.tests.test_forms.FormsTestCase)\", \"BaseForm.__repr__() should contain some basic information about the\", \"BaseForm.__repr__() shouldn't trigger the form validation.\", \"test_basic_processing_in_view (forms_tests.tests.test_forms.FormsTestCase)\", \"BoundField without any choices (subwidgets) evaluates to True.\", \"test_boundfield_css_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_empty_label (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"If an id is provided in `Widget.attrs`, it overrides the generated ID,\", \"Multiple calls to BoundField().value() in an unbound form should return\", \"test_boundfield_invalid_index (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag_custom_widget_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"If a widget has no id, label_tag just returns the text with no\", \"test_boundfield_slice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_value_disabled_callable_initial (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_widget_type (forms_tests.tests.test_forms.FormsTestCase)\", \"test_callable_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changed_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_in_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_nothing_returned (forms_tests.tests.test_forms.FormsTestCase)\", \"test_checkbox_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_class_prefix (forms_tests.tests.test_forms.FormsTestCase)\", \"test_cleaned_data_only_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_custom_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"Form fields can customize what is considered as an empty value\", \"test_datetime_changed_data_callable_with_microseconds (forms_tests.tests.test_forms.FormsTestCase)\", \"test_dynamic_construction (forms_tests.tests.test_forms.FormsTestCase)\", \"test_dynamic_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_data_files_multi_value_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted_and_use_required_attribute (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_querydict_args (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"#21962 - adding html escape flag to ErrorDict\", \"test_error_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_html_required_html_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_has_one_class_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_not_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_hidden_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_non_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_errorlist_override (forms_tests.tests.test_forms.FormsTestCase)\", \"test_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_explicit_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"test_extracting_hidden_and_visible (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_deep_copy_error_messages (forms_tests.tests.test_forms.FormsTestCase)\", \"#5749 - `field_name` may be used as a key in _html_output().\", \"BaseForm._html_output() should merge all the hidden input fields and\", \"test_field_named_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"`css_classes` may be used as a key in _html_output() (class comes\", \"`css_classes` may be used as a key in _html_output() (empty classes).\", \"test_filefield_initial_callable (forms_tests.tests.test_forms.FormsTestCase)\", \"test_filefield_with_fileinput_required (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_html_attributes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_disabled_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_noniterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_choices (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_file_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_multiple_choice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_null_boolean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_prefixes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_radio (forms_tests.tests.test_forms.FormsTestCase)\", \"test_get_initial_for_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_has_error (forms_tests.tests.test_forms.FormsTestCase)\", \"test_help_text (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_initial_gets_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_widget (forms_tests.tests.test_forms.FormsTestCase)\", \"test_html_output_with_hidden_input_field_errors (forms_tests.tests.test_forms.FormsTestCase)\", \"test_html_safe (forms_tests.tests.test_forms.FormsTestCase)\", \"test_id_on_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_datetime_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_iterable_boundfield_select (forms_tests.tests.test_forms.FormsTestCase)\", \"#17922 - required_css_class is added to the label_tag() of required fields.\", \"test_label_split_datetime_not_displayed (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_suffix (forms_tests.tests.test_forms.FormsTestCase)\", \"BoundField label_suffix (if provided) overrides Form label_suffix\", \"test_multipart_encoded_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_checkbox (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_list_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_hidden (forms_tests.tests.test_forms.FormsTestCase)\", \"#19298 -- MultiValueField needs to override the default as it needs\", \"test_multivalue_field_validation (forms_tests.tests.test_forms.FormsTestCase)\", \"#23674 -- invalid initial data should not break form.changed_data()\", \"test_multivalue_optional_subfields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_only_hidden_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_optional_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_specifying_labels (forms_tests.tests.test_forms.FormsTestCase)\", \"test_subclassing_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_templates_with_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unbound_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unicode_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_update_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_true (forms_tests.tests.test_forms.FormsTestCase)\", \"test_validating_multiple_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"The list of form field validators can be modified without polluting\", \"test_various_boolean_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_widget_output (forms_tests.tests.test_forms.FormsTestCase)\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-12489",
    "base_commit": "aa9780761ad8c3c0f68beeef3a0ce5caac9e100b",
    "patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -166,6 +166,7 @@ def _af_invert(a):\n         inv_form[ai] = i\n     return inv_form\n \n+\n def _af_pow(a, n):\n     \"\"\"\n     Routine for finding powers of a permutation.\n@@ -210,6 +211,7 @@ def _af_pow(a, n):\n                 n = n // 2\n     return b\n \n+\n def _af_commutes_with(a, b):\n     \"\"\"\n     Checks if the two permutations with array forms\n@@ -461,6 +463,7 @@ def size(self):\n     def copy(self):\n         return Cycle(self)\n \n+\n class Permutation(Basic):\n     \"\"\"\n     A permutation, alternatively known as an 'arrangement number' or 'ordering'\n@@ -857,19 +860,19 @@ def __new__(cls, *args, **kwargs):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:  # c\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n-            if isinstance(a, Perm):  # g\n+            if isinstance(a, cls):  # g\n                 if size is None or size == a.size:\n                     return a\n-                return Perm(a.array_form, size=size)\n+                return cls(a.array_form, size=size)\n             if isinstance(a, Cycle):  # f\n-                return _af_new(a.list(size))\n+                return cls._af_new(a.list(size))\n             if not is_sequence(a):  # b\n-                return _af_new(list(range(a + 1)))\n+                return cls._af_new(list(range(a + 1)))\n             if has_variety(is_sequence(ai) for ai in a):\n                 ok = False\n         else:\n@@ -878,7 +881,6 @@ def __new__(cls, *args, **kwargs):\n             raise ValueError(\"Permutation argument must be a list of ints, \"\n                              \"a list of lists, Permutation or Cycle.\")\n \n-\n         # safe to assume args are valid; this also makes a copy\n         # of the args\n         args = list(args[0])\n@@ -922,14 +924,11 @@ def __new__(cls, *args, **kwargs):\n             # might split a cycle and lead to an invalid aform\n             # but do allow the permutation size to be increased\n             aform.extend(list(range(len(aform), size)))\n-        size = len(aform)\n-        obj = Basic.__new__(cls, aform)\n-        obj._array_form = aform\n-        obj._size = size\n-        return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+        return cls._af_new(aform)\n+\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -948,7 +947,7 @@ def _af_new(perm):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n@@ -1163,7 +1162,7 @@ def __add__(self, other):\n \n         \"\"\"\n         rank = (self.rank() + other) % self.cardinality\n-        rv = Perm.unrank_lex(self.size, rank)\n+        rv = self.unrank_lex(self.size, rank)\n         rv._rank = rank\n         return rv\n \n@@ -1223,14 +1222,14 @@ def rmul(*args):\n             rv = args[i]*rv\n         return rv\n \n-    @staticmethod\n-    def rmul_with_af(*args):\n+    @classmethod\n+    def rmul_with_af(cls, *args):\n         \"\"\"\n         same as rmul, but the elements of args are Permutation objects\n         which have _array_form\n         \"\"\"\n         a = [x._array_form for x in args]\n-        rv = _af_new(_af_rmuln(*a))\n+        rv = cls._af_new(_af_rmuln(*a))\n         return rv\n \n     def mul_inv(self, other):\n@@ -1239,11 +1238,12 @@ def mul_inv(self, other):\n         \"\"\"\n         a = _af_invert(self._array_form)\n         b = other._array_form\n-        return _af_new(_af_rmul(a, b))\n+        return self._af_new(_af_rmul(a, b))\n \n     def __rmul__(self, other):\n-        \"\"\"This is needed to coerse other to Permutation in rmul.\"\"\"\n-        return Perm(other)*self\n+        \"\"\"This is needed to coerce other to Permutation in rmul.\"\"\"\n+        cls = type(self)\n+        return cls(other)*self\n \n     def __mul__(self, other):\n         \"\"\"\n@@ -1304,7 +1304,7 @@ def __mul__(self, other):\n         else:\n             b.extend(list(range(len(b), len(a))))\n             perm = [b[i] for i in a] + b[len(a):]\n-        return _af_new(perm)\n+        return self._af_new(perm)\n \n     def commutes_with(self, other):\n         \"\"\"\n@@ -1341,11 +1341,11 @@ def __pow__(self, n):\n         >>> p**4\n         Permutation([0, 1, 2, 3])\n         \"\"\"\n-        if type(n) == Perm:\n+        if isinstance(n, Permutation):\n             raise NotImplementedError(\n                 'p**p is not defined; do you mean p^p (conjugate)?')\n         n = int(n)\n-        return _af_new(_af_pow(self.array_form, n))\n+        return self._af_new(_af_pow(self.array_form, n))\n \n     def __rxor__(self, i):\n         \"\"\"Return self(i) when ``i`` is an int.\n@@ -1440,7 +1440,7 @@ def __xor__(self, h):\n         p = self._array_form\n         for i in range(self.size):\n             a[h[i]] = h[p[i]]\n-        return _af_new(a)\n+        return self._af_new(a)\n \n     def transpositions(self):\n         \"\"\"\n@@ -1523,7 +1523,7 @@ def __invert__(self):\n         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])\n         True\n         \"\"\"\n-        return _af_new(_af_invert(self._array_form))\n+        return self._af_new(_af_invert(self._array_form))\n \n     def __iter__(self):\n         \"\"\"Yield elements from array form.\n@@ -1633,7 +1633,7 @@ def next_lex(self):\n                 perm[j], perm[i] = perm[i], perm[j]\n                 i += 1\n                 j -= 1\n-        return _af_new(perm)\n+        return self._af_new(perm)\n \n     @classmethod\n     def unrank_nonlex(self, n, r):\n@@ -1665,7 +1665,7 @@ def _unrank1(n, r, a):\n         n = int(n)\n         r = r % ifac(n)\n         _unrank1(n, r, id_perm)\n-        return _af_new(id_perm)\n+        return self._af_new(id_perm)\n \n     def rank_nonlex(self, inv_perm=None):\n         \"\"\"\n@@ -1728,7 +1728,7 @@ def next_nonlex(self):\n         r = self.rank_nonlex()\n         if r == ifac(self.size) - 1:\n             return None\n-        return Perm.unrank_nonlex(self.size, r + 1)\n+        return self.unrank_nonlex(self.size, r + 1)\n \n     def rank(self):\n         \"\"\"\n@@ -2129,7 +2129,7 @@ def commutator(self, x):\n         invb = [None]*n\n         for i in range(n):\n             invb[b[i]] = i\n-        return _af_new([a[b[inva[i]]] for i in invb])\n+        return self._af_new([a[b[inva[i]]] for i in invb])\n \n     def signature(self):\n         \"\"\"\n@@ -2394,7 +2394,7 @@ def rank_trotterjohnson(self):\n         return rank\n \n     @classmethod\n-    def unrank_trotterjohnson(self, size, rank):\n+    def unrank_trotterjohnson(cls, size, rank):\n         \"\"\"\n         Trotter Johnson permutation unranking. See [4] section 2.4.\n \n@@ -2427,7 +2427,7 @@ def unrank_trotterjohnson(self, size, rank):\n                     perm[i] = perm[i - 1]\n                 perm[k] = j - 1\n             r2 = r1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     def next_trotterjohnson(self):\n         \"\"\"\n@@ -2481,7 +2481,7 @@ def next_trotterjohnson(self):\n                     done = True\n         if m == 0:\n             return None\n-        return _af_new(pi)\n+        return self._af_new(pi)\n \n     def get_precedence_matrix(self):\n         \"\"\"\n@@ -2665,7 +2665,7 @@ def get_positional_distance(self, other):\n         return sum([abs(a[i] - b[i]) for i in range(len(a))])\n \n     @classmethod\n-    def josephus(self, m, n, s=1):\n+    def josephus(cls, m, n, s=1):\n         \"\"\"Return as a permutation the shuffling of range(n) using the Josephus\n         scheme in which every m-th item is selected until all have been chosen.\n         The returned permutation has elements listed by the order in which they\n@@ -2711,10 +2711,10 @@ def josephus(self, m, n, s=1):\n                 Q.append(Q.popleft())\n             perm.append(Q.popleft())\n         perm.extend(list(Q))\n-        return Perm(perm)\n+        return cls(perm)\n \n     @classmethod\n-    def from_inversion_vector(self, inversion):\n+    def from_inversion_vector(cls, inversion):\n         \"\"\"\n         Calculates the permutation from the inversion vector.\n \n@@ -2738,10 +2738,10 @@ def from_inversion_vector(self, inversion):\n         except IndexError:\n             raise ValueError(\"The inversion vector is not valid.\")\n         perm.extend(N)\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     @classmethod\n-    def random(self, n):\n+    def random(cls, n):\n         \"\"\"\n         Generates a random permutation of length ``n``.\n \n@@ -2757,10 +2757,10 @@ def random(self, n):\n         \"\"\"\n         perm_array = list(range(n))\n         random.shuffle(perm_array)\n-        return _af_new(perm_array)\n+        return cls._af_new(perm_array)\n \n     @classmethod\n-    def unrank_lex(self, size, rank):\n+    def unrank_lex(cls, size, rank):\n         \"\"\"\n         Lexicographic permutation unranking.\n \n@@ -2791,7 +2791,7 @@ def unrank_lex(self, size, rank):\n                 if perm_array[j] > d - 1:\n                     perm_array[j] += 1\n             psize = new_psize\n-        return _af_new(perm_array)\n+        return cls._af_new(perm_array)\n \n     # global flag to control how permutations are printed\n     # when True, Permutation([0, 2, 1, 3]) -> Cycle(1, 2)\n",
    "test_patch": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -217,6 +217,52 @@ def test_Permutation():\n     assert b.cycle_structure == {2: 1, 3: 1, 1: 2}\n \n \n+def test_Permutation_subclassing():\n+    # Subclass that adds permutation application on iterables\n+    class CustomPermutation(Permutation):\n+        def __call__(self, *i):\n+            try:\n+                return super(CustomPermutation, self).__call__(*i)\n+            except TypeError:\n+                pass\n+\n+            try:\n+                perm_obj = i[0]\n+                return [self._array_form[j] for j in perm_obj]\n+            except Exception:\n+                raise TypeError('unrecognized argument')\n+\n+        def __eq__(self, other):\n+            if isinstance(other, Permutation):\n+                return self._hashable_content() == other._hashable_content()\n+            else:\n+                return super(CustomPermutation, self).__eq__(other)\n+\n+        def __hash__(self):\n+            return super(CustomPermutation, self).__hash__()\n+\n+    p = CustomPermutation([1, 2, 3, 0])\n+    q = Permutation([1, 2, 3, 0])\n+\n+    assert p == q\n+    raises(TypeError, lambda: q([1, 2]))\n+    assert [2, 3] == p([1, 2])\n+\n+    assert type(p * q) == CustomPermutation\n+    assert type(q * p) == Permutation  # True because q.__mul__(p) is called!\n+\n+    # Run all tests for the Permutation class also on the subclass\n+    def wrapped_test_Permutation():\n+        # Monkeypatch the class definition in the globals\n+        globals()['__Perm'] = globals()['Permutation']\n+        globals()['Permutation'] = CustomPermutation\n+        test_Permutation()\n+        globals()['Permutation'] = globals()['__Perm']  # Restore\n+        del globals()['__Perm']\n+\n+    wrapped_test_Permutation()\n+\n+\n def test_josephus():\n     assert Permutation.josephus(4, 6, 1) == Permutation([3, 1, 0, 2, 5, 4])\n     assert Permutation.josephus(1, 5, 1).is_Identity\n",
    "problem_statement": "`combinatorics.Permutation` non può essere sottoclassata correttamente\nMi sono imbattuto in un problema di sottoclassazione con `combinatorics.Permutation`:\r\nLa creazione dell'oggetto avviene in `Permutation.__new__`, ma internamente viene utilizzata la funzione `_af_new` (che è un riferimento al metodo statico `Permutation._af_new`). Questo metodo alla fine crea l'oggetto chiamando `Basic.__new__(Perm, perm)` (`Perm` è un riferimento a `Permutation`).\r\nAlla fine, questo rende impossibile la sottoclassazione di `Permutation` (a meno di sovrascrivere `Permutation._af_new`, poiché vengono sempre restituiti istanze di `Permutation`).\r\n\r\nUna soluzione elegante sarebbe attenersi ai meccanismi di creazione delle istanze di Python, ovvero utilizzare i metodi di classe dove appropriato (`__new__` è uno di questi) e utilizzare il riferimento obbligatorio alla classe (il primo argomento di un metodo di classe) su cui viene chiamato il metodo per la creazione dell'istanza.\r\n\r\nSono completamente nuovo nello sviluppo di SymPy e ho riscontrato questo problema mentre cercavo di sottoclassare `Permutation`. Pertanto, non sono a conoscenza di eventuali effetti collaterali che la modifica della creazione delle istanze potrebbe avere. (Ho applicato una monkey patch localmente ed eseguito i test, tutti hanno avuto successo.)\r\n\r\nForse c'è una spiegazione coerente sul perché l'implementazione è così com'è e non dovrebbe essere modificata?",
    "hints_text": "Mi sembra che non ci sia una buona spiegazione per l'implementazione scelta. `_af_new` dovrebbe probabilmente essere un `classmethod` con il comando di creazione `Basic.__new__(cls, perm)`. Per favore, testa questa implementazione e invia una PR.",
    "created_at": "2017-04-04T08:12:37Z",
    "version": "1.0",
    "FAIL_TO_PASS": "[\"test_Permutation_subclassing\"]",
    "PASS_TO_PASS": "[\"test_Permutation\", \"test_josephus\", \"test_ranking\", \"test_mul\", \"test_args\", \"test_Cycle\", \"test_from_sequence\", \"test_printing_cyclic\"]",
    "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-9461",
    "base_commit": "939c7bb7ff7c53a4d27df067cea637540f0e1dad",
    "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -852,6 +852,7 @@ class PyProperty(PyObject):\n     option_spec = PyObject.option_spec.copy()\n     option_spec.update({\n         'abstractmethod': directives.flag,\n+        'classmethod': directives.flag,\n         'type': directives.unchanged,\n     })\n \n@@ -865,10 +866,13 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n         return fullname, prefix\n \n     def get_signature_prefix(self, sig: str) -> str:\n-        prefix = ['property']\n+        prefix = []\n         if 'abstractmethod' in self.options:\n-            prefix.insert(0, 'abstract')\n+            prefix.append('abstract')\n+        if 'classmethod' in self.options:\n+            prefix.append('class')\n \n+        prefix.append('property')\n         return ' '.join(prefix) + ' '\n \n     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -718,7 +718,7 @@ def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n                 isattr = False\n \n             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,\n-                         self.parent, self.object_name)\n+                         self.object, membername)\n             if not isinstance(doc, str):\n                 # Ignore non-string __doc__\n                 doc = None\n@@ -2661,7 +2661,32 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        if isinstance(parent, ClassDocumenter):\n+            if inspect.isproperty(member):\n+                return True\n+            else:\n+                __dict__ = safe_getattr(parent.object, '__dict__', {})\n+                obj = __dict__.get(membername)\n+                return isinstance(obj, classmethod) and inspect.isproperty(obj.__func__)\n+        else:\n+            return False\n+\n+    def import_object(self, raiseerror: bool = False) -> bool:\n+        \"\"\"Check the exisitence of uninitialized instance attribute when failed to import\n+        the attribute.\"\"\"\n+        ret = super().import_object(raiseerror)\n+        if ret and not inspect.isproperty(self.object):\n+            __dict__ = safe_getattr(self.parent, '__dict__', {})\n+            obj = __dict__.get(self.objpath[-1])\n+            if isinstance(obj, classmethod) and inspect.isproperty(obj.__func__):\n+                self.object = obj.__func__\n+                self.isclassmethod = True\n+                return True\n+            else:\n+                return False\n+\n+        self.isclassmethod = False\n+        return ret\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n@@ -2675,6 +2700,8 @@ def add_directive_header(self, sig: str) -> None:\n         sourcename = self.get_sourcename()\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if self.isclassmethod:\n+            self.add_line('   :classmethod:', sourcename)\n \n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -245,12 +245,17 @@ def ispartial(obj: Any) -> bool:\n     return isinstance(obj, (partial, partialmethod))\n \n \n-def isclassmethod(obj: Any) -> bool:\n+def isclassmethod(obj: Any, cls: Any = None, name: str = None) -> bool:\n     \"\"\"Check if the object is classmethod.\"\"\"\n     if isinstance(obj, classmethod):\n         return True\n     elif inspect.ismethod(obj) and obj.__self__ is not None and isclass(obj.__self__):\n         return True\n+    elif cls and name:\n+        for basecls in getmro(cls):\n+            meth = basecls.__dict__.get(name)\n+            if meth:\n+                return isclassmethod(meth)\n \n     return False\n \n@@ -837,6 +842,12 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     * inherited docstring\n     * inherited decorated methods\n     \"\"\"\n+    if cls and name and isclassmethod(obj, cls, name):\n+        for basecls in getmro(cls):\n+            meth = basecls.__dict__.get(name)\n+            if meth:\n+                return getdoc(meth.__func__)\n+\n     doc = attrgetter(obj, '__doc__', None)\n     if ispartial(obj) and doc == obj.__class__.__doc__:\n         return getdoc(obj.func)\n",
    "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/properties.py b/tests/roots/test-ext-autodoc/target/properties.py\n--- a/tests/roots/test-ext-autodoc/target/properties.py\n+++ b/tests/roots/test-ext-autodoc/target/properties.py\n@@ -2,5 +2,10 @@ class Foo:\n     \"\"\"docstring\"\"\"\n \n     @property\n-    def prop(self) -> int:\n+    def prop1(self) -> int:\n+        \"\"\"docstring\"\"\"\n+\n+    @classmethod\n+    @property\n+    def prop2(self) -> int:\n         \"\"\"docstring\"\"\"\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -813,8 +813,12 @@ def test_pyattribute(app):\n def test_pyproperty(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n-            \"   .. py:property:: prop\\n\"\n+            \"   .. py:property:: prop1\\n\"\n             \"      :abstractmethod:\\n\"\n+            \"      :type: str\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: prop2\\n\"\n+            \"      :classmethod:\\n\"\n             \"      :type: str\\n\")\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n@@ -822,15 +826,25 @@ def test_pyproperty(app):\n                           [desc, ([desc_signature, ([desc_annotation, \"class \"],\n                                                     [desc_name, \"Class\"])],\n                                   [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n                                                   desc)])]))\n     assert_node(doctree[1][1][0], addnodes.index,\n-                entries=[('single', 'prop (Class property)', 'Class.prop', '', None)])\n+                entries=[('single', 'prop1 (Class property)', 'Class.prop1', '', None)])\n     assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"abstract property \"],\n-                                                     [desc_name, \"prop\"],\n+                                                     [desc_name, \"prop1\"],\n+                                                     [desc_annotation, \": str\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'prop2 (Class property)', 'Class.prop2', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"class property \"],\n+                                                     [desc_name, \"prop2\"],\n                                                      [desc_annotation, \": str\"])],\n                                    [desc_content, ()]))\n-    assert 'Class.prop' in domain.objects\n-    assert domain.objects['Class.prop'] == ('index', 'Class.prop', 'property', False)\n+    assert 'Class.prop1' in domain.objects\n+    assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n+    assert 'Class.prop2' in domain.objects\n+    assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n def test_pydecorator_signature(app):\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -212,12 +212,20 @@ def test_properties(app):\n         '   docstring',\n         '',\n         '',\n-        '   .. py:property:: Foo.prop',\n+        '   .. py:property:: Foo.prop1',\n         '      :module: target.properties',\n         '      :type: int',\n         '',\n         '      docstring',\n         '',\n+        '',\n+        '   .. py:property:: Foo.prop2',\n+        '      :module: target.properties',\n+        '      :classmethod:',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n     ]\n \n \ndiff --git a/tests/test_ext_autodoc_autoproperty.py b/tests/test_ext_autodoc_autoproperty.py\n--- a/tests/test_ext_autodoc_autoproperty.py\n+++ b/tests/test_ext_autodoc_autoproperty.py\n@@ -16,13 +16,28 @@\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_properties(app):\n-    actual = do_autodoc(app, 'property', 'target.properties.Foo.prop')\n+    actual = do_autodoc(app, 'property', 'target.properties.Foo.prop1')\n     assert list(actual) == [\n         '',\n-        '.. py:property:: Foo.prop',\n+        '.. py:property:: Foo.prop1',\n         '   :module: target.properties',\n         '   :type: int',\n         '',\n         '   docstring',\n         '',\n     ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_class_properties(app):\n+    actual = do_autodoc(app, 'property', 'target.properties.Foo.prop2')\n+    assert list(actual) == [\n+        '',\n+        '.. py:property:: Foo.prop2',\n+        '   :module: target.properties',\n+        '   :classmethod:',\n+        '   :type: int',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n",
    "problem_statement": "I metodi decorati con `@classmethod` e `@property` non vengono documentati.\n**MODIFICA:** Il problema sembra essere che `type(BaseClass.baseclass_property)` restituisce `property`, quindi Sphinx può semplicemente cercare `BaseClass.baseclass_property.__doc__`. Tuttavia, `type(BaseClass.baseclass_class_property)` restituisce il tipo dell'oggetto restituito, poiché essenzialmente, un `@classmethod@property` finisce per comportarsi come un attributo di classe. Quindi Sphinx non ha realmente la possibilità di estrarre la stringa di documentazione.\n\n**MODIFICA 2:** Sembra che questo verrà corretto in Python 3.10, cf. https://bugs.python.org/issue43682.\n\n> I metodi statici (`@staticmethod`) e i metodi di classe (`@classmethod`) ora ereditano gli attributi del metodo (`__module__`, `__name__`, `__qualname__`, `__doc__`, `__annotations__`) e hanno un nuovo attributo `__wrapped__`.\n\nProverò a testare questo con la versione beta.\n\n-----\n\n### Descrivi il bug\n\n> Modificato nella versione 3.9: I metodi di classe possono ora avvolgere altri descrittori come `property()`.\n\nCioè, dalla versione 3.9 di Python possiamo scrivere codice come\n\n```python\nclass A:\n    @classmethod\n    @property\n    def f(cls):\n        \"\"\"Una proprietà di classe.\"\"\"\n        return \"property\"\n```\n\nTuttavia, Sphinx non sembra documentare tali metodi (i metodi decorati con `@property` vengono documentati correttamente.)\n\n### Come riprodurre\n\n```bash\ngit clone https://github.com/randolf-scholz/sphinx_demo\ncd sphinx_demo/docs\nmake html\n# apri _build/html/dummy_module.submodule.html\n```\n\nI seguenti metodi non sono stati documentati correttamente:\n\n- `MetaClass.metaclass_class_property`\n- `MetaClass.metaclass_abstract_class_property`\n- `BaseClass.baseclass_class_property`\n- `BaseClass.baseclass_abstract_class_property`\n- `SubClass.subclass_class_property`\n- `SubClass.subclass_abstract_class_property`\n\n### Comportamento atteso\n\nI metodi decorati con sia `@classmethod` che `@property` dovrebbero essere documentati correttamente.\n\n### Il tuo progetto\n\nhttps://github.com/randolf-scholz/sphinx_demo\n\n### Screenshot\n\n_Nessuna risposta_\n\n### Sistema Operativo\n\nUbuntu 20.04.2 LTS\n\n### Versione di Python\n\n3.9.6\n\n### Versione di Sphinx\n\n4.0.3\n\n### Estensioni di Sphinx\n\nsphinx.ext.autodoc, sphinx.ext.autosummary\n\n### Strumenti aggiuntivi\n\n_Nessuna risposta_\n\n### Contesto aggiuntivo\n\n_Nessuna risposta_",
    "hints_text": "Wow! Non ho notato il miglioramento. Darò un'occhiata.\r\nhttps://docs.python.org/3.9/library/functions.html#classmethod\r\nPer chi si stesse chiedendo, un modo per aggirare questo problema attualmente, che consente l'uso delle docstring degli attributi, è rifattorizzare\r\n\r\n```python\r\nclass A:\r\n    @classmethod\r\n    @property\r\n    def fun(cls)\r\n         \"\"\"docstring\"\"\"\r\n        pass\r\n```\r\n\r\nin una costruzione che utilizza una metaclass\r\n\r\n```python\r\nclass MetaClass:\r\n    @property\r\n    def fun(cls):\r\n        \"\"\"docstring\"\"\"\r\n\r\nclass A(metaclass=MetaClass):\r\n    fun = classmethod(MetaClass.fun)\r\n    \"\"\"docstring\"\"\"\r\n```",
    "created_at": "2021-07-17T06:31:58Z",
    "version": "4.2",
    "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pyproperty\", \"tests/test_ext_autodoc_autoclass.py::test_properties\", \"tests/test_ext_autodoc_autoproperty.py::test_class_properties\"]",
    "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\", \"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_ext_autodoc_autoclass.py::test_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_undocumented_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_ext_autodoc_autoclass.py::test_slots_attribute\", \"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type\", \"tests/test_ext_autodoc_autoclass.py::test_autodoc_process_bases\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_class\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_init\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_both\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias_having_doccomment\", \"tests/test_ext_autodoc_autoproperty.py::test_properties\"]",
    "environment_setup_commit": "336605b8e4b14c5da9f4d872fb730dc6894edb77",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-13398",
    "base_commit": "6500928dc0e57be8f06d1162eacc3ba5e2eff692",
    "patch": "diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py\n--- a/astropy/coordinates/builtin_frames/__init__.py\n+++ b/astropy/coordinates/builtin_frames/__init__.py\n@@ -48,6 +48,7 @@\n from . import icrs_cirs_transforms\n from . import cirs_observed_transforms\n from . import icrs_observed_transforms\n+from . import itrs_observed_transforms\n from . import intermediate_rotation_transforms\n from . import ecliptic_transforms\n \ndiff --git a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n--- a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n+++ b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n@@ -71,7 +71,7 @@ def tete_to_itrs_mat(time, rbpn=None):\n     sp = erfa.sp00(*get_jd12(time, 'tt'))\n     pmmat = erfa.pom00(xp, yp, sp)\n \n-    # now determine the greenwich apparent siderial time for the input obstime\n+    # now determine the greenwich apparent sidereal time for the input obstime\n     # we use the 2006A model for consistency with RBPN matrix use in GCRS <-> TETE\n     ujd1, ujd2 = get_jd12(time, 'ut1')\n     jd1, jd2 = get_jd12(time, 'tt')\n@@ -146,9 +146,9 @@ def tete_to_gcrs(tete_coo, gcrs_frame):\n \n @frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TETE, ITRS)\n def tete_to_itrs(tete_coo, itrs_frame):\n-    # first get us to TETE at the target obstime, and geocentric position\n+    # first get us to TETE at the target obstime, and location (no-op if same)\n     tete_coo2 = tete_coo.transform_to(TETE(obstime=itrs_frame.obstime,\n-                                           location=EARTH_CENTER))\n+                                           location=itrs_frame.location))\n \n     # now get the pmatrix\n     pmat = tete_to_itrs_mat(itrs_frame.obstime)\n@@ -161,9 +161,9 @@ def itrs_to_tete(itrs_coo, tete_frame):\n     # compute the pmatrix, and then multiply by its transpose\n     pmat = tete_to_itrs_mat(itrs_coo.obstime)\n     newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n-    tete = TETE(newrepr, obstime=itrs_coo.obstime)\n+    tete = TETE(newrepr, obstime=itrs_coo.obstime, location=itrs_coo.location)\n \n-    # now do any needed offsets (no-op if same obstime)\n+    # now do any needed offsets (no-op if same obstime and location)\n     return tete.transform_to(tete_frame)\n \n \n@@ -196,9 +196,9 @@ def cirs_to_gcrs(cirs_coo, gcrs_frame):\n \n @frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, ITRS)\n def cirs_to_itrs(cirs_coo, itrs_frame):\n-    # first get us to geocentric CIRS at the target obstime\n+    # first get us to CIRS at the target obstime, and location (no-op if same)\n     cirs_coo2 = cirs_coo.transform_to(CIRS(obstime=itrs_frame.obstime,\n-                                           location=EARTH_CENTER))\n+                                           location=itrs_frame.location))\n \n     # now get the pmatrix\n     pmat = cirs_to_itrs_mat(itrs_frame.obstime)\n@@ -211,9 +211,9 @@ def itrs_to_cirs(itrs_coo, cirs_frame):\n     # compute the pmatrix, and then multiply by its transpose\n     pmat = cirs_to_itrs_mat(itrs_coo.obstime)\n     newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n-    cirs = CIRS(newrepr, obstime=itrs_coo.obstime)\n+    cirs = CIRS(newrepr, obstime=itrs_coo.obstime, location=itrs_coo.location)\n \n-    # now do any needed offsets (no-op if same obstime)\n+    # now do any needed offsets (no-op if same obstime and location)\n     return cirs.transform_to(cirs_frame)\n \n \ndiff --git a/astropy/coordinates/builtin_frames/itrs.py b/astropy/coordinates/builtin_frames/itrs.py\n--- a/astropy/coordinates/builtin_frames/itrs.py\n+++ b/astropy/coordinates/builtin_frames/itrs.py\n@@ -3,26 +3,69 @@\n from astropy.utils.decorators import format_doc\n from astropy.coordinates.representation import CartesianRepresentation, CartesianDifferential\n from astropy.coordinates.baseframe import BaseCoordinateFrame, base_doc\n-from astropy.coordinates.attributes import TimeAttribute\n-from .utils import DEFAULT_OBSTIME\n+from astropy.coordinates.attributes import (TimeAttribute,\n+                                            EarthLocationAttribute)\n+from .utils import DEFAULT_OBSTIME, EARTH_CENTER\n \n __all__ = ['ITRS']\n \n+doc_footer = \"\"\"\n+    Other parameters\n+    ----------------\n+    obstime : `~astropy.time.Time`\n+        The time at which the observation is taken.  Used for determining the\n+        position of the Earth and its precession.\n+    location : `~astropy.coordinates.EarthLocation`\n+        The location on the Earth.  This can be specified either as an\n+        `~astropy.coordinates.EarthLocation` object or as anything that can be\n+        transformed to an `~astropy.coordinates.ITRS` frame. The default is the\n+        centre of the Earth.\n+\"\"\"\n \n-@format_doc(base_doc, components=\"\", footer=\"\")\n+\n+@format_doc(base_doc, components=\"\", footer=doc_footer)\n class ITRS(BaseCoordinateFrame):\n     \"\"\"\n     A coordinate or frame in the International Terrestrial Reference System\n     (ITRS).  This is approximately a geocentric system, although strictly it is\n-    defined by a series of reference locations near the surface of the Earth.\n+    defined by a series of reference locations near the surface of the Earth (the ITRF).\n     For more background on the ITRS, see the references provided in the\n     :ref:`astropy:astropy-coordinates-seealso` section of the documentation.\n+\n+    This frame also includes frames that are defined *relative* to the center of the Earth,\n+    but that are offset (in both position and velocity) from the center of the Earth. You\n+    may see such non-geocentric coordinates referred to as \"topocentric\".\n+\n+    Topocentric ITRS frames are convenient for observations of near Earth objects where\n+    stellar aberration is not included. One can merely subtract the observing site's\n+    EarthLocation geocentric ITRS coordinates from the object's geocentric ITRS coordinates,\n+    put the resulting vector into a topocentric ITRS frame and then transform to\n+    `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`. The other way around is\n+    to transform an observed `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`\n+    position to a topocentric ITRS frame and add the observing site's EarthLocation geocentric\n+    ITRS coordinates to yield the object's geocentric ITRS coordinates.\n+\n+    On the other hand, using ``transform_to`` to transform geocentric ITRS coordinates to\n+    topocentric ITRS, observed `~astropy.coordinates.AltAz`, or observed\n+    `~astropy.coordinates.HADec` coordinates includes the difference between stellar aberration\n+    from the point of view of an observer at the geocenter and stellar aberration from the\n+    point of view of an observer on the surface of the Earth. If the geocentric ITRS\n+    coordinates of the object include stellar aberration at the geocenter (e.g. certain ILRS\n+    ephemerides), then this is the way to go.\n+\n+    Note to ILRS ephemeris users: Astropy does not currently consider relativistic\n+    effects of the Earth's gravatational field. Nor do the `~astropy.coordinates.AltAz`\n+    or `~astropy.coordinates.HADec` refraction corrections compute the change in the\n+    range due to the curved path of light through the atmosphere, so Astropy is no\n+    substitute for the ILRS software in these respects.\n+\n     \"\"\"\n \n     default_representation = CartesianRepresentation\n     default_differential = CartesianDifferential\n \n     obstime = TimeAttribute(default=DEFAULT_OBSTIME)\n+    location = EarthLocationAttribute(default=EARTH_CENTER)\n \n     @property\n     def earth_location(self):\ndiff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py\nnew file mode 100644\n--- /dev/null\n+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py\n@@ -0,0 +1,145 @@\n+import numpy as np\n+import erfa\n+from astropy import units as u\n+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose\n+from astropy.coordinates.baseframe import frame_transform_graph\n+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\n+from astropy.coordinates.representation import CartesianRepresentation\n+from .altaz import AltAz\n+from .hadec import HADec\n+from .itrs import ITRS\n+\n+# Minimum cos(alt) and sin(alt) for refraction purposes\n+CELMIN = 1e-6\n+SELMIN = 0.05\n+# Latitude of the north pole.\n+NORTH_POLE = 90.0*u.deg\n+\n+\n+def itrs_to_altaz_mat(lon, lat):\n+    # form ITRS to AltAz matrix\n+    # AltAz frame is left handed\n+    minus_x = np.eye(3)\n+    minus_x[0][0] = -1.0\n+    mat = (minus_x\n+           @ rotation_matrix(NORTH_POLE - lat, 'y')\n+           @ rotation_matrix(lon, 'z'))\n+    return mat\n+\n+\n+def itrs_to_hadec_mat(lon):\n+    # form ITRS to HADec matrix\n+    # HADec frame is left handed\n+    minus_y = np.eye(3)\n+    minus_y[1][1] = -1.0\n+    mat = (minus_y\n+           @ rotation_matrix(lon, 'z'))\n+    return mat\n+\n+\n+def altaz_to_hadec_mat(lat):\n+    # form AltAz to HADec matrix\n+    z180 = np.eye(3)\n+    z180[0][0] = -1.0\n+    z180[1][1] = -1.0\n+    mat = (z180\n+           @ rotation_matrix(NORTH_POLE - lat, 'y'))\n+    return mat\n+\n+\n+def add_refraction(aa_crepr, observed_frame):\n+    # add refraction to AltAz cartesian representation\n+    refa, refb = erfa.refco(\n+        observed_frame.pressure.to_value(u.hPa),\n+        observed_frame.temperature.to_value(u.deg_C),\n+        observed_frame.relative_humidity.value,\n+        observed_frame.obswl.to_value(u.micron)\n+    )\n+    # reference: erfa.atioq()\n+    norm, uv = erfa.pn(aa_crepr.get_xyz(xyz_axis=-1).to_value())\n+    # Cosine and sine of altitude, with precautions.\n+    sel = np.maximum(uv[..., 2], SELMIN)\n+    cel = np.maximum(np.sqrt(uv[..., 0] ** 2 + uv[..., 1] ** 2), CELMIN)\n+    # A*tan(z)+B*tan^3(z) model, with Newton-Raphson correction.\n+    tan_z = cel / sel\n+    w = refb * tan_z ** 2\n+    delta_el = (refa + w) * tan_z / (1.0 + (refa + 3.0 * w) / (sel ** 2))\n+    # Apply the change, giving observed vector\n+    cosdel = 1.0 - 0.5 * delta_el ** 2\n+    f = cosdel - delta_el * sel / cel\n+    uv[..., 0] *= f\n+    uv[..., 1] *= f\n+    uv[..., 2] = cosdel * uv[..., 2] + delta_el * cel\n+    # Need to renormalize to get agreement with CIRS->Observed on distance\n+    norm2, uv = erfa.pn(uv)\n+    uv = erfa.sxp(norm, uv)\n+    return CartesianRepresentation(uv, xyz_axis=-1, unit=aa_crepr.x.unit, copy=False)\n+\n+\n+def remove_refraction(aa_crepr, observed_frame):\n+    # remove refraction from AltAz cartesian representation\n+    refa, refb = erfa.refco(\n+        observed_frame.pressure.to_value(u.hPa),\n+        observed_frame.temperature.to_value(u.deg_C),\n+        observed_frame.relative_humidity.value,\n+        observed_frame.obswl.to_value(u.micron)\n+    )\n+    # reference: erfa.atoiq()\n+    norm, uv = erfa.pn(aa_crepr.get_xyz(xyz_axis=-1).to_value())\n+    # Cosine and sine of altitude, with precautions.\n+    sel = np.maximum(uv[..., 2], SELMIN)\n+    cel = np.sqrt(uv[..., 0] ** 2 + uv[..., 1] ** 2)\n+    # A*tan(z)+B*tan^3(z) model\n+    tan_z = cel / sel\n+    delta_el = (refa + refb * tan_z ** 2) * tan_z\n+    # Apply the change, giving observed vector.\n+    az, el = erfa.c2s(uv)\n+    el -= delta_el\n+    uv = erfa.s2c(az, el)\n+    uv = erfa.sxp(norm, uv)\n+    return CartesianRepresentation(uv, xyz_axis=-1, unit=aa_crepr.x.unit, copy=False)\n+\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\n+def itrs_to_observed(itrs_coo, observed_frame):\n+    if (np.any(itrs_coo.location != observed_frame.location) or\n+            np.any(itrs_coo.obstime != observed_frame.obstime)):\n+        # This transform will go through the CIRS and alter stellar aberration.\n+        itrs_coo = itrs_coo.transform_to(ITRS(obstime=observed_frame.obstime,\n+                                              location=observed_frame.location))\n+\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+\n+    if isinstance(observed_frame, AltAz) or (observed_frame.pressure > 0.0):\n+        crepr = itrs_coo.cartesian.transform(itrs_to_altaz_mat(lon, lat))\n+        if observed_frame.pressure > 0.0:\n+            crepr = add_refraction(crepr, observed_frame)\n+            if isinstance(observed_frame, HADec):\n+                crepr = crepr.transform(altaz_to_hadec_mat(lat))\n+    else:\n+        crepr = itrs_coo.cartesian.transform(itrs_to_hadec_mat(lon))\n+    return observed_frame.realize_frame(crepr)\n+\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\n+def observed_to_itrs(observed_coo, itrs_frame):\n+\n+    lon, lat, height = observed_coo.location.to_geodetic('WGS84')\n+\n+    if isinstance(observed_coo, AltAz) or (observed_coo.pressure > 0.0):\n+        crepr = observed_coo.cartesian\n+        if observed_coo.pressure > 0.0:\n+            if isinstance(observed_coo, HADec):\n+                crepr = crepr.transform(matrix_transpose(altaz_to_hadec_mat(lat)))\n+            crepr = remove_refraction(crepr, observed_coo)\n+        crepr = crepr.transform(matrix_transpose(itrs_to_altaz_mat(lon, lat)))\n+    else:\n+        crepr = observed_coo.cartesian.transform(matrix_transpose(itrs_to_hadec_mat(lon)))\n+\n+    itrs_at_obs_time = ITRS(crepr, obstime=observed_coo.obstime,\n+                            location=observed_coo.location)\n+    # This final transform may be a no-op if the obstimes and locations are the same.\n+    # Otherwise, this transform will go through the CIRS and alter stellar aberration.\n+    return itrs_at_obs_time.transform_to(itrs_frame)\n",
    "test_patch": "diff --git a/astropy/coordinates/tests/test_intermediate_transformations.py b/astropy/coordinates/tests/test_intermediate_transformations.py\n--- a/astropy/coordinates/tests/test_intermediate_transformations.py\n+++ b/astropy/coordinates/tests/test_intermediate_transformations.py\n@@ -194,6 +194,116 @@ def test_cirs_to_hadec():\n     assert_allclose(cirs.dec, cirs3.dec)\n \n \n+def test_itrs_topo_to_altaz_with_refraction():\n+\n+    loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)\n+    usph = golden_spiral_grid(200)\n+    dist = np.linspace(1., 1000.0, len(usph)) * u.au\n+    icrs = ICRS(ra=usph.lon, dec=usph.lat, distance=dist)\n+    altaz_frame1 = AltAz(obstime = 'J2000', location=loc)\n+    altaz_frame2 = AltAz(obstime = 'J2000', location=loc, pressure=1000.0 * u.hPa,\n+                         relative_humidity=0.5)\n+    cirs_frame = CIRS(obstime = 'J2000', location=loc)\n+    itrs_frame = ITRS(location=loc)\n+\n+    # Normal route\n+    # No Refraction\n+    altaz1 = icrs.transform_to(altaz_frame1)\n+\n+    # Refraction added\n+    altaz2 = icrs.transform_to(altaz_frame2)\n+\n+    # Refraction removed\n+    cirs = altaz2.transform_to(cirs_frame)\n+    altaz3 = cirs.transform_to(altaz_frame1)\n+\n+    # Through ITRS\n+    # No Refraction\n+    itrs = icrs.transform_to(itrs_frame)\n+    altaz11 = itrs.transform_to(altaz_frame1)\n+\n+    assert_allclose(altaz11.az - altaz1.az, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz11.alt - altaz1.alt, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz11.distance - altaz1.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+    # Round trip\n+    itrs11 = altaz11.transform_to(itrs_frame)\n+\n+    assert_allclose(itrs11.x, itrs.x)\n+    assert_allclose(itrs11.y, itrs.y)\n+    assert_allclose(itrs11.z, itrs.z)\n+\n+    # Refraction added\n+    altaz22 = itrs.transform_to(altaz_frame2)\n+\n+    assert_allclose(altaz22.az - altaz2.az, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz22.alt - altaz2.alt, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz22.distance - altaz2.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+    # Refraction removed\n+    itrs = altaz22.transform_to(itrs_frame)\n+    altaz33 = itrs.transform_to(altaz_frame1)\n+\n+    assert_allclose(altaz33.az - altaz3.az, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz33.alt - altaz3.alt, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(altaz33.distance - altaz3.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+\n+def test_itrs_topo_to_hadec_with_refraction():\n+\n+    loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)\n+    usph = golden_spiral_grid(200)\n+    dist = np.linspace(1., 1000.0, len(usph)) * u.au\n+    icrs = ICRS(ra=usph.lon, dec=usph.lat, distance=dist)\n+    hadec_frame1 = HADec(obstime = 'J2000', location=loc)\n+    hadec_frame2 = HADec(obstime = 'J2000', location=loc, pressure=1000.0 * u.hPa,\n+                         relative_humidity=0.5)\n+    cirs_frame = CIRS(obstime = 'J2000', location=loc)\n+    itrs_frame = ITRS(location=loc)\n+\n+    # Normal route\n+    # No Refraction\n+    hadec1 = icrs.transform_to(hadec_frame1)\n+\n+    # Refraction added\n+    hadec2 = icrs.transform_to(hadec_frame2)\n+\n+    # Refraction removed\n+    cirs = hadec2.transform_to(cirs_frame)\n+    hadec3 = cirs.transform_to(hadec_frame1)\n+\n+    # Through ITRS\n+    # No Refraction\n+    itrs = icrs.transform_to(itrs_frame)\n+    hadec11 = itrs.transform_to(hadec_frame1)\n+\n+    assert_allclose(hadec11.ha - hadec1.ha, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec11.dec - hadec1.dec, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec11.distance - hadec1.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+    # Round trip\n+    itrs11 = hadec11.transform_to(itrs_frame)\n+\n+    assert_allclose(itrs11.x, itrs.x)\n+    assert_allclose(itrs11.y, itrs.y)\n+    assert_allclose(itrs11.z, itrs.z)\n+\n+    # Refraction added\n+    hadec22 = itrs.transform_to(hadec_frame2)\n+\n+    assert_allclose(hadec22.ha - hadec2.ha, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec22.dec - hadec2.dec, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec22.distance - hadec2.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+    # Refraction removed\n+    itrs = hadec22.transform_to(itrs_frame)\n+    hadec33 = itrs.transform_to(hadec_frame1)\n+\n+    assert_allclose(hadec33.ha - hadec3.ha, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec33.dec - hadec3.dec, 0*u.mas, atol=0.1*u.mas)\n+    assert_allclose(hadec33.distance - hadec3.distance, 0*u.cm, atol=10.0*u.cm)\n+\n+\n def test_gcrs_itrs():\n     \"\"\"\n     Check basic GCRS<->ITRS transforms for round-tripping.\n@@ -221,7 +331,7 @@ def test_gcrs_itrs():\n \n def test_cirs_itrs():\n     \"\"\"\n-    Check basic CIRS<->ITRS transforms for round-tripping.\n+    Check basic CIRS<->ITRS geocentric transforms for round-tripping.\n     \"\"\"\n     usph = golden_spiral_grid(200)\n     cirs = CIRS(usph, obstime='J2000')\n@@ -237,6 +347,25 @@ def test_cirs_itrs():\n     assert not allclose(cirs.dec, cirs6_2.dec)\n \n \n+def test_cirs_itrs_topo():\n+    \"\"\"\n+    Check basic CIRS<->ITRS topocentric transforms for round-tripping.\n+    \"\"\"\n+    loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)\n+    usph = golden_spiral_grid(200)\n+    cirs = CIRS(usph, obstime='J2000', location=loc)\n+    cirs6 = CIRS(usph, obstime='J2006', location=loc)\n+\n+    cirs2 = cirs.transform_to(ITRS(location=loc)).transform_to(cirs)\n+    cirs6_2 = cirs6.transform_to(ITRS(location=loc)).transform_to(cirs)  # different obstime\n+\n+    # just check round-tripping\n+    assert_allclose(cirs.ra, cirs2.ra)\n+    assert_allclose(cirs.dec, cirs2.dec)\n+    assert not allclose(cirs.ra, cirs6_2.ra)\n+    assert not allclose(cirs.dec, cirs6_2.dec)\n+\n+\n def test_gcrs_cirs():\n     \"\"\"\n     Check GCRS<->CIRS transforms for round-tripping.  More complicated than the\n@@ -773,7 +902,7 @@ def test_tete_transforms():\n \n def test_straight_overhead():\n     \"\"\"\n-    With a precise CIRS<->AltAz transformation this should give Alt=90 exactly\n+    With a precise CIRS<->Observed transformation this should give Alt=90 exactly\n \n     If the CIRS self-transform breaks it won't, due to improper treatment of aberration\n     \"\"\"\n@@ -806,6 +935,37 @@ def test_straight_overhead():\n     assert_allclose(hd.dec, 52*u.deg, atol=1*u.uas, rtol=0)\n \n \n+def test_itrs_straight_overhead():\n+    \"\"\"\n+    With a precise ITRS<->Observed transformation this should give Alt=90 exactly\n+\n+    \"\"\"\n+    t = Time('J2010')\n+    obj = EarthLocation(-1*u.deg, 52*u.deg, height=10.*u.km)\n+    home = EarthLocation(-1*u.deg, 52*u.deg, height=0.*u.km)\n+\n+    # An object that appears straight overhead - FOR A GEOCENTRIC OBSERVER.\n+    itrs_geo = obj.get_itrs(t).cartesian\n+\n+    # now get the Geocentric ITRS position of observatory\n+    obsrepr = home.get_itrs(t).cartesian\n+\n+    # topocentric ITRS position of a straight overhead object\n+    itrs_repr = itrs_geo - obsrepr\n+\n+    # create a ITRS object that appears straight overhead for a TOPOCENTRIC OBSERVER\n+    itrs_topo = ITRS(itrs_repr, obstime=t, location=home)\n+\n+    # Check AltAz (though Azimuth can be anything so is not tested).\n+    aa = itrs_topo.transform_to(AltAz(obstime=t, location=home))\n+    assert_allclose(aa.alt, 90*u.deg, atol=1*u.uas, rtol=0)\n+\n+    # Check HADec.\n+    hd = itrs_topo.transform_to(HADec(obstime=t, location=home))\n+    assert_allclose(hd.ha, 0*u.hourangle, atol=1*u.uas, rtol=0)\n+    assert_allclose(hd.dec, 52*u.deg, atol=1*u.uas, rtol=0)\n+\n+\n def jplephem_ge(minversion):\n     \"\"\"Check if jplephem is installed and has version >= minversion.\"\"\"\n     # This is a separate routine since somehow with pyinstaller the stanza\n",
    "problem_statement": "Un approccio diretto per le trasformazioni da ITRS a coordinate osservate che rimane all'interno dell'ITRS.\n<!-- Questo commento è nascosto quando si invia il problema,\r\nquindi non è necessario rimuoverlo! -->\r\n\r\n<!-- Si prega di consultare le nostre linee guida per il contributo,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nSi prega di consultare il nostro codice di condotta,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Si prega di effettuare una ricerca nel nostro repository GitHub per verificare se un problema simile\r\nè già stato pubblicato.\r\nSe un problema simile è chiuso, si prega di dare un'occhiata rapida per vedere se si è soddisfatti\r\ndella risoluzione.\r\nIn caso contrario, si prega di procedere e aprire un problema! -->\r\n\r\n### Descrizione\r\n<!-- Fornire una descrizione generale della funzionalità desiderata. -->\r\n<!-- Se si desidera, è possibile suggerire una bozza di design o API. -->\r\n<!-- In questo modo possiamo avere una discussione più approfondita sulla funzionalità. -->\r\nAbbiamo riscontrato problemi ricorrenti sollevati da persone che desiderano osservare satelliti e simili (aeroplani?, montagne?, edifici vicini?) riguardo all'apparente imprecisione della trasformazione da ITRS a AltAz. Mi stanco di spiegare il problema dell'aberrazione geocentrica rispetto a quella topocentrica e di proporre la soluzione del tutto non intuitiva descritta in `test_intermediate_transformations.test_straight_overhead()`. Quindi, per l'ultimo problema di questo tipo (#13319), ho ideato un approccio più diretto. Questo approccio rimane interamente all'interno dell'ITRS e si limita a convertire tra coordinate ITRS, AltAz e HADec.\r\n\r\nHo messo insieme gli elementi per una pull request che segue questo approccio per le trasformazioni tra questi frame (cioè ITRS<->AltAz, ITRS<->HADec). Una caratteristica di questo approccio è che tratta la posizione ITRS come invariante nel tempo. Non ha senso eseguire una trasformazione ITRS->ITRS per tempi di osservazione (`obstimes`) diversi tra il frame di input e quello di output, quindi l'`obstime` del frame di output viene semplicemente adottato. Anche se finisce per essere `None` nel caso di un frame di output `AltAz` o `HADec` dove questo è il valore predefinito. Questo perché la trasformazione ITRS->ITRS corrente fa riferimento alle coordinate ITRS al SSB (Barycentric Celestial Reference System) piuttosto che al ITRF (International Terrestrial Reference Frame) rotante. Poiché le posizioni ITRS tendono a essere vicine, qualsiasi trasformazione da un tempo a un altro lascia la povera posizione ITRS persa nel solco dell'orbita della Terra intorno al SSB, forse a milioni di chilometri da dove dovrebbe essere.\r\n\r\nLe persone sarebbero ricettive a questo approccio? In tal caso, invierò la mia pull request.\r\n\r\n### Contesto aggiuntivo\r\n<!-- Aggiungere qualsiasi altro contesto o screenshot sulla richiesta di funzionalità qui. -->\r\n<!-- Questa parte è opzionale. -->\r\nEcco il concetto di base, che è stato testato e funziona. Non ho ancora aggiunto la rifrazione, ma posso farlo se viene ritenuto importante:\r\n```python\r\nimport numpy as np\r\nfrom astropy import units as u\r\nfrom astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose\r\nfrom astropy.coordinates.baseframe import frame_transform_graph\r\nfrom astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\r\nfrom .altaz import AltAz\r\nfrom .hadec import HADec\r\nfrom .itrs import ITRS\r\nfrom .utils import PIOVER2\r\n\r\ndef itrs_to_observed_mat(observed_frame):\r\n\r\n    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\r\n    elong = lon.to_value(u.radian)\r\n\r\n    if isinstance(observed_frame, AltAz):\r\n        # forma la matrice da ITRS a AltAz\r\n        elat = lat.to_value(u.radian)\r\n        # Il frame AltAz è left-handed\r\n        minus_x = np.eye(3)\r\n        minus_x[0][0] = -1.0\r\n        mat = (minus_x\r\n               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\r\n               @ rotation_matrix(elong, 'z', unit=u.radian))\r\n\r\n    else:\r\n        # forma la matrice da ITRS a HADec\r\n        # Il frame HADec è left-handed\r\n        minus_y = np.eye(3)\r\n        minus_y[1][1] = -1.0\r\n        mat = (minus_y\r\n               @ rotation_matrix(elong, 'z', unit=u.radian))\r\n    return mat\r\n\r\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\r\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\r\ndef itrs_to_observed(itrs_coo, observed_frame):\r\n    # Tentare di sincronizzare gli obstimes qui non ha senso. Anzi,\r\n    # è una vera trappola poiché eseguire una trasformazione ITRS->ITRS fa riferimento \r\n    # alle coordinate ITRS, che dovrebbero essere legate alla Terra, al SSB.\r\n    # Invece, trattiamo le coordinate ITRS come invarianti nel tempo qui.\r\n\r\n    # forma la posizione ITRS topocentrica\r\n    topocentric_itrs_repr = (itrs_coo.cartesian\r\n                             - observed_frame.location.get_itrs().cartesian)\r\n    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\r\n    return observed_frame.realize_frame(rep)\r\n\r\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\r\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\r\ndef observed_to_itrs(observed_coo, itrs_frame):\r\n                                              \r\n    # forma la posizione ITRS topocentrica\r\n    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\r\n                            itrs_to_observed_mat(observed_coo)))\r\n    # forma la posizione ITRS geocentrica\r\n    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\r\n    return itrs_frame.realize_frame(rep)\r\n```",
    "hints_text": "cc @StuartLittlefair, @adrn, @eteq, @eerovaher, @mhvk  \nSì, sarebbe bene affrontare questo problema ricorrente. Ma dobbiamo in qualche modo garantire che venga utilizzato solo quando rilevante. Ad esempio, le coordinate dovrebbero avere una distanza, e sospetto che debbano essere vicine alla Terra...  \nSì, finora non ho fatto alcun tentativo di proteggere questo contro rappresentazioni sferiche unitarie, posizioni sulla Terra che sono `None`, ecc. Non sono sicuro del motivo per cui la distanza dovrebbe essere vicina alla Terra. Se fosse un megaparsec, ciò significherebbe semplicemente che non ci sarebbe quasi alcuna differenza tra le coordinate geocentriche e topocentriche.  \nSono decisamente a favore di questo approccio. Come dice @mhvk, avrebbe bisogno di una gestione degli errori per input insensati.  \n\nForse si può includere una funzionalità con un avviso appropriato? Ad esempio, invece di accettare acriticamente l'`obstime` del frame di output, si potrebbe avvisare l'utente che l'`obstime` del frame di input viene ignorato, spiegare il motivo e suggerire di trasformare esplicitamente tramite `ICRS` se questo comportamento non è desiderato?  \n\nInoltre, potremmo gestire le coordinate senza distanze in questo modo, assumendo che siano sul geoide con un avviso appropriato?  \nLe distanze sarebbero importanti per l'aberrazione? Per la maggior parte delle applicazioni, sembra che si assuma un movimento solidale con la Terra. Ma forse non sto ragionando correttamente.  \nL'`obstime` è davvero irrilevante per la trasformazione. Ora, so che Astropy lega tutto, incluso il lavello della cucina, all'SBB e, se qualcuno osa chiedere dove sarà quel lavello tra un'ora, lo strapperà felicemente dalla casa e lo lancerà nello spazio. Ma non deve necessariamente essere così. A mio parere, una trasformazione ITRS<->ITRS dovrebbe essere un'operazione nulla. Al di fuori di terremoti e tettonica delle placche, le coordinate ITRS di oggetti stazionari sulla superficie della Terra sono invarianti nel tempo e nulla al di fuori della superficie, tranne un satellite veramente geostazionario, ha coordinate ITRS costanti. L'esempio fornito nell'issue #13319 utilizza un'effemeride ILRS con record a intervalli di 3 minuti. Questo viene interpolato utilizzando un polinomio di Lagrange di 8° ordine (l'ILRS prescrive il 9°) per ottenere le coordinate ITRS del corpo target in qualsiasi momento. Mi aspetto che la maggior parte degli utenti ignori completamente `obstime`, anche se alcuni potrebbero includerlo nel frame di output per avere un record incorporato dei tempi di osservazione. In nessun caso una trasformazione ITRS<->ITRS da un tempo all'altro produrrà un risultato atteso come è attualmente scritta la trasformazione.  \n\nSuppongo che, invece di sollevare un'eccezione, potremmo semplicemente trattare i vettori unitari come topocentrici e trasformarli da un frame all'altro. Non sono sicuro di quanto questo sia significativo. Poiché attualmente non c'è modo di assegnare un `EarthLocation` a un frame ITRS, è molto più probabile che sia il risultato di un errore da parte dell'utente. L'unica interpretazione possibile è che il corpo target sia a una distanza tale che il cambiamento di direzione dovuto alla parallasse topocentrica sia insignificante. Nonostante il mio esempio del megaparsec, questo non è ciò di cui si occupano le coordinate ITRS. Gli unici che conosco che utilizzano coordinate ITRS nello spazio profondo sono l'ILRS (lo fanno per i pianeti interni fino a Marte) e misurare la distanza è ciò di cui si occupano.  \n\nRiguardo all'aberrazione, ho fatto ulteriori ricerche. Le effemeridi ILRS aggiungono l'aberrazione stellare per i corpi del sistema solare. Gli utenti di queste effemeridi ne sono ben consapevoli. Ogni posizione ha un record aggiuntivo che fornisce le correzioni dell'aberrazione stellare geocentrica alle coordinate ITRS. Tali utenti possono essere indirizzati nella documentazione a utilizzare trasformazioni esplicite ITRS->ICRS->Observed invece.  \n\nUna documentazione chiara e completa sarà molto importante per queste trasformazioni. Sarò attento a spiegare cosa forniscono e cosa no.  \n\nPoiché sembrerebbero esserci sufficienti consensi qui, procederò con questo progetto. Come sempre, ulteriori contributi sono benvenuti.  \n> L'`obstime` è davvero irrilevante per la trasformazione. Ora, so che Astropy lega tutto, incluso il lavello della cucina, all'SBB e, se qualcuno osa chiedere dove sarà quel lavello tra un'ora, lo strapperà felicemente dalla casa e lo lancerà nello spazio. Ma non deve necessariamente essere così. A mio parere, una trasformazione ITRS<->ITRS dovrebbe essere un'operazione nulla. Al di fuori di terremoti e tettonica delle placche, le coordinate ITRS di oggetti stazionari sulla superficie della Terra sono invarianti nel tempo…  \n\nQuesto è il punto su cui ho un problema, poiché significherebbe che le coordinate ITRS si comporterebbero in modo diverso da qualsiasi altra coordinata in astropy.  \n\nIn astropy non penso che facciamo alcuna ipotesi su che tipo di oggetto punti la coordinata. Una coordinata è un punto nello spaziotempo, espresso in un sistema di riferimento, e basta.  \n\nNel resto di astropy trattiamo quel punto come fisso nello spazio e se il sistema di riferimento si muove, anche le coordinate nel frame si muovono.  \n\nForse questa non è una grande scelta di progettazione, ed è certamente la causa di molta confusione con le coordinate astropy. Tuttavia, siamo qui e non penso sia fattibile che alcuni frame trattino le coordinate in questo modo e altri no, almeno non senza un avviso molto evidente all'utente che sta accadendo.  \nSembra che `SkyCoord` non sia la classe migliore per descrivere satelliti, ecc., poiché, come nota @StuartLittlefair, l'assunzione incorporata è che sia un oggetto per cui sono rilevanti solo la posizione e la velocità (e quindi probabilmente distante). Abbiamo già scoperto in precedenza che questo non è sempre sufficiente per gli oggetti del sistema solare, e discusso se una classe separata potrebbe essere utile. Forse qui allo stesso modo si ha bisogno di una classe (o sottoclasse) diversa che abbia un grafo di trasformazione che faccia assunzioni/scorciatoie diverse? In alternativa, si potrebbe immaginare di selezionare le scorciatoie suggerite qui con qualcosa come un context manager.  \nBeh, stavo solo spiegando perché sto ignorando qualsiasi differenza in `obstime` tra i frame di input e output per questa trasformazione. Questo non romperà nulla. Lo dichiarerò semplicemente nella documentazione che è così. Suppongo che, se `obstimes` sono presenti in entrambi i frame, posso sollevare un'eccezione se non corrispondono.  \nIn alternativa, potrei semplicemente procedere con la trasformazione ITRS<->ITRS, se lo preferisci. La maggior parte delle volte, l'errore risultante sarà ovvio per l'utente, ma questo potrebbe causare errori sottili se in qualche modo i tempi fossero sfasati di una piccola frazione di secondo.  \n> Sembra che `SkyCoord` non sia la classe migliore per descrivere satelliti, ecc.  \n\nBeh, è per questo che esiste TEME. Eseguire una trasformazione TEME->Observed quando il corpo target è un satellite causerà problemi simili se gli `obstimes` non corrispondono. Questo non è esplicitamente dichiarato nella documentazione. Suppongo che si presuma che gli utenti di TEME sappiano cosa stanno facendo.  \n\nMi scuso per il flusso di coscienza in questo post. È un problema che a volte ho. Dovrei riflettere attentamente prima di pubblicare.  \n> Beh, stavo solo spiegando perché sto ignorando qualsiasi differenza in `obstime` tra i frame di input e output per questa trasformazione. Questo non romperà nulla. Lo dichiarerò semplicemente nella documentazione che è così. Suppongo che, se `obstimes` sono presenti in entrambi i frame, posso sollevare un'eccezione se non corrispondono.  \n\nPenso che dovremmo sollevare un'eccezione o un avviso se gli `obstimes` sono presenti in entrambi i frame per ora. Il messaggio di eccezione può suggerire all'utente di provare ITRS -> ICRS -> ITRS' che funzionerebbe.  \n\nCome nota a margine, in generale preferirei una soluzione in qualche modo simile a quella suggerita da @mhvk, ovvero che abbiamo classi diverse per rappresentare \"cose\" reali in posizioni date, quindi un `SkyCoord` potrebbe trasformarsi in modo diverso da un `SatelliteCoord` o un `EarthCoord`, ad esempio.  \n\nTuttavia, questo è un grande cambiamento rispetto a ciò che abbiamo ora. In particolare, il modo in cui il pacchetto delle coordinate non separa chiaramente i *frame* delle coordinate dai *dati* delle coordinate a livello di classi Python ci causa alcune difficoltà se decidessimo di intraprendere questa strada.  \n\nAd esempio, al momento, puoi avere un frame `ITRS` con alcuni dati in esso, mentre potrebbe essere più pulito impedire questo, e invece implementare una serie di **oggetti Coord che *possiedono* un frame e alcuni dati delle coordinate...  \nDato l'andamento di questa discussione, voglio fare riferimento a discussioni correlate in #10372 e #10404. [Un mio commento di novembre 2020(!)](https://github.com/astropy/astropy/issues/10404#issuecomment-733779293) era:  \n> Poiché questo PR è stato menzionato altrove due volte oggi, pensavo di dover affermare che non ho abbandonato questo sforzo, e sto continuando a riflettere su come procedere. La mia piccola epifania recente è stata che non dovremmo cercare di trattare le stelle e i corpi del sistema solare in modo diverso, ma piuttosto dovremmo trattarli allo *stesso modo* (cf. la menzione di @mhvk della stella di Barnard). L'API dovrebbe invece distinguere tra posizioni apparenti e posizioni vere. Ho stato lavorando su possibili approcci API, che potrebbero includere alcune modifiche di rottura a `SkyCoord`.  \n\nAmmetto timidamente che non ho mai scritto la proposta nascente nella mia mente. Ma, in sintesi, la mia idea preferita non era dissimile da quanto suggerito sopra:  \n\n- `TrueCoord`: una nuova classe, che rappresenterebbe la *vera* posizione di una cosa, e deve sempre essere 3D. Contenerebbe le informazioni su come la sua posizione evolve nel tempo, che si tratti di moto lineare, moto kepleriano, ricerca nell'effemeride o semplicemente fisso nello spazio inerziale.  \n- `SkyCoord`: simile alla classe esistente, che rappresenterebbe la *posizione apparente* di un `TrueCoord` per una specifica posizione dell'osservatore, e può essere 2D. Cioè, l'aberrazione entrerebbe solo con `SkyCoord`, non con `TrueCoord`. Quindi, una trasformazione di un `SkyCoord` a un diverso `obstime` seguirebbe il percorso `SkyCoord(t1)`->`TrueCoord(t1)`->`TrueCoord(t2)`->`SkyCoord(t2)`.  \n\nMi sono bloccato nello sviluppare ulteriormente questa idea poiché continuavo a incagliarmi su come modificare al meglio l'API e le trasformazioni esistenti.  \nMi piace l'idea, anche se i dettagli potrebbero essere complicati. Ad esempio, supponiamo che io abbia astrometria (GAIA) di una stella binaria a 2 kpc di distanza, allora cosa significa `SkyCoord(t1)->TrueCoord(t1)`? Qual è il `t1` per `TrueCoord`? Chiaramente, deve includere il tempo di viaggio della luce, ma relativo a cosa?  \nNel frattempo, ho fatto un passo indietro e deciso che stavo pensando a questo nel modo sbagliato. Stavo pensando di creare un caso speciale per l'uso con osservazioni di satelliti che non includono correzioni per l'aberrazione stellare, quando avrei dovuto pensare a come far rientrare queste osservazioni nel quadro attuale in modo che funzionino bene con Astropy. Ciò a cui sono arrivato è un vero frame ITRS topocentrico. Questo richiederà un po' più di lavoro, ma non molto. Ho già la capacità di trasformare da e verso ITRS topocentrico e Observed con l'aggiunta e la rimozione della rifrazione testata e funzionante. Devo solo modificare le trasformazioni intermedie ICRS<->CIRS e ICRS<->TETE per funzionare con ICRS topocentrico, ma questo è in realtà abbastanza semplice da fare. Questo ha anche l'interessante vantaggio collaterale di creare un potenziale percorso da TETE a Observed senza dover passare attraverso GCRS, che sarebbe molto più veloce.  \n\nFare questo non creerà un percorso diretto per le osservazioni dei satelliti da ITRS geocentrico a Observed senza correzioni per l'aberrazione stellare, ma il percorso che crea è molto più intuitivo poiché tutto ciò che devono fare è sottrarre le coordinate ITRS del sito di osservazione dalle coordinate del satellite target, inserire il risultato in un frame ITRS topocentrico e fare la trasformazione a Observed.  \n> Mi piace l'idea, anche se i dettagli potrebbero essere complicati. Ad esempio, supponiamo che io abbia astrometria (GAIA) di una stella binaria a 2 kpc di distanza, allora cosa significa `SkyCoord(t1)->TrueCoord(t1)`? Qual è il `t1` per `TrueCoord`? Chiaramente, deve includere il tempo di viaggio della luce, ma relativo a cosa?  \n\nLa mia concezione sarebbe di propagare linearmente la stella binaria con il suo moto proprio per il tempo di viaggio della luce fino al telescopio (~6500 anni) per ottenere la sua posizione `TrueCoord`. Cioè, la trasformazione sarebbe esattamente la stessa di un corpo del sistema solare con moto lineare, solo molto più lontano. La nuova posizione potrebbe essere un po' insensata a seconda della cosa, ma il ciclo `SkyCoord`->`TrueCoord`->`TrueCoord`->`SkyCoord` per il moto lineare annullerebbe tutta la parte estrema della propagazione, lasciando solo la differenza di tempo (`t2-t1`).  \n\nNon voglio distrarre da questa issue, quindi suppongo che dovrei finalmente scrivere questo in modo più completo e creare una issue separata per la discussione.  \n@mkbrewer - questo suona intrigante ma cosa intendi precisamente con \"ITRS topocentrico\"? ITRS sembra geocentrico per definizione, ma suppongo che tu stia pensando a un'estensione in cui le coordinate sono relative a una posizione sulla Terra? Ciò implicherebbe un frame diverso per ogni posizione?  \n\n@ayshih - infatti, meglio spostare in una issue separata. Non sono sicuro che l'annullamento funzionerebbe sempre abbastanza bene, ma meglio pensarci attraverso guardando una proposta più concreta.  \nSì. Sto usando CIRS come mio modello. No. Un array di posizioni a diversi `obstimes` può avere la posizione del sito di osservazione sottratta e impostata in un unico frame. Questo è ciò che ho fatto nei test. Ho usato lo script di esempio da #13319, che ha tre posizioni in ogni frame.  \nSto avendo un problema che non so come risolvere. Ho aggiunto un `EarthLocation` come argomento per ITRS con valore predefinito `.EARTH_CENTER`. Quando creo un frame ITRS senza specificare una posizione, funziona bene:  \n```  \n<ITRS Coordinate (obstime=J2000.000, location=(0., 0., 0.) km): (x, y, z) [dimensionless]  \n    (0.00239357, 0.70710144, 0.70710144)>  \n```  \nMa se provo a dargli una posizione, ottengo:  \n```  \nTraceback (most recent call last):  \n  File \"/home/mkbrewer/ilrs_test6.py\", line 110, in <module>  \n    itrs_frame = astropy.coordinates.ITRS(dpos.cartesian, location=topo_loc)  \n  File \"/etc/anaconda3/lib/python3.9/site-packages/astropy/coordinates/baseframe.py\", line 320, in __init__  \n    raise TypeError(  \nTypeError: Coordinate frame ITRS got unexpected keywords: ['location']  \n```  \n\nOh dannazione. Non importa. Vedo cosa ho sbagliato lì.",
    "created_at": "2022-06-24T15:22:11Z",
    "version": "5.0",
    "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_topo_to_altaz_with_refraction\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_topo_to_hadec_with_refraction\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_itrs_topo\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_straight_overhead\"]",
    "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs[icoo0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs[icoo1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs_dist_diff[gframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs_dist_diff[gframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_to_altaz\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_to_hadec\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_itrs\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_itrs\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_cirs\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_hadec\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_precessed_geocentric\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_precessed_geocentric_different_obstime\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe0]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe1]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe2]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe3]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe4]\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_self_transform_closeby\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_teme_itrf\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_precessedgeocentric_loopback\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_teme_loopback\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_tete_transforms\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_straight_overhead\", \"astropy/coordinates/tests/test_intermediate_transformations.py::test_aa_high_precision_nodata\", \"astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_get_gcrs_posvel\", \"astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_tete_quick\", \"astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_cirs_quick\"]",
    "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-16631",
    "base_commit": "9b224579875e30203d079cc2fee83b116d98eb78",
    "patch": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -199,12 +199,26 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                if not session_hash:\n+                    session_hash_verified = False\n+                else:\n+                    session_auth_hash = user.get_session_auth_hash()\n+                    session_hash_verified = constant_time_compare(\n+                        session_hash, session_auth_hash\n+                    )\n                 if not session_hash_verified:\n-                    request.session.flush()\n-                    user = None\n+                    # If the current secret does not verify the session, try\n+                    # with the fallback secrets and stop when a matching one is\n+                    # found.\n+                    if session_hash and any(\n+                        constant_time_compare(session_hash, fallback_auth_hash)\n+                        for fallback_auth_hash in user.get_session_auth_fallback_hash()\n+                    ):\n+                        request.session.cycle_key()\n+                        request.session[HASH_SESSION_KEY] = session_auth_hash\n+                    else:\n+                        request.session.flush()\n+                        user = None\n \n     return user or AnonymousUser()\n \ndiff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -5,6 +5,7 @@\n import unicodedata\n import warnings\n \n+from django.conf import settings\n from django.contrib.auth import password_validation\n from django.contrib.auth.hashers import (\n     check_password,\n@@ -135,10 +136,18 @@ def get_session_auth_hash(self):\n         \"\"\"\n         Return an HMAC of the password field.\n         \"\"\"\n+        return self._get_session_auth_hash()\n+\n+    def get_session_auth_fallback_hash(self):\n+        for fallback_secret in settings.SECRET_KEY_FALLBACKS:\n+            yield self._get_session_auth_hash(secret=fallback_secret)\n+\n+    def _get_session_auth_hash(self, secret=None):\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n         return salted_hmac(\n             key_salt,\n             self.password,\n+            secret=secret,\n             algorithm=\"sha256\",\n         ).hexdigest()\n \n",
    "test_patch": "diff --git a/tests/auth_tests/test_basic.py b/tests/auth_tests/test_basic.py\n--- a/tests/auth_tests/test_basic.py\n+++ b/tests/auth_tests/test_basic.py\n@@ -1,3 +1,4 @@\n+from django.conf import settings\n from django.contrib.auth import get_user, get_user_model\n from django.contrib.auth.models import AnonymousUser, User\n from django.core.exceptions import ImproperlyConfigured\n@@ -138,3 +139,26 @@ def test_get_user(self):\n         user = get_user(request)\n         self.assertIsInstance(user, User)\n         self.assertEqual(user.username, created_user.username)\n+\n+    def test_get_user_fallback_secret(self):\n+        created_user = User.objects.create_user(\n+            \"testuser\", \"test@example.com\", \"testpw\"\n+        )\n+        self.client.login(username=\"testuser\", password=\"testpw\")\n+        request = HttpRequest()\n+        request.session = self.client.session\n+        prev_session_key = request.session.session_key\n+        with override_settings(\n+            SECRET_KEY=\"newsecret\",\n+            SECRET_KEY_FALLBACKS=[settings.SECRET_KEY],\n+        ):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n+            self.assertNotEqual(request.session.session_key, prev_session_key)\n+        # Remove the fallback secret.\n+        # The session hash should be updated using the current secret.\n+        with override_settings(SECRET_KEY=\"newsecret\"):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n",
    "problem_statement": "SECRET_KEY_FALLBACKS non viene utilizzato per le sessioni\nDescrizione\n\nRecentemente ho ruotato la mia chiave segreta, ho reso disponibile quella vecchia in SECRET_KEY_FALLBACKS e sono abbastanza sicuro che tutti gli utenti del nostro sito siano ora disconnessi.\nPenso che la documentazione per ​SECRET_KEY_FALLBACKS possa essere errata quando afferma quanto segue:\nPer ruotare le tue chiavi segrete, imposta una nuova SECRET_KEY e sposta il valore precedente all'inizio di SECRET_KEY_FALLBACKS. Quindi rimuovi i vecchi valori dalla fine di SECRET_KEY_FALLBACKS quando sei pronto a scadere le sessioni, i token di reimpostazione della password e così via, che ne fanno uso.\nEsaminando il codice sorgente di Django, vedo che la funzione ​salted_hmac utilizza SECRET_KEY per impostazione predefinita e il metodo ​AbstractBaseUser.get_session_auth_hash non chiama salted_hmac con un valore per l'argomento keyword secret.",
    "hints_text": "Ciao! Sono un collega di Eric, e stavamo discutendo alcune delle implicazioni della risoluzione di questo problema. Ho pensato di scriverle qui per futura memoria. In particolare, per le sessioni utente, l'uso delle chiavi di fallback in `AuthenticationMiddleware/auth.get_user(request)` manterrà i valori `_auth_user_hash` esistenti prima della rotazione come validi, il che è utile durante il periodo di rotazione. Tuttavia, senza alcun aggiornamento dei valori `_auth_user_hash`, quando la rotazione è completata e le chiavi di fallback vengono rimosse, tutte quelle sessioni verranno essenzialmente invalidate nuovamente. Quindi, penso che sia necessario un modo per aggiornare i cookie quando viene utilizzata una chiave di fallback? O almeno una documentazione che evidenzi questo svantaggio. Modifica: È possibile che stia confondendo un valore del cookie con un valore della sessione, ma in ogni caso penso che il principio di ciò che ho scritto rimanga valido.\n\nGrazie per la segnalazione. Concordo, dovremmo controllare gli hash delle sessioni di fallback. Bug in `0dcd549bbe36c060f536ec270d34d9e7d4b8e6c7`. In particolare per le sessioni utente, l'uso delle chiavi di fallback in `AuthenticationMiddleware/auth.get_user(request)` manterrà i valori `_auth_user_hash` esistenti prima della rotazione come validi, il che è utile durante il periodo di rotazione. Tuttavia, senza alcun aggiornamento dei valori `_auth_user_hash`, quando la rotazione è completata e le chiavi di fallback vengono rimosse, tutte quelle sessioni verranno essenzialmente invalidate nuovamente. Quindi, penso che sia necessario un modo per aggiornare i cookie quando viene utilizzata una chiave di fallback? O almeno una documentazione che evidenzi questo svantaggio. Modifica: È possibile che stia confondendo un valore del cookie con un valore della sessione, ma in ogni caso penso che il principio di ciò che ho scritto rimanga valido. Per quanto ne so, questa è una nuova richiesta di funzionalità e non un bug in #30360, quindi dovremmo discuterne separatamente. Forse potremmo chiamare `update_session_auth_hash()` quando un hash di fallback è valido 🤔",
    "created_at": "2023-03-06T15:19:52Z",
    "version": "5.0",
    "FAIL_TO_PASS": "[\"test_get_user_fallback_secret (auth_tests.test_basic.TestGetUser.test_get_user_fallback_secret)\"]",
    "PASS_TO_PASS": "[\"test_get_user (auth_tests.test_basic.TestGetUser.test_get_user)\", \"test_get_user_anonymous (auth_tests.test_basic.TestGetUser.test_get_user_anonymous)\", \"The current user model can be retrieved\", \"Check the creation and properties of a superuser\", \"test_superuser_no_email_or_password (auth_tests.test_basic.BasicTestCase.test_superuser_no_email_or_password)\", \"The current user model can be swapped out for another\", \"The alternate user setting must point to something in the format app.model\", \"The current user model must point to an installed model\", \"test_unicode_username (auth_tests.test_basic.BasicTestCase.test_unicode_username)\", \"Users can be created and can set their password\", \"Users can be created without an email\", \"Default User model verbose names are translatable (#19945)\"]",
    "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11400",
    "base_commit": "1f8382d34d54061eddc41df6994e20ee38c60907",
    "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,11 +193,17 @@ def has_output(self):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n+    def field_admin_ordering(self, field, request, model_admin):\n+        \"\"\"\n+        Return the model admin's ordering for related field, if provided.\n+        \"\"\"\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n+            return related_admin.get_ordering(request)\n+        return ()\n+\n+    def field_choices(self, field, request, model_admin):\n+        ordering = self.field_admin_ordering(field, request, model_admin)\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +425,5 @@ def choices(self, changelist):\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = self.field_admin_ordering(field, request, model_admin)\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -825,9 +825,11 @@ def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_\n             if hasattr(self.remote_field, 'get_related_field')\n             else 'pk'\n         )\n+        qs = rel_model._default_manager.complex_filter(limit_choices_to)\n+        if ordering:\n+            qs = qs.order_by(*ordering)\n         return (blank_choice if include_blank else []) + [\n-            (choice_func(x), str(x))\n-            for x in rel_model._default_manager.complex_filter(limit_choices_to).order_by(*ordering)\n+            (choice_func(x), str(x)) for x in qs\n         ]\n \n     def value_to_string(self, obj):\ndiff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -122,8 +122,11 @@ def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, orderi\n         Analog of django.db.models.fields.Field.get_choices(), provided\n         initially for utilization by RelatedFieldListFilter.\n         \"\"\"\n+        qs = self.related_model._default_manager.all()\n+        if ordering:\n+            qs = qs.order_by(*ordering)\n         return (blank_choice if include_blank else []) + [\n-            (x.pk, str(x)) for x in self.related_model._default_manager.order_by(*ordering)\n+            (x.pk, str(x)) for x in qs\n         ]\n \n     def is_hidden(self):\n",
    "test_patch": "diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -591,6 +591,22 @@ class BookAdmin(ModelAdmin):\n         expected = [(self.john.pk, 'John Blue'), (self.jack.pk, 'Jack Red')]\n         self.assertEqual(filterspec.lookup_choices, expected)\n \n+    def test_relatedfieldlistfilter_foreignkey_default_ordering(self):\n+        \"\"\"RelatedFieldListFilter ordering respects Model.ordering.\"\"\"\n+        class BookAdmin(ModelAdmin):\n+            list_filter = ('employee',)\n+\n+        self.addCleanup(setattr, Employee._meta, 'ordering', Employee._meta.ordering)\n+        Employee._meta.ordering = ('name',)\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(self.jack.pk, 'Jack Red'), (self.john.pk, 'John Blue')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedfieldlistfilter_manytomany(self):\n         modeladmin = BookAdmin(Book, site)\n \n@@ -696,6 +712,23 @@ def test_relatedfieldlistfilter_reverse_relationships(self):\n         filterspec = changelist.get_filters(request)[0]\n         self.assertEqual(len(filterspec), 0)\n \n+    def test_relatedfieldlistfilter_reverse_relationships_default_ordering(self):\n+        self.addCleanup(setattr, Book._meta, 'ordering', Book._meta.ordering)\n+        Book._meta.ordering = ('title',)\n+        modeladmin = CustomUserAdmin(User, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [\n+            (self.bio_book.pk, 'Django: a biography'),\n+            (self.djangonaut_book.pk, 'Djangonaut: an art of living'),\n+            (self.guitar_book.pk, 'Guitar for dummies'),\n+            (self.django_book.pk, 'The Django Book')\n+        ]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedonlyfieldlistfilter_foreignkey(self):\n         modeladmin = BookAdminRelatedOnlyFilter(Book, site)\n \n@@ -708,6 +741,57 @@ def test_relatedonlyfieldlistfilter_foreignkey(self):\n         expected = [(self.alfred.pk, 'alfred'), (self.bob.pk, 'bob')]\n         self.assertEqual(sorted(filterspec.lookup_choices), sorted(expected))\n \n+    def test_relatedonlyfieldlistfilter_foreignkey_ordering(self):\n+        \"\"\"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\"\"\"\n+        class EmployeeAdminWithOrdering(ModelAdmin):\n+            ordering = ('name',)\n+\n+        class BookAdmin(ModelAdmin):\n+            list_filter = (\n+                ('employee', RelatedOnlyFieldListFilter),\n+            )\n+\n+        albert = Employee.objects.create(name='Albert Green', department=self.dev)\n+        self.djangonaut_book.employee = albert\n+        self.djangonaut_book.save()\n+        self.bio_book.employee = self.jack\n+        self.bio_book.save()\n+\n+        site.register(Employee, EmployeeAdminWithOrdering)\n+        self.addCleanup(lambda: site.unregister(Employee))\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(albert.pk, 'Albert Green'), (self.jack.pk, 'Jack Red')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n+    def test_relatedonlyfieldlistfilter_foreignkey_default_ordering(self):\n+        \"\"\"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\"\"\"\n+        class BookAdmin(ModelAdmin):\n+            list_filter = (\n+                ('employee', RelatedOnlyFieldListFilter),\n+            )\n+\n+        albert = Employee.objects.create(name='Albert Green', department=self.dev)\n+        self.djangonaut_book.employee = albert\n+        self.djangonaut_book.save()\n+        self.bio_book.employee = self.jack\n+        self.bio_book.save()\n+\n+        self.addCleanup(setattr, Employee._meta, 'ordering', Employee._meta.ordering)\n+        Employee._meta.ordering = ('name',)\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(albert.pk, 'Albert Green'), (self.jack.pk, 'Jack Red')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedonlyfieldlistfilter_underscorelookup_foreignkey(self):\n         Department.objects.create(code='TEST', description='Testing')\n         self.djangonaut_book.employee = self.john\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -222,9 +222,9 @@ class GetChoicesOrderingTests(TestCase):\n \n     @classmethod\n     def setUpTestData(cls):\n-        cls.foo1 = Foo.objects.create(a='a', d='12.34')\n+        cls.foo1 = Foo.objects.create(a='a', d='12.35')\n         cls.foo2 = Foo.objects.create(a='b', d='12.34')\n-        cls.bar1 = Bar.objects.create(a=cls.foo1, b='a')\n+        cls.bar1 = Bar.objects.create(a=cls.foo1, b='b')\n         cls.bar2 = Bar.objects.create(a=cls.foo2, b='a')\n         cls.field = Bar._meta.get_field('a')\n \n@@ -241,6 +241,14 @@ def test_get_choices(self):\n             [self.foo2, self.foo1]\n         )\n \n+    def test_get_choices_default_ordering(self):\n+        self.addCleanup(setattr, Foo._meta, 'ordering', Foo._meta.ordering)\n+        Foo._meta.ordering = ('d',)\n+        self.assertChoicesEqual(\n+            self.field.get_choices(include_blank=False),\n+            [self.foo2, self.foo1]\n+        )\n+\n     def test_get_choices_reverse_related_field(self):\n         self.assertChoicesEqual(\n             self.field.remote_field.get_choices(include_blank=False, ordering=('a',)),\n@@ -250,3 +258,11 @@ def test_get_choices_reverse_related_field(self):\n             self.field.remote_field.get_choices(include_blank=False, ordering=('-a',)),\n             [self.bar2, self.bar1]\n         )\n+\n+    def test_get_choices_reverse_related_field_default_ordering(self):\n+        self.addCleanup(setattr, Bar._meta, 'ordering', Bar._meta.ordering)\n+        Bar._meta.ordering = ('b',)\n+        self.assertChoicesEqual(\n+            self.field.remote_field.get_choices(include_blank=False),\n+            [self.bar2, self.bar1]\n+        )\n",
    "problem_statement": "Problema di ordinamento in admin.RelatedFieldListFilter e admin.RelatedOnlyFieldListFilter\nDescrizione\n\nRelatedFieldListFilter non ricorre all'ordinamento definito in Model._meta.ordering. \nL'ordinamento viene impostato su una tupla vuota in ​https://github.com/django/django/blob/2.2.1/django/contrib/admin/filters.py#L196 e, a meno che l'ordinamento non sia definito nella classe ModelAdmin del modello correlato, rimane una tupla vuota. A mio parere, dovrebbe usare l'ordinamento predefinito definito nel campo Meta.ordering del modello correlato.\nRelatedOnlyFieldListFilter non ordina affatto il modello correlato, anche se l'ordinamento è definito nella classe ModelAdmin del modello correlato.\nQuesto accade perché la chiamata a field.get_choices ​https://github.com/django/django/blob/2.2.1/django/contrib/admin/filters.py#L422 omette completamente l'argomento `ordering`.",
    "hints_text": "Progetto di esempio che illustra il problema. Naviga su /admin/foo/book e osserva l'ordine di Author nei filtri della lista.\nScreenshot di RelatedOnlyFieldListFilter che non ordina gli elementi.\nOK, sì, sembra una suggerimento ragionevole se vuoi lavorarci.\nCiao. Abbiamo aggiornato recentemente Django e ci siamo imbattuti in questo bug. Per me sembra una regressione piuttosto significativa. Come vedo nella PR, la patch è stata aggiornata e sono stati aggiunti anche i test appropriati, quindi suggerisco di considerare di includerla nella 2.2.4 e di backportarla (almeno) alla 2.1.\nPer quanto mi riguarda, non si tratta di una regressione e non soddisfa i requisiti per un backport. È nella mia lista e dovrebbe essere corretto in Django 3.0.\nHo chiuso #30703 come duplicato. È una regressione introdotta in #29835.\nPR alternativa.\nSosterrei che si tratta di una regressione. Funzionava prima ed è chiaramente rotto ora. Ci sono soluzioni alternative per il momento?\nRisposta a tinodb: Sosterrei che si tratta di una regressione. Funzionava prima ed è chiaramente rotto ora. Ci sono soluzioni alternative per il momento? Sì, abbiamo contrassegnato questo come una regressione e un blocco per il rilascio (si prega di controllare il mio commento precedente).",
    "created_at": "2019-05-22T11:30:39Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_get_choices_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"RelatedFieldListFilter ordering respects Model.ordering.\", \"test_relatedfieldlistfilter_reverse_relationships_default_ordering (admin_filters.tests.ListFiltersTests)\", \"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\", \"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\"]",
    "PASS_TO_PASS": "[\"test_choices_and_field_display (model_fields.tests.GetFieldDisplayTests)\", \"test_empty_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"A translated display value is coerced to str.\", \"test_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"test_check (model_fields.tests.ChoicesTests)\", \"test_choices (model_fields.tests.ChoicesTests)\", \"test_flatchoices (model_fields.tests.ChoicesTests)\", \"test_formfield (model_fields.tests.ChoicesTests)\", \"test_invalid_choice (model_fields.tests.ChoicesTests)\", \"test_blank_in_choices (model_fields.tests.GetChoicesTests)\", \"test_blank_in_grouped_choices (model_fields.tests.GetChoicesTests)\", \"test_empty_choices (model_fields.tests.GetChoicesTests)\", \"test_lazy_strings_not_evaluated (model_fields.tests.GetChoicesTests)\", \"Can supply a custom choices form class to Field.formfield()\", \"deconstruct() uses __qualname__ for nested class support.\", \"Field instances can be pickled.\", \"test_field_name (model_fields.tests.BasicFieldTests)\", \"Fields are ordered based on their creation.\", \"test_field_repr (model_fields.tests.BasicFieldTests)\", \"__repr__() uses __qualname__ for nested class support.\", \"test_field_str (model_fields.tests.BasicFieldTests)\", \"test_field_verbose_name (model_fields.tests.BasicFieldTests)\", \"Field.formfield() sets disabled for fields with choices.\", \"test_show_hidden_initial (model_fields.tests.BasicFieldTests)\", \"test_get_choices (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesOrderingTests)\", \"test_allvaluesfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_allvaluesfieldlistfilter_custom_qs (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_nullbooleanfield (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple (admin_filters.tests.ListFiltersTests)\", \"test_choicesfieldlistfilter_has_none_choice (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter_with_time_zone_support (admin_filters.tests.ListFiltersTests)\", \"Filtering by an invalid value.\", \"test_fieldlistfilter_underscorelookup_tuple (admin_filters.tests.ListFiltersTests)\", \"test_filter_with_failing_queryset (admin_filters.tests.ListFiltersTests)\", \"test_fk_with_to_field (admin_filters.tests.ListFiltersTests)\", \"test_list_filter_queryset_filtered_by_default (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_without_title (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_dynamic_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value_underscored (admin_filters.tests.ListFiltersTests)\", \"test_parameter_ends_with__in__or__isnull (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedfieldlistfilter_foreignkey_ordering_reverse (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_underscorelookup_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_none_returning_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_queryset_based_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_without_parameter (admin_filters.tests.ListFiltersTests)\", \"test_two_characters_long_field (admin_filters.tests.ListFiltersTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13344",
    "base_commit": "e39e727ded673e74016b5d3658d23cbe20234d11",
    "patch": "diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py\n--- a/django/contrib/sessions/middleware.py\n+++ b/django/contrib/sessions/middleware.py\n@@ -13,9 +13,7 @@ class SessionMiddleware(MiddlewareMixin):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response):\n     def __init__(self, get_response=None):\n-        self._get_response_none_deprecation(get_response)\n-        self.get_response = get_response\n-        self._async_check()\n+        super().__init__(get_response)\n         engine = import_module(settings.SESSION_ENGINE)\n         self.SessionStore = engine.SessionStore\n \ndiff --git a/django/middleware/cache.py b/django/middleware/cache.py\n--- a/django/middleware/cache.py\n+++ b/django/middleware/cache.py\n@@ -64,13 +64,12 @@ class UpdateCacheMiddleware(MiddlewareMixin):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response):\n     def __init__(self, get_response=None):\n-        self._get_response_none_deprecation(get_response)\n+        super().__init__(get_response)\n         self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n         self.page_timeout = None\n         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n         self.cache = caches[self.cache_alias]\n-        self.get_response = get_response\n \n     def _should_update_cache(self, request, response):\n         return hasattr(request, '_cache_update_cache') and request._cache_update_cache\n@@ -128,11 +127,10 @@ class FetchFromCacheMiddleware(MiddlewareMixin):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response):\n     def __init__(self, get_response=None):\n-        self._get_response_none_deprecation(get_response)\n+        super().__init__(get_response)\n         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n         self.cache = caches[self.cache_alias]\n-        self.get_response = get_response\n \n     def process_request(self, request):\n         \"\"\"\n@@ -173,8 +171,7 @@ class CacheMiddleware(UpdateCacheMiddleware, FetchFromCacheMiddleware):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response, cache_timeout=None, page_timeout=None, **kwargs):\n     def __init__(self, get_response=None, cache_timeout=None, page_timeout=None, **kwargs):\n-        self._get_response_none_deprecation(get_response)\n-        self.get_response = get_response\n+        super().__init__(get_response)\n         # We need to differentiate between \"provided, but using default value\",\n         # and \"not provided\". If the value is provided using a default, then\n         # we fall back to system defaults. If it is not provided at all,\n@@ -184,20 +181,18 @@ def __init__(self, get_response=None, cache_timeout=None, page_timeout=None, **k\n             key_prefix = kwargs['key_prefix']\n             if key_prefix is None:\n                 key_prefix = ''\n+            self.key_prefix = key_prefix\n         except KeyError:\n-            key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n-        self.key_prefix = key_prefix\n-\n+            pass\n         try:\n             cache_alias = kwargs['cache_alias']\n             if cache_alias is None:\n                 cache_alias = DEFAULT_CACHE_ALIAS\n+            self.cache_alias = cache_alias\n+            self.cache = caches[self.cache_alias]\n         except KeyError:\n-            cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n-        self.cache_alias = cache_alias\n+            pass\n \n-        if cache_timeout is None:\n-            cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n-        self.cache_timeout = cache_timeout\n+        if cache_timeout is not None:\n+            self.cache_timeout = cache_timeout\n         self.page_timeout = page_timeout\n-        self.cache = caches[self.cache_alias]\ndiff --git a/django/middleware/security.py b/django/middleware/security.py\n--- a/django/middleware/security.py\n+++ b/django/middleware/security.py\n@@ -9,7 +9,7 @@ class SecurityMiddleware(MiddlewareMixin):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response):\n     def __init__(self, get_response=None):\n-        self._get_response_none_deprecation(get_response)\n+        super().__init__(get_response)\n         self.sts_seconds = settings.SECURE_HSTS_SECONDS\n         self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n         self.sts_preload = settings.SECURE_HSTS_PRELOAD\n@@ -19,7 +19,6 @@ def __init__(self, get_response=None):\n         self.redirect_host = settings.SECURE_SSL_HOST\n         self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n         self.referrer_policy = settings.SECURE_REFERRER_POLICY\n-        self.get_response = get_response\n \n     def process_request(self, request):\n         path = request.path.lstrip(\"/\")\n",
    "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -2083,6 +2083,7 @@ def test_constructor(self):\n         self.assertEqual(middleware.cache_timeout, 30)\n         self.assertEqual(middleware.key_prefix, 'middlewareprefix')\n         self.assertEqual(middleware.cache_alias, 'other')\n+        self.assertEqual(middleware.cache, self.other_cache)\n \n         # If more arguments are being passed in construction, it's being used\n         # as a decorator. First, test with \"defaults\":\n@@ -2092,6 +2093,7 @@ def test_constructor(self):\n         self.assertEqual(as_view_decorator.key_prefix, '')\n         # Value of DEFAULT_CACHE_ALIAS from django.core.cache\n         self.assertEqual(as_view_decorator.cache_alias, 'default')\n+        self.assertEqual(as_view_decorator.cache, self.default_cache)\n \n         # Next, test with custom values:\n         as_view_decorator_with_custom = CacheMiddleware(\n@@ -2101,6 +2103,21 @@ def test_constructor(self):\n         self.assertEqual(as_view_decorator_with_custom.cache_timeout, 60)\n         self.assertEqual(as_view_decorator_with_custom.key_prefix, 'foo')\n         self.assertEqual(as_view_decorator_with_custom.cache_alias, 'other')\n+        self.assertEqual(as_view_decorator_with_custom.cache, self.other_cache)\n+\n+    def test_update_cache_middleware_constructor(self):\n+        middleware = UpdateCacheMiddleware(empty_response)\n+        self.assertEqual(middleware.cache_timeout, 30)\n+        self.assertIsNone(middleware.page_timeout)\n+        self.assertEqual(middleware.key_prefix, 'middlewareprefix')\n+        self.assertEqual(middleware.cache_alias, 'other')\n+        self.assertEqual(middleware.cache, self.other_cache)\n+\n+    def test_fetch_cache_middleware_constructor(self):\n+        middleware = FetchFromCacheMiddleware(empty_response)\n+        self.assertEqual(middleware.key_prefix, 'middlewareprefix')\n+        self.assertEqual(middleware.cache_alias, 'other')\n+        self.assertEqual(middleware.cache, self.other_cache)\n \n     def test_middleware(self):\n         middleware = CacheMiddleware(hello_world_view)\ndiff --git a/tests/deprecation/test_middleware_mixin.py b/tests/deprecation/test_middleware_mixin.py\n--- a/tests/deprecation/test_middleware_mixin.py\n+++ b/tests/deprecation/test_middleware_mixin.py\n@@ -1,15 +1,31 @@\n+import asyncio\n import threading\n \n from asgiref.sync import async_to_sync\n \n+from django.contrib.admindocs.middleware import XViewMiddleware\n+from django.contrib.auth.middleware import (\n+    AuthenticationMiddleware, RemoteUserMiddleware,\n+)\n+from django.contrib.flatpages.middleware import FlatpageFallbackMiddleware\n+from django.contrib.messages.middleware import MessageMiddleware\n+from django.contrib.redirects.middleware import RedirectFallbackMiddleware\n from django.contrib.sessions.middleware import SessionMiddleware\n+from django.contrib.sites.middleware import CurrentSiteMiddleware\n from django.db import connection\n from django.http.request import HttpRequest\n from django.http.response import HttpResponse\n from django.middleware.cache import (\n     CacheMiddleware, FetchFromCacheMiddleware, UpdateCacheMiddleware,\n )\n-from django.middleware.common import CommonMiddleware\n+from django.middleware.clickjacking import XFrameOptionsMiddleware\n+from django.middleware.common import (\n+    BrokenLinkEmailsMiddleware, CommonMiddleware,\n+)\n+from django.middleware.csrf import CsrfViewMiddleware\n+from django.middleware.gzip import GZipMiddleware\n+from django.middleware.http import ConditionalGetMiddleware\n+from django.middleware.locale import LocaleMiddleware\n from django.middleware.security import SecurityMiddleware\n from django.test import SimpleTestCase\n from django.utils.deprecation import MiddlewareMixin, RemovedInDjango40Warning\n@@ -20,30 +36,57 @@ class MiddlewareMixinTests(SimpleTestCase):\n     Deprecation warning is raised when using get_response=None.\n     \"\"\"\n     msg = 'Passing None for the middleware get_response argument is deprecated.'\n+    middlewares = [\n+        AuthenticationMiddleware,\n+        BrokenLinkEmailsMiddleware,\n+        CacheMiddleware,\n+        CommonMiddleware,\n+        ConditionalGetMiddleware,\n+        CsrfViewMiddleware,\n+        CurrentSiteMiddleware,\n+        FetchFromCacheMiddleware,\n+        FlatpageFallbackMiddleware,\n+        GZipMiddleware,\n+        LocaleMiddleware,\n+        MessageMiddleware,\n+        RedirectFallbackMiddleware,\n+        RemoteUserMiddleware,\n+        SecurityMiddleware,\n+        SessionMiddleware,\n+        UpdateCacheMiddleware,\n+        XFrameOptionsMiddleware,\n+        XViewMiddleware,\n+    ]\n \n     def test_deprecation(self):\n-        with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):\n-            CommonMiddleware()\n+        for middleware in self.middlewares:\n+            with self.subTest(middleware=middleware):\n+                with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):\n+                    middleware()\n \n     def test_passing_explicit_none(self):\n-        with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):\n-            CommonMiddleware(None)\n-\n-    def test_subclass_deprecation(self):\n-        \"\"\"\n-        Deprecation warning is raised in subclasses overriding __init__()\n-        without calling super().\n-        \"\"\"\n-        for middleware in [\n-            SessionMiddleware,\n-            CacheMiddleware,\n-            FetchFromCacheMiddleware,\n-            UpdateCacheMiddleware,\n-            SecurityMiddleware,\n-        ]:\n+        for middleware in self.middlewares:\n             with self.subTest(middleware=middleware):\n                 with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):\n-                    middleware()\n+                    middleware(None)\n+\n+    def test_coroutine(self):\n+        async def async_get_response(request):\n+            return HttpResponse()\n+\n+        def sync_get_response(request):\n+            return HttpResponse()\n+\n+        for middleware in self.middlewares:\n+            with self.subTest(middleware=middleware.__qualname__):\n+                # Middleware appears as coroutine if get_function is\n+                # a coroutine.\n+                middleware_instance = middleware(async_get_response)\n+                self.assertIs(asyncio.iscoroutinefunction(middleware_instance), True)\n+                # Middleware doesn't appear as coroutine if get_function is not\n+                # a coroutine.\n+                middleware_instance = middleware(sync_get_response)\n+                self.assertIs(asyncio.iscoroutinefunction(middleware_instance), False)\n \n     def test_sync_to_async_uses_base_thread_and_connection(self):\n         \"\"\"\ndiff --git a/tests/runtests.py b/tests/runtests.py\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -90,8 +90,9 @@\n # avoid \"RuntimeError: Model class X doesn't declare an explicit app_label\n # and isn't in an application in INSTALLED_APPS.\"\n CONTRIB_TESTS_TO_APPS = {\n-    'flatpages_tests': 'django.contrib.flatpages',\n-    'redirects_tests': 'django.contrib.redirects',\n+    'deprecation': ['django.contrib.flatpages', 'django.contrib.redirects'],\n+    'flatpages_tests': ['django.contrib.flatpages'],\n+    'redirects_tests': ['django.contrib.redirects'],\n }\n \n \n@@ -228,7 +229,9 @@ def _module_match_label(module_label, label):\n         )\n \n         if module_name in CONTRIB_TESTS_TO_APPS and module_found_in_labels:\n-            settings.INSTALLED_APPS.append(CONTRIB_TESTS_TO_APPS[module_name])\n+            for contrib_app in CONTRIB_TESTS_TO_APPS[module_name]:\n+                if contrib_app not in settings.INSTALLED_APPS:\n+                    settings.INSTALLED_APPS.append(contrib_app)\n \n         if module_found_in_labels and module_label not in installed_app_names:\n             if verbosity >= 2:\n",
    "problem_statement": "Coroutine passato al primo middleware's `process_response()` invece di `HttpResponse`.\n\n**Descrizione**\n\nCome indicato nel titolo, utilizzando ASGI (+ uvicorn nel mio caso), il primo middleware (secondo l'elenco in `settings.py`) riceve una coroutine come parametro di risposta, mentre tutti gli altri middleware successivi ricevono un oggetto `django.http.response.HttpResponse`.\nQuesto sembra aver causato un problema nel pacchetto `django-cors-headers`, che spesso viene posizionato per primo nell'ordine:\nhttps://github.com/adamchainz/django-cors-headers/issues/558\n\n**Come riprodurre:**\n\n1. Configura un progetto Django 3.1 con un server asincrono (uvicorn nel mio caso)\n2. Crea una classe middleware fittizia che stampa i tipi di argomenti che riceve nel suo metodo `process_response`:\n\n```python\nclass DummyMiddleware(MiddlewareMixin):\n    def process_response(self, request, response):\n        print(request.__class__, response.__class__)\n```\n\n3. Configura il middleware come primo in `settings.py`:\n\n```python\nMIDDLEWARE = [\n    'django_uvicorn_test.middleware.DummyMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    ...\n]\n```\n\n4. Avvia il server ed esegui una richiesta qualsiasi, osserva l'output della console:\n\n```\n<class 'django.core.handlers.asgi.ASGIRequest'> <class 'coroutine'>\n```\n\n5. Sposta il middleware più in basso nella lista, riavvia il server ed esegui nuovamente una richiesta:\n\n```\n<class 'django.core.handlers.asgi.ASGIRequest'> <class 'django.http.response.HttpResponse'>\n```",
    "hints_text": "Accettato provvisoriamente per l'indagine. Non si tratta del primo middleware perché se ne hai solo uno, riceve HttpResponse, ma se ne hai almeno due, allora il primo nella catena riceve una coroutine. Andrew, puoi dare un'occhiata?\nPenso che sia un bug in SecurityMiddleware: il suo __init__ non chiama super().__init__(). Questo causa che MiddlewareMixin._async_check() non venga chiamato durante l'inizializzazione e che l'attributo magico _is_coroutine manchi nonostante la dichiarazione async_capable=True.\nCiao Kevin. Ottima osservazione! :) Ti va di fare una PR rapida per questo? (È nella mia lista se non lo fai...) Grazie\nCiao! Sì, posso fare una PR per questo :) Vedo che i middleware correlati alla cache hanno lo stesso problema, preferiresti una PR comune con tutti i middleware corretti o dovrei fare una PR separata per la cache? I 3 middleware della cache (UpdateCacheMiddleware, FetchFromCacheMiddleware, CacheMiddleware) probabilmente dovranno essere modificati insieme poiché sono correlati per ereditarietà.\nCiao Kevin. Preferiresti una PR comune con tutti i middleware corretti o dovrei fare una PR separata per la cache? È un problema singolo, quindi una singola PR dovrebbe andare bene. (Possiamo fare tre commit se sembra meglio, ma è un problema singolo, giusto? :) Non ho ancora approfondito, quindi sei avanti a me, ma se riesci a ridurre il problema in un caso di test (o tre...), penso che sia la cosa principale. Grazie per il contributo! Super. 👌\n​PR\nBella scoperta - non riesco a credere di non averlo visto durante i test. Concordo con la diagnosi del problema, darò un'occhiata alla PR.",
    "created_at": "2020-08-24T20:50:35Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_coroutine (deprecation.test_middleware_mixin.MiddlewareMixinTests)\", \"test_deprecation (deprecation.test_middleware_mixin.MiddlewareMixinTests)\"]",
    "PASS_TO_PASS": "[\"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"test_per_thread (cache.tests.CacheHandlerTest)\", \"test_same_instance (cache.tests.CacheHandlerTest)\", \"If None is cached, get() returns it instead of the default.\", \"test_cache_key_varies_by_url (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_cache_key_varies_by_url (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_passing_explicit_none (deprecation.test_middleware_mixin.MiddlewareMixinTests)\", \"test_sync_to_async_uses_base_thread_and_connection (deprecation.test_middleware_mixin.MiddlewareMixinTests)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\", \"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_cache_page_timeout (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"test_constructor (cache.tests.CacheMiddlewareTest)\", \"test_fetch_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"test_sensitive_cookie_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_update_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_delete_nonexistent (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_forever_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"test_long_timeout (cache.tests.LocMemCacheTests)\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_zero_timeout (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_forever_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_long_timeout (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_zero_timeout (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.FileBasedCachePathLibTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_binary_string (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)\", \"test_clear (cache.tests.FileBasedCachePathLibTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)\", \"test_close (cache.tests.FileBasedCachePathLibTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCachePathLibTests)\", \"test_custom_key_func (cache.tests.FileBasedCachePathLibTests)\", \"test_data_types (cache.tests.FileBasedCachePathLibTests)\", \"test_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_decr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_many (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)\", \"test_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_float_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_forever_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)\", \"test_get_many (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)\", \"test_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)\", \"test_in (cache.tests.FileBasedCachePathLibTests)\", \"test_incr (cache.tests.FileBasedCachePathLibTests)\", \"test_incr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)\", \"test_long_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_prefix (cache.tests.FileBasedCachePathLibTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_simple (cache.tests.FileBasedCachePathLibTests)\", \"test_touch (cache.tests.FileBasedCachePathLibTests)\", \"test_unicode (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheTests)\", \"test_cull (cache.tests.DBCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_delete_nonexistent (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_forever_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_long_timeout (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_zero_timeout (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_forever_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_long_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_timeout (cache.tests.DBCacheWithTimeZoneTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-17630",
    "base_commit": "58e78209c8577b9890e957b624466e5beed7eb08",
    "patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -627,6 +627,8 @@ def _postprocessor(expr):\n                 # manipulate them like non-commutative scalars.\n                 return cls._from_args(nonmatrices + [mat_class(*matrices).doit(deep=False)])\n \n+        if mat_class == MatAdd:\n+            return mat_class(*matrices).doit(deep=False)\n         return mat_class(cls._from_args(nonmatrices), *matrices).doit(deep=False)\n     return _postprocessor\n \n",
    "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -3,7 +3,7 @@\n     BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse,\n     blockcut, reblock_2x2, deblock)\n from sympy.matrices.expressions import (MatrixSymbol, Identity,\n-        Inverse, trace, Transpose, det)\n+        Inverse, trace, Transpose, det, ZeroMatrix)\n from sympy.matrices import (\n     Matrix, ImmutableMatrix, ImmutableSparseMatrix)\n from sympy.core import Tuple, symbols, Expr\n@@ -104,6 +104,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_17624():\n+    a = MatrixSymbol(\"a\", 2, 2)\n+    z = ZeroMatrix(2, 2)\n+    b = BlockMatrix([[a, z], [z, z]])\n+    assert block_collapse(b * b) == BlockMatrix([[a**2, z], [z, z]])\n+    assert block_collapse(b * b * b) == BlockMatrix([[a**3, z], [z, z]])\n+\n def test_BlockMatrix_trace():\n     A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n     X = BlockMatrix([[A, B], [C, D]])\ndiff --git a/sympy/matrices/expressions/tests/test_matadd.py b/sympy/matrices/expressions/tests/test_matadd.py\n--- a/sympy/matrices/expressions/tests/test_matadd.py\n+++ b/sympy/matrices/expressions/tests/test_matadd.py\n@@ -1,7 +1,8 @@\n from sympy.matrices.expressions import MatrixSymbol, MatAdd, MatPow, MatMul\n-from sympy.matrices.expressions.matexpr import GenericZeroMatrix\n+from sympy.matrices.expressions.matexpr import GenericZeroMatrix, ZeroMatrix\n from sympy.matrices import eye, ImmutableMatrix\n-from sympy.core import Basic, S\n+from sympy.core import Add, Basic, S\n+from sympy.utilities.pytest import XFAIL, raises\n \n X = MatrixSymbol('X', 2, 2)\n Y = MatrixSymbol('Y', 2, 2)\n@@ -30,3 +31,11 @@ def test_doit_args():\n def test_generic_identity():\n     assert MatAdd.identity == GenericZeroMatrix()\n     assert MatAdd.identity != S.Zero\n+\n+\n+def test_zero_matrix_add():\n+    assert Add(ZeroMatrix(2, 2), ZeroMatrix(2, 2)) == ZeroMatrix(2, 2)\n+\n+@XFAIL\n+def test_matrix_add_with_scalar():\n+    raises(TypeError, lambda: Add(0, ZeroMatrix(2, 2)))\n",
    "problem_statement": "Eccezione durante la moltiplicazione di una BlockMatrix contenente blocchi ZeroMatrix\nQuando viene definita una matrice a blocchi con blocchi zero:\n\n```\n>>> from sympy import *\n>>> a = MatrixSymbol(\"a\", 2, 2)\n>>> z = ZeroMatrix(2, 2)\n>>> b = BlockMatrix([[a, z], [z, z]])\n```\n\nla moltiplicazione a blocchi sembra funzionare correttamente una volta:\n\n```\n>>> block_collapse(b * b)\nMatrix([\n[a**2, 0],\n[0, 0]])\n>>> b._blockmul(b)\nMatrix([\n[a**2, 0],\n[0, 0]])\n```\n\nma la moltiplicazione a blocchi due volte genera un'eccezione:\n\n```\n>>> block_collapse(b * b * b)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 297, in block_collapse\n    result = rule(expr)\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\n    new, old = rule(expr), expr\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 44, in chain_rl\n    expr = rule(expr)\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\n    new, old = rule(expr), expr\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 33, in conditioned_rl\n    return rule(expr)\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 95, in switch_rl\n    return rl(expr)\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 361, in bc_matmul\n    matrices[i] = A._blockmul(B)\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\n    self.colblocksizes == other.rowblocksizes):\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in <listcomp>\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\nAttributeError: 'Zero' object has no attribute 'cols'\n>>> b._blockmul(b)._blockmul(b)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\n    self.colblocksizes == other.rowblocksizes):\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in <listcomp>\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\nAttributeError: 'Zero' object has no attribute 'cols'\n```\n\nQuesto sembra essere causato dal fatto che gli zeri in `b._blockmul(b)` non sono `ZeroMatrix` ma `Zero`:\n\n```\n>>> type(b._blockmul(b).blocks[0, 1])\n<class 'sympy.core.numbers.Zero'>\n```\n\nTuttavia, non comprendo abbastanza bene i meccanismi interni di SymPy per capire perché ciò accade. Utilizzo Python 3.7.4 e sympy 1.4 (installato con pip).",
    "hints_text": null,
    "created_at": "2019-09-18T22:56:31Z",
    "version": "1.5",
    "FAIL_TO_PASS": "[\"test_issue_17624\", \"test_zero_matrix_add\"]",
    "PASS_TO_PASS": "[\"test_bc_matmul\", \"test_bc_matadd\", \"test_bc_transpose\", \"test_bc_dist_diag\", \"test_block_plus_ident\", \"test_BlockMatrix\", \"test_block_collapse_explicit_matrices\", \"test_BlockMatrix_trace\", \"test_BlockMatrix_Determinant\", \"test_squareBlockMatrix\", \"test_BlockDiagMatrix\", \"test_blockcut\", \"test_reblock_2x2\", \"test_deblock\", \"test_sort_key\", \"test_matadd_sympify\", \"test_matadd_of_matrices\", \"test_doit_args\", \"test_generic_identity\"]",
    "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-13579",
    "base_commit": "0df94ff7097961e92fd7812036a24b145bc13ca8",
    "patch": "diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n@@ -243,6 +243,8 @@ def pixel_to_world_values(self, *pixel_arrays):\n         return world_arrays\n \n     def world_to_pixel_values(self, *world_arrays):\n+        sliced_out_world_coords = self._pixel_to_world_values_all(*[0]*len(self._pixel_keep))\n+\n         world_arrays = tuple(map(np.asanyarray, world_arrays))\n         world_arrays_new = []\n         iworld_curr = -1\n@@ -251,7 +253,7 @@ def world_to_pixel_values(self, *world_arrays):\n                 iworld_curr += 1\n                 world_arrays_new.append(world_arrays[iworld_curr])\n             else:\n-                world_arrays_new.append(1.)\n+                world_arrays_new.append(sliced_out_world_coords[iworld])\n \n         world_arrays_new = np.broadcast_arrays(*world_arrays_new)\n         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))\n",
    "test_patch": "diff --git a/astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py\n--- a/astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py\n+++ b/astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py\n@@ -899,3 +899,39 @@ def test_pixel_to_world_values_different_int_types():\n     for int_coord, np64_coord in zip(int_sliced.pixel_to_world_values(*pixel_arrays),\n                                      np64_sliced.pixel_to_world_values(*pixel_arrays)):\n         assert all(int_coord == np64_coord)\n+\n+\n+COUPLED_WCS_HEADER = {\n+    'WCSAXES': 3,\n+    'CRPIX1': (100 + 1)/2,\n+    'CRPIX2': (25 + 1)/2,\n+    'CRPIX3': 1.0,\n+    'PC1_1': 0.0,\n+    'PC1_2': -1.0,\n+    'PC1_3': 0.0,\n+    'PC2_1': 1.0,\n+    'PC2_2': 0.0,\n+    'PC2_3': -1.0,\n+    'CDELT1': 5,\n+    'CDELT2': 5,\n+    'CDELT3': 0.055,\n+    'CUNIT1': 'arcsec',\n+    'CUNIT2': 'arcsec',\n+    'CUNIT3': 'Angstrom',\n+    'CTYPE1': 'HPLN-TAN',\n+    'CTYPE2': 'HPLT-TAN',\n+    'CTYPE3': 'WAVE',\n+    'CRVAL1': 0.0,\n+    'CRVAL2': 0.0,\n+    'CRVAL3': 1.05,\n+\n+}\n+\n+\n+def test_coupled_world_slicing():\n+    fits_wcs = WCS(header=COUPLED_WCS_HEADER)\n+    sl = SlicedLowLevelWCS(fits_wcs, 0)\n+    world = fits_wcs.pixel_to_world_values(0,0,0)\n+    out_pix = sl.world_to_pixel_values(world[0], world[1])\n+\n+    assert np.allclose(out_pix[0], 0)\n",
    "problem_statement": "Comportamento incoerente di `world_to_pixel` in `SlicedLowLevelWCS` \n<!-- Questo commento è nascosto quando invii il problema,\r\nquindi non è necessario rimuoverlo! -->\r\n\r\n<!-- Assicurati di consultare le nostre linee guida per il contributo,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nAssicurati di consultare il nostro codice di condotta,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Effettua una ricerca nel nostro repository GitHub per verificare se un problema simile\r\nè già stato pubblicato.\r\nSe un problema simile è chiuso, dai un'occhiata veloce per vedere se sei soddisfatto\r\ndella risoluzione.\r\nIn caso contrario, procedi pure e apri un problema! -->\r\n\r\n<!-- Verifica che la versione di sviluppo produca ancora lo stesso bug.\r\nPuoi installare la versione di sviluppo con\r\npip install git+https://github.com/astropy/astropy\r\ncomando. -->\r\n\r\n### Descrizione\r\n<!-- Fornisci una descrizione generale del bug. -->\r\n\r\nHo un WCS 3D con dimensioni corrispondenti a spazio, spazio e lunghezza d'onda e ciò che alcuni potrebbero chiamare una matrice PCij non banale che accoppia le dimensioni spettrali e spaziali. Trovo che quando eseguo un world_to_pixel sul WCS completo (non affettato), ottengo il risultato atteso. Tuttavia, quando eseguo la stessa operazione world_to_pixel su una singola fetta di lunghezza d'onda (ovvero una fetta 2D con dimensioni corrispondenti a spazio, spazio), il mio world_to_pixel restituisce un risultato errato per una delle dimensioni.\r\n\r\nQuesto problema è stato originariamente pubblicato come sunpy/ndcube#529, ma l'ho spostato qui poiché sembra essere un problema con `SlicedLowLevelWCS` piuttosto che qualcosa di specifico per `ndcube`.\r\n\r\n### Passaggi per Riprodurre\r\n<!-- Idealmente, potrebbe essere fornito un esempio di codice in modo che possiamo eseguirlo noi stessi. -->\r\n<!-- Se stai incollando codice, usa i tripli backticks (```) intorno\r\nal tuo snippet di codice. -->\r\n<!-- Se necessario, sanifica l'output dello schermo da incollare in modo da non\r\nrivelare segreti come token e password. -->\r\n\r\n```python\r\nimport numpy as np\r\nimport astropy.wcs\r\nfrom astropy.coordinates import SkyCoord\r\nimport astropy.units as u\r\n\r\nnx = 100\r\nny = 25\r\nnz = 2\r\nwcs_header = {\r\n    'WCSAXES': 3,\r\n    'CRPIX1': (nx + 1)/2,\r\n    'CRPIX2': (ny + 1)/2,\r\n    'CRPIX3': 1.0,\r\n    'PC1_1': 0.0,\r\n    'PC1_2': -1.0,\r\n    'PC1_3': 0.0,\r\n    'PC2_1': 1.0,\r\n    'PC2_2': 0.0,\r\n    'PC2_3': -1.0,\r\n    'CDELT1': 5,\r\n    'CDELT2': 5,\r\n    'CDELT3': 0.055,\r\n    'CUNIT1': 'arcsec',\r\n    'CUNIT2': 'arcsec',\r\n    'CUNIT3': 'Angstrom',\r\n    'CTYPE1': 'HPLN-TAN',\r\n    'CTYPE2': 'HPLT-TAN',\r\n    'CTYPE3': 'WAVE',\r\n    'CRVAL1': 0.0,\r\n    'CRVAL2': 0.0,\r\n    'CRVAL3': 1.05,\r\n\r\n}\r\nfits_wcs = astropy.wcs.WCS(header=wcs_header)\r\n```\r\n\r\nEseguire l'operazione `world_to_pixel` seguente sul WCS non affettato funziona come previsto restituendo il pixel centrale nello spazio e il primo pixel nella lunghezza d'onda\r\n```python\r\n>>> pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))\r\n>>> fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)\r\n(array(49.5), array(12.), array(2.44249065e-15))\r\n```\r\nMi aspetterei quindi che se prendo la prima fetta (in lunghezza d'onda del mio cubo) e faccio un pixel_to_world solo sulla coordinata spaziale di cui sopra, otterrei indietro gli stessi primi due componenti\r\n```python\r\n>>> ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)\r\n>>> hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)\r\n>>> hl_sliced_wcs.world_to_pixel(pt)\r\n(array(1.81818182e+11), array(12.))\r\n```\r\nTuttavia, questo non è il caso. La prima voce del pixel è essenzialmente infinita.\r\n\r\nInteressante, eseguire le operazioni equivalenti `pixel_to_world` restituisce i risultati attesi sia per il WCS completo che per il WCS affettato,\r\n```python\r\n>>> px,py,pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)\r\n>>> fits_wcs.pixel_to_world(px, py, pz)\r\n[<SkyCoord (Helioprojective: obstime=None, rsun=695700.0 km, observer=None): (Tx, Ty) in arcsec\r\n    (1.5467383e-27, 0.)>, <SpectralCoord 1.05e-10 m>]\r\n>>> hl_sliced_wcs.pixel_to_world(px, py)\r\n<SkyCoord (Helioprojective: obstime=None, rsun=695700.0 km, observer=None): (Tx, Ty) in arcsec\r\n    (1.5467383e-27, 0.)>\r\n```\r\n\r\n### Dettagli del Sistema\r\n<!-- Anche se non pensi che sia necessario, è un'informazione utile per i manutentori.\r\nEsegui lo snippet seguente e incolla l'output qui sotto:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nmacOS-10.16-x86_64-i386-64bit\r\nPython 3.9.7 (default, Sep 16 2021, 08:50:36)\r\n[Clang 10.0.0 ]\r\nNumpy 1.21.5\r\npyerfa 2.0.0.1\r\nastropy 5.1\r\nScipy 1.8.0\r\nMatplotlib 3.5.1\r\n```",
    "hints_text": "Un script leggermente più breve per riprodurre il problema è il seguente (a partire dalla definizione di `fits_wcs` nell'OP):\r\n\r\n```python\r\nsl = SlicedLowLevelWCS(fits_wcs, 0)\r\nworld = fits_wcs.pixel_to_world_values(0,0,0)\r\nout_pix = sl.world_to_pixel_values(world[0], world[1])\r\n\r\nassert np.allclose(out_pix[0], 0)\r\n```\r\n\r\nLa radice del problema qui è questa riga:\r\n\r\nhttps://github.com/astropy/astropy/blob/0df94ff7097961e92fd7812036a24b145bc13ca8/astropy/wcs/wcsapi/wrappers/sliced_wcs.py#L253-L254\r\n\r\nil valore di `1` qui è errato, deve essere la coordinata corrispondente al valore del pixel nella fetta in modo che la trasformazione inversa funzioni come previsto.",
    "created_at": "2022-08-26T15:06:53Z",
    "version": "5.0",
    "FAIL_TO_PASS": "[\"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_coupled_world_slicing\"]",
    "PASS_TO_PASS": "[\"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_invalid_slices\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_sanitize_slice[item0-4-expected0]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_sanitize_slice[item1-5-expected1]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_sanitize_slice[item2-10-expected2]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_ellipsis\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_pixel_to_world_broadcasting\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_world_to_pixel_broadcasting\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_spectral_slice\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_spectral_range\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_celestial_slice\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_celestial_range\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_celestial_range_rot\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_no_array_shape\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_ellipsis_none_types\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice10-slice20-expected0]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice11-slice21-expected1]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice12-slice22-expected2]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice13-slice23-expected3]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice14-slice24-expected4]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice15-slice25-expected5]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice16-slice26-expected6]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice17-slice27-expected7]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice18-slice28-expected8]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice19-slice29-expected9]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice110-slice210-expected10]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice111-slice211-expected11]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice112-slice212-expected12]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice113-slice213-expected13]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice114-slice214-expected14]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice115-slice215-expected15]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice116-3-3]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice117-3-5]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice118-3-3]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_combine_slices[slice119-3-5]\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_nested_slicing\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_too_much_slicing\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_1d_sliced_low_level\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_dropped_dimensions\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_dropped_dimensions_4d\", \"astropy/wcs/wcsapi/wrappers/tests/test_sliced_wcs.py::test_pixel_to_world_values_different_int_types\"]",
    "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "scikit-learn/scikit-learn",
    "instance_id": "scikit-learn__scikit-learn-25102",
    "base_commit": "f9a1cf072da9d7375d6c2163f68a6038b13b310f",
    "patch": "diff --git a/sklearn/base.py b/sklearn/base.py\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -498,6 +498,7 @@ def _validate_data(\n         y=\"no_validation\",\n         reset=True,\n         validate_separately=False,\n+        cast_to_ndarray=True,\n         **check_params,\n     ):\n         \"\"\"Validate input data and set or check the `n_features_in_` attribute.\n@@ -543,6 +544,11 @@ def _validate_data(\n             `estimator=self` is automatically added to these dicts to generate\n             more informative error message in case of invalid input data.\n \n+        cast_to_ndarray : bool, default=True\n+            Cast `X` and `y` to ndarray with checks in `check_params`. If\n+            `False`, `X` and `y` are unchanged and only `feature_names` and\n+            `n_features_in_` are checked.\n+\n         **check_params : kwargs\n             Parameters passed to :func:`sklearn.utils.check_array` or\n             :func:`sklearn.utils.check_X_y`. Ignored if validate_separately\n@@ -574,13 +580,15 @@ def _validate_data(\n         if no_val_X and no_val_y:\n             raise ValueError(\"Validation should be done on X, y or both.\")\n         elif not no_val_X and no_val_y:\n-            X = check_array(X, input_name=\"X\", **check_params)\n+            if cast_to_ndarray:\n+                X = check_array(X, input_name=\"X\", **check_params)\n             out = X\n         elif no_val_X and not no_val_y:\n-            y = _check_y(y, **check_params)\n+            if cast_to_ndarray:\n+                y = _check_y(y, **check_params) if cast_to_ndarray else y\n             out = y\n         else:\n-            if validate_separately:\n+            if validate_separately and cast_to_ndarray:\n                 # We need this because some estimators validate X and y\n                 # separately, and in general, separately calling check_array()\n                 # on X and y isn't equivalent to just calling check_X_y()\ndiff --git a/sklearn/feature_selection/_base.py b/sklearn/feature_selection/_base.py\n--- a/sklearn/feature_selection/_base.py\n+++ b/sklearn/feature_selection/_base.py\n@@ -14,10 +14,11 @@\n from ..cross_decomposition._pls import _PLS\n from ..utils import (\n     check_array,\n-    safe_mask,\n     safe_sqr,\n )\n from ..utils._tags import _safe_tags\n+from ..utils import _safe_indexing\n+from ..utils._set_output import _get_output_config\n from ..utils.validation import _check_feature_names_in, check_is_fitted\n \n \n@@ -78,6 +79,11 @@ def transform(self, X):\n         X_r : array of shape [n_samples, n_selected_features]\n             The input samples with only the selected features.\n         \"\"\"\n+        # Preserve X when X is a dataframe and the output is configured to\n+        # be pandas.\n+        output_config_dense = _get_output_config(\"transform\", estimator=self)[\"dense\"]\n+        preserve_X = hasattr(X, \"iloc\") and output_config_dense == \"pandas\"\n+\n         # note: we use _safe_tags instead of _get_tags because this is a\n         # public Mixin.\n         X = self._validate_data(\n@@ -85,6 +91,7 @@ def transform(self, X):\n             dtype=None,\n             accept_sparse=\"csr\",\n             force_all_finite=not _safe_tags(self, key=\"allow_nan\"),\n+            cast_to_ndarray=not preserve_X,\n             reset=False,\n         )\n         return self._transform(X)\n@@ -98,10 +105,10 @@ def _transform(self, X):\n                 \" too noisy or the selection test too strict.\",\n                 UserWarning,\n             )\n+            if hasattr(X, \"iloc\"):\n+                return X.iloc[:, :0]\n             return np.empty(0, dtype=X.dtype).reshape((X.shape[0], 0))\n-        if len(mask) != X.shape[1]:\n-            raise ValueError(\"X has a different shape than during fitting.\")\n-        return X[:, safe_mask(X, mask)]\n+        return _safe_indexing(X, mask, axis=1)\n \n     def inverse_transform(self, X):\n         \"\"\"Reverse the transformation operation.\n",
    "test_patch": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -6,23 +6,25 @@\n \n from sklearn.base import BaseEstimator\n from sklearn.feature_selection._base import SelectorMixin\n-from sklearn.utils import check_array\n \n \n class StepSelector(SelectorMixin, BaseEstimator):\n-    \"\"\"Retain every `step` features (beginning with 0)\"\"\"\n+    \"\"\"Retain every `step` features (beginning with 0).\n+\n+    If `step < 1`, then no features are selected.\n+    \"\"\"\n \n     def __init__(self, step=2):\n         self.step = step\n \n     def fit(self, X, y=None):\n-        X = check_array(X, accept_sparse=\"csc\")\n-        self.n_input_feats = X.shape[1]\n+        X = self._validate_data(X, accept_sparse=\"csc\")\n         return self\n \n     def _get_support_mask(self):\n-        mask = np.zeros(self.n_input_feats, dtype=bool)\n-        mask[:: self.step] = True\n+        mask = np.zeros(self.n_features_in_, dtype=bool)\n+        if self.step >= 1:\n+            mask[:: self.step] = True\n         return mask\n \n \n@@ -114,3 +116,36 @@ def test_get_support():\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n     assert_array_equal(support_inds, sel.get_support(indices=True))\n+\n+\n+def test_output_dataframe():\n+    \"\"\"Check output dtypes for dataframes is consistent with the input dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    for step in [2, 3]:\n+        sel = StepSelector(step=step).set_output(transform=\"pandas\")\n+        sel.fit(X)\n+\n+        output = sel.transform(X)\n+        for name, dtype in output.dtypes.items():\n+            assert dtype == X.dtypes[name]\n+\n+    # step=0 will select nothing\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X, y)\n+\n+    msg = \"No features were selected\"\n+    with pytest.warns(UserWarning, match=msg):\n+        output0 = sel0.transform(X)\n+\n+    assert_array_equal(output0.index, X.index)\n+    assert output0.shape == (X.shape[0], 0)\ndiff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -15,7 +15,7 @@\n from sklearn.utils._testing import ignore_warnings\n from sklearn.utils import safe_mask\n \n-from sklearn.datasets import make_classification, make_regression\n+from sklearn.datasets import make_classification, make_regression, load_iris\n from sklearn.feature_selection import (\n     chi2,\n     f_classif,\n@@ -944,3 +944,41 @@ def test_mutual_info_regression():\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n     assert_array_equal(support, gtruth)\n+\n+\n+def test_dataframe_output_dtypes():\n+    \"\"\"Check that the output datafarme dtypes are the same as the input.\n+\n+    Non-regression test for gh-24860.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal length (cm)\": np.float32,\n+            \"petal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"petal_width_binned\"] = pd.cut(X[\"petal width (cm)\"], bins=10)\n+\n+    column_order = X.columns\n+\n+    def selector(X, y):\n+        ranking = {\n+            \"sepal length (cm)\": 1,\n+            \"sepal width (cm)\": 2,\n+            \"petal length (cm)\": 3,\n+            \"petal width (cm)\": 4,\n+            \"petal_width_binned\": 5,\n+        }\n+        return np.asarray([ranking[name] for name in column_order])\n+\n+    univariate_filter = SelectKBest(selector, k=3).set_output(transform=\"pandas\")\n+    output = univariate_filter.fit_transform(X, y)\n+\n+    assert_array_equal(\n+        output.columns, [\"petal length (cm)\", \"petal width (cm)\", \"petal_width_binned\"]\n+    )\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n",
    "problem_statement": "Conservare i dtypes per l'output DataFrame dei transformer che non modificano i valori di input\n### Descrivi il flusso di lavoro che desideri abilitare\n\nSarebbe utile poter preservare opzionalmente i dtypes dell'input utilizzando l'output pandas per i transformer #72.\nI dtypes possono contenere informazioni rilevanti per passaggi successivi delle analisi. \nAd esempio, se includo colonne `pd.categorical` per rappresentare dati ordinali e poi seleziono le caratteristiche utilizzando un transformer sklearn, le colonne perderanno il loro dtype categorico. Ciò significa che perdo informazioni importanti per i passaggi successivi delle analisi. \nQuesto non è rilevante solo per i dtypes categorici, ma potrebbe estendersi ad altri dtypes (esistenti, futuri e personalizzati). \nInoltre, ciò consentirebbe di utilizzare sequenzialmente `ColumnTransformer` preservando i dtypes (forse correlato a #24182).\n\nAttualmente, questo comportamento non è garantito, come si può vedere con questo snippet di codice (esempio minimo a scopo illustrativo): \n```python \nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nX, y = load_iris(return_X_y=True, as_frame=True)\nX = X.astype(\n   {\n       \"petal width (cm)\": np.float16,\n       \"petal length (cm)\": np.float16,\n   }\n)\nX[\"cat\"] = y.astype(\"category\")\n\nselector = SelectKBest(chi2, k=2)\nselector.set_output(transform=\"pandas\")\nX_out = selector.fit_transform(X, y)\nprint(X_out.dtypes)\n```\n\nOutput (utilizzando la versione sklearn '1.2.dev0'):\n```\npetal length (cm)    float64\ncat                  float64\ndtype: object\n```\n\nL'output mostra che sia `category` che `np.float16` vengono convertiti in `np.float64` nell'output del dataframe.\n\n### Descrivi la tua soluzione proposta\n\nForse si potrebbe modificare `set_output` per consentire anche di preservare i dtypes.\nCiò significherebbe modificare `_SetOutputMixin` per aggiungere: \n* un altro argomento `dtypes` a `_wrap_in_pandas_container`. \n* Se non None, il dataframe di output utilizza `astype` per impostare i `dtypes`. \n\nI `dtypes` dell'`original_input` potrebbero essere forniti a `_wrap_in_pandas_container` da `_wrap_data_with_container` se i dtypes sono impostati per essere preservati nella configurazione. \n\n### Descrivi le alternative che hai considerato, se rilevanti\n\nSi potrebbero modificare specifici transformer per cui ciò potrebbe essere rilevante. Una tale soluzione richiederebbe più lavoro e non sembra essere in linea con la semplicità che l'output pandas fornisce all'utente per ogni transformer.\n\n### Contesto aggiuntivo\n\n@fraimondo è anche interessato a questa funzionalità.",
    "hints_text": "Sto mitigando riguardo a questo argomento.\n\nInfatti, già preserviamo il `dtype` se è supportato dal trasformatore e il tipo di dati è omogeneo:\n\n```python\nIn [10]: import numpy as np\n    ...: from sklearn.datasets import load_iris\n    ...: from sklearn.preprocessing import StandardScaler\n    ...: \n    ...: X, y = load_iris(return_X_y=True, as_frame=True)\n    ...: X = X.astype(np.float32)\n    ...: \n    ...: selector = StandardScaler()\n    ...: selector.set_output(transform=\"pandas\")\n    ...: X_out = selector.fit_transform(X, y)\n    ...: print(X_out.dtypes)\nsepal length (cm)    float32\nsepal width (cm)     float32\npetal length (cm)    float32\npetal width (cm)     float32\ndtype: object\n```\n\nPoiché tutte le operazioni vengono eseguite con array NumPy sotto il cofano, i tipi non omogenei verranno convertiti in un unico tipo omogeneo. Quindi, c'è poco vantaggio nel convertire il tipo di dati poiché la memoria è già stata allocata.\n\nLa preservazione di `dtype` eterogenei potrebbe avvenire solo se i trasformatori utilizzassero `DataFrame` come contenitore nativo senza conversione in array NumPy. Ciò forzerebbe anche tutti i trasformatori a eseguire l'elaborazione colonna per colonna.\n\nQuindi, nel breve termine, non credo che questa funzionalità possa essere supportata o implementata.\n\nGrazie mille per la rapida risposta e chiarimento.\nInfatti, avrei dovuto specificare che si tratta di dati non omogenei e non direttamente supportati dal trasformatore.\n\nSolo per chiarire cosa pensavo fosse possibile:\nPensavo più a preservare il dtype in modo simile a come (credo) sklearn preserva i nomi delle colonne/indici.\nOvvero, eseguire il calcolo utilizzando un array NumPy, quindi creare il DataFrame e riassegnare i dtypes.\nQuesto, ovviamente, non aiuterebbe con la memoria, ma preserverebbe le informazioni statisticamente rilevanti menzionate sopra.\nSuccessivamente, parti di una Pipeline potrebbero ancora selezionare per un dtype specifico (soprattutto categorico).\nUna tale preservazione potrebbe essere limitata ai trasformatori che esportano le stesse o un sottoinsieme delle funzionalità di input.\n\nCapisco il vantaggio di preservare i dtypes, soprattutto nel caso di dtypes misti. È anche ciò che mi aspettavo ingenuamente che accadesse. Pensando a come funziona il codice, ha senso che questo non sia ciò che accade.\n\nUna cosa che mi chiedo è se la conversione da un dtype di input a un altro per l'elaborazione e poi di nuovo al dtype originale perda informazioni o porti ad altre stranezze. Perché se le conversioni richieste non possono essere senza perdita, allora stiamo scambiando un problema con un altro. Penso che le conversioni con perdita sarebbero più difficili da debugger per gli utenti, perché le regole sono più complesse di quelle attuali.\n\n> Una cosa che mi chiedo è se la conversione da un dtype di input a un altro per l'elaborazione e poi di nuovo al dtype originale perda informazioni o porti ad altre stranezze.\n\nÈ su questo aspetto che sono scettico. Avremo la conversione a una precisione più elevata e quindi perdi il vantaggio di \"preservare\" il dtype. Restituire una versione convertita sarà meno sorprendente ma una \"bugia\" perché hai allocato la memoria e poi perdi semplicemente la precisione con la conversione.\n\nPosso prevedere che alcuni stimatori potrebbero indeed preservare il dtype senza convertire in array NumPy: ad esempio, la selezione delle funzionalità potrebbe utilizzare array NumPy per calcolare le funzionalità da selezionare e selezioniamo le colonne sul contenitore originale prima della conversione.\n\nPer i metodi che implicano modifiche \"inplace\", potrebbe essere ancora più difficile di quanto avrei pensato:\n\n```python\nIn [17]: X, y = load_iris(return_X_y=True, as_frame=True)\n    ...: X = X.astype({\"petal width (cm)\": np.float16,\n    ...:               \"petal length (cm)\": np.float16,\n    ...:               })\n\nIn [18]: X.mean()\nOut[18]: \nsepal length (cm)    5.843333\nsepal width (cm)     3.057333\npetal length (cm)    3.755859\npetal width (cm)     1.199219\ndtype: float64\n```\n\nAd esempio, pandas non preserva il dtype nel calcolo di statistiche semplici. Ciò significa che è difficile fare la preservazione di dtype eterogenei, in modo agnostico rispetto al contenitore di dati di input.\n\n> Una cosa che mi chiedo è se la conversione da un dtype di input a un altro per l'elaborazione e poi di nuovo al dtype originale perda informazioni o porti ad altre stranezze.\n\nCapisco il tuo punto. Tuttavia, questo caso si applica solo a input/output pandas e diverse precisioni. Il caso è quindi quando l'utente ha precisioni miste (float64/32/16) in input, il calcolo viene eseguito nella precisione più elevata e poi convertito di nuovo al dtype originale.\n\nCiò che @samihamdan intendeva è in qualche modo preservare la coerenza del DataFrame (e solo del DataFrame). È un caso d'uso bastante specifico in cui si desidera che il trasformatore converta di nuovo al dtype originale. Ad esempio, posso pensare a un caso in cui si utilizza un trasformatore personalizzato che potrebbe non trarre vantaggio da input float64 (rispetto a float32) e risulterà solo in un enorme carico computazionale.\n\nmodifica: questo trasformatore non è isolato ma come secondo (o successivo) passaggio in una pipeline\n\n> Ciò che @samihamdan intendeva è in qualche modo preservare la coerenza del DataFrame (e solo del DataFrame). È un caso d'uso bastante specifico in cui si desidera che il trasformatore converta di nuovo al dtype originale.\n\nPenso che ciò che stai dicendo è che vuoi un trasformatore che, passato un DataFrame pandas con tipi misti, restituisca un DataFrame pandas con gli stessi tipi misti del DataFrame di input. È corretto?\n\nSe ho capito correttamente, allora ciò a cui mi riferivo con \"cose strane accadono durante le conversioni\" è cose come `np.array(np.iinfo(np.int64).max -1).astype(np.float64).astype(np.int64) != np.iinfo(np.int64).max -1`. Sono sicuro che ci sono altre cose strane come questa, il punto è che ci sono diverse trappole e che non sono ben note. Questo supponendo che il/i trasformatore/i continueranno a convertire in un dtype interno per eseguire i loro calcoli.\n\n> quindi perdi il vantaggio di \"preservare\" il dtype\n\nStavo pensando che il vantaggio non è legato al risparmio di memoria o allo sforzo computazionale, ma piuttosto alle informazioni semantiche sulla colonna. Simile ad avere nomi di funzionalità. Non aggiungono nulla per rendere il calcolo più efficiente, ma aiutano gli esseri umani a comprendere i loro dati. Ad esempio, `pd.Series([1,2,3,1,2,4], dtype=\"category\")` ti dà alcune informazioni extra rispetto a `pd.Series([1,2,3,1,2,4], dtype=int)` e molte più informazioni rispetto a `pd.Series([1,2,3,1,2,4], dtype=float)` (che è ciò che ottieni attualmente se il DataFrame contiene altri float (credo).\n\nQuesto è esattamente ciò che io e @samihamdan intendevamo. Dato che avere pandas come output è per migliorare la semantica, preservare il dtype potrebbe aiutare anche con la semantica.\n\nPer stimatori come `SelectKBest` possiamo probabilmente farlo con poca complessità aggiuntiva.\n\nMa farlo in generale per altri trasformatori che operano su base colonna per colonna come `StandardScaler`, potrebbe essere più complicato e non sono sicuro che vogliamo intraprendere questa strada nel breve termine.\n\nÈ un po' legato al fatto se vogliamo gestire il protocollo `__dataframe__` in scikit-learn in futuro:\n\n- https://data-apis.org/dataframe-protocol/latest/purpose_and_scope.html",
    "created_at": "2022-12-02T20:03:37Z",
    "version": "1.3",
    "FAIL_TO_PASS": "[\"sklearn/feature_selection/tests/test_base.py::test_output_dataframe\", \"sklearn/feature_selection/tests/test_feature_select.py::test_dataframe_output_dtypes\"]",
    "PASS_TO_PASS": "[\"sklearn/feature_selection/tests/test_base.py::test_transform_dense\", \"sklearn/feature_selection/tests/test_base.py::test_transform_sparse\", \"sklearn/feature_selection/tests/test_base.py::test_inverse_transform_dense\", \"sklearn/feature_selection/tests/test_base.py::test_inverse_transform_sparse\", \"sklearn/feature_selection/tests/test_base.py::test_get_support\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_oneway_vs_scipy_stats\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_oneway_ints\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_classif\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression[True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression[False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_input_dtype\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_center\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression_force_finite[X0-y0-expected_corr_coef0-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression_force_finite[X1-y1-expected_corr_coef1-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression_force_finite[X2-y2-expected_corr_coef2-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_r_regression_force_finite[X3-y3-expected_corr_coef3-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X0-y0-expected_f_statistic0-expected_p_values0-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X1-y1-expected_f_statistic1-expected_p_values1-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X2-y2-expected_f_statistic2-expected_p_values2-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X3-y3-expected_f_statistic3-expected_p_values3-True]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X4-y4-expected_f_statistic4-expected_p_values4-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X5-y5-expected_f_statistic5-expected_p_values5-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X6-y6-expected_f_statistic6-expected_p_values6-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case[X7-y7-expected_f_statistic7-expected_p_values7-False]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_classif_multi_class\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_percentile_classif\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_percentile_classif_sparse\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_kbest_classif\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_kbest_all\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_kbest_zero[float32]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_kbest_zero[float64]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_heuristics_classif\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_percentile_regression\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_percentile_regression_full\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_kbest_regression\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_heuristics_regression\", \"sklearn/feature_selection/tests/test_feature_select.py::test_boundary_case_ch2\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[1-0.001]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[1-0.01]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[1-0.1]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[5-0.001]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[5-0.01]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[5-0.1]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[10-0.001]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[10-0.01]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fdr_regression[10-0.1]\", \"sklearn/feature_selection/tests/test_feature_select.py::test_select_fwe_regression\", \"sklearn/feature_selection/tests/test_feature_select.py::test_selectkbest_tiebreaking\", \"sklearn/feature_selection/tests/test_feature_select.py::test_selectpercentile_tiebreaking\", \"sklearn/feature_selection/tests/test_feature_select.py::test_tied_pvalues\", \"sklearn/feature_selection/tests/test_feature_select.py::test_scorefunc_multilabel\", \"sklearn/feature_selection/tests/test_feature_select.py::test_tied_scores\", \"sklearn/feature_selection/tests/test_feature_select.py::test_nans\", \"sklearn/feature_selection/tests/test_feature_select.py::test_invalid_k\", \"sklearn/feature_selection/tests/test_feature_select.py::test_f_classif_constant_feature\", \"sklearn/feature_selection/tests/test_feature_select.py::test_no_feature_selected\", \"sklearn/feature_selection/tests/test_feature_select.py::test_mutual_info_classif\", \"sklearn/feature_selection/tests/test_feature_select.py::test_mutual_info_regression\"]",
    "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15957",
    "base_commit": "f387d024fc75569d2a4a338bfda76cc2f328f627",
    "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -64,8 +64,10 @@ class Child(Model):\n \"\"\"\n \n from django.core.exceptions import FieldError\n-from django.db import connections, router, transaction\n-from django.db.models import Q, signals\n+from django.db import DEFAULT_DB_ALIAS, connections, router, transaction\n+from django.db.models import Q, Window, signals\n+from django.db.models.functions import RowNumber\n+from django.db.models.lookups import GreaterThan, LessThanOrEqual\n from django.db.models.query import QuerySet\n from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import resolve_callables\n@@ -81,6 +83,24 @@ def __set__(self, instance, value):\n         instance.__dict__[self.field.attname] = value\n \n \n+def _filter_prefetch_queryset(queryset, field_name, instances):\n+    predicate = Q(**{f\"{field_name}__in\": instances})\n+    if queryset.query.is_sliced:\n+        low_mark, high_mark = queryset.query.low_mark, queryset.query.high_mark\n+        order_by = [\n+            expr\n+            for expr, _ in queryset.query.get_compiler(\n+                using=queryset._db or DEFAULT_DB_ALIAS\n+            ).get_order_by()\n+        ]\n+        window = Window(RowNumber(), partition_by=field_name, order_by=order_by)\n+        predicate &= GreaterThan(window, low_mark)\n+        if high_mark is not None:\n+            predicate &= LessThanOrEqual(window, high_mark)\n+        queryset.query.clear_limits()\n+    return queryset.filter(predicate)\n+\n+\n class ForwardManyToOneDescriptor:\n     \"\"\"\n     Accessor to the related object on the forward side of a many-to-one or\n@@ -718,8 +738,7 @@ def get_prefetch_queryset(self, instances, queryset=None):\n             rel_obj_attr = self.field.get_local_related_value\n             instance_attr = self.field.get_foreign_related_value\n             instances_dict = {instance_attr(inst): inst for inst in instances}\n-            query = {\"%s__in\" % self.field.name: instances}\n-            queryset = queryset.filter(**query)\n+            queryset = _filter_prefetch_queryset(queryset, self.field.name, instances)\n \n             # Since we just bypassed this class' get_queryset(), we must manage\n             # the reverse relation manually.\n@@ -1050,9 +1069,9 @@ def get_prefetch_queryset(self, instances, queryset=None):\n \n             queryset._add_hints(instance=instances[0])\n             queryset = queryset.using(queryset._db or self._db)\n-\n-            query = {\"%s__in\" % self.query_field_name: instances}\n-            queryset = queryset._next_is_sticky().filter(**query)\n+            queryset = _filter_prefetch_queryset(\n+                queryset._next_is_sticky(), self.query_field_name, instances\n+            )\n \n             # M2M: need to annotate the query in order to get the primary model\n             # that the secondary model was actually related to. We know that\n",
    "test_patch": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1908,3 +1908,67 @@ def test_nested_prefetch_is_not_overwritten_by_related_object(self):\n         self.assertIs(Room.house.is_cached(self.room), True)\n         with self.assertNumQueries(0):\n             house.rooms.first().house.address\n+\n+\n+class PrefetchLimitTests(TestDataMixin, TestCase):\n+    def test_m2m_forward(self):\n+        authors = Author.objects.all()  # Meta.ordering\n+        with self.assertNumQueries(3):\n+            books = list(\n+                Book.objects.prefetch_related(\n+                    Prefetch(\"authors\", authors),\n+                    Prefetch(\"authors\", authors[1:], to_attr=\"authors_sliced\"),\n+                )\n+            )\n+        for book in books:\n+            with self.subTest(book=book):\n+                self.assertEqual(book.authors_sliced, list(book.authors.all())[1:])\n+\n+    def test_m2m_reverse(self):\n+        books = Book.objects.order_by(\"title\")\n+        with self.assertNumQueries(3):\n+            authors = list(\n+                Author.objects.prefetch_related(\n+                    Prefetch(\"books\", books),\n+                    Prefetch(\"books\", books[1:2], to_attr=\"books_sliced\"),\n+                )\n+            )\n+        for author in authors:\n+            with self.subTest(author=author):\n+                self.assertEqual(author.books_sliced, list(author.books.all())[1:2])\n+\n+    def test_foreignkey_reverse(self):\n+        authors = Author.objects.order_by(\"-name\")\n+        with self.assertNumQueries(3):\n+            books = list(\n+                Book.objects.prefetch_related(\n+                    Prefetch(\n+                        \"first_time_authors\",\n+                        authors,\n+                    ),\n+                    Prefetch(\n+                        \"first_time_authors\",\n+                        authors[1:],\n+                        to_attr=\"first_time_authors_sliced\",\n+                    ),\n+                )\n+            )\n+        for book in books:\n+            with self.subTest(book=book):\n+                self.assertEqual(\n+                    book.first_time_authors_sliced,\n+                    list(book.first_time_authors.all())[1:],\n+                )\n+\n+    def test_reverse_ordering(self):\n+        authors = Author.objects.reverse()  # Reverse Meta.ordering\n+        with self.assertNumQueries(3):\n+            books = list(\n+                Book.objects.prefetch_related(\n+                    Prefetch(\"authors\", authors),\n+                    Prefetch(\"authors\", authors[1:], to_attr=\"authors_sliced\"),\n+                )\n+            )\n+        for book in books:\n+            with self.subTest(book=book):\n+                self.assertEqual(book.authors_sliced, list(book.authors.all())[1:])\n",
    "problem_statement": "Gli oggetti Prefetch non funzionano con le slice\nDescrizione\n\n​Gli oggetti Prefetch() non funzionano con i queryset affettati. Ad esempio, il seguente codice genera un AssertionError: Cannot filter a query once a slice has been taken.:\nCategory.objects.prefetch_related(Prefetch(\n\t'post_set',\n\tqueryset=Post.objects.all()[:3],\n\tto_attr='example_posts',\n))\nQuesto comportamento è stato menzionato anche in ​questa risposta su StackOverflow. D'altra parte, non sembra essere documentato nella documentazione di Django.\nPerché è necessario?\nIl mio caso d'uso sembra essere comune: voglio visualizzare un elenco di categorie, mostrando alcuni oggetti di esempio per ciascuna categoria accanto ad essa. Se non sbaglio, al momento non esiste un modo efficiente per farlo. Il prefetching senza slicing preleverebbe tutti gli oggetti (e potrebbero essercene migliaia) invece dei tre esempi necessari.",
    "hints_text": "Sembra che #26565 (\"Consenti alla query di Prefetch di utilizzare .values()\") sia correlato.\nCiao ludwik, #26565 riguarda un problema diverso. L'unico modo per supportare le slice sarebbe estrarle dal queryset fornito per renderlo nuovamente filtrabile e applicarlo durante il join in memoria. Il queryset di prefetch dovrebbe comunque recuperare tutti i risultati, quindi non sono sicuro che valga la pena di farlo, poiché accedere a `category.example_posts[:3]` avrebbe lo stesso effetto.\nCharettes, grazie per la risposta. accedere a `category.example_posts[:3]` avrebbe lo stesso effetto Sono abbastanza sicuro che non sia corretto. L'effetto finale sarebbe ovviamente lo stesso, ma il modo in cui viene raggiunto dietro le quinte e le caratteristiche di prestazioni che ne derivano sarebbero molto diversi. Ciò che proponi (prefetching senza limite, aggiungendo slicing dopo il fatto) farebbe sì che Django esegua una query del database selezionando tutti gli oggetti dalla tabella del database e caricandoli in memoria. Questo accadrebbe quando il queryset principale viene valutato (ecco cosa fa il prefetching). Quindi lo slicing verrebbe eseguito da Python in memoria, su un queryset che era già stato valutato. Questo è ciò che ho capito dalla ​documentazione e anche come Django si è comportato in un esperimento che ho eseguito un paio di minuti fa. Ciò che voglio evitare è esattamente questo comportamento: caricare migliaia di oggetti dal database per visualizzare i primi tre. Sarei felice di avere un workaround sensato, ma a mia conoscenza non ce ne sono.\nAccettato in via provvisoria, ma come hai notato, richiederebbe un ampio refactor del modo in cui il prefetching viene effettivamente eseguito. Potrei vedere `Category.objects.prefetch_related(Prefetch('articles', Article.object.order_by('-published_data')[0:3], to_attr='latest_articles'))` essere utile, ma la query di prefetch sottostante dovrebbe fare affidamento su sottquery, una funzionalità che l'ORM non gestisce bene al momento. Forse l'aggiunta dell'espressione ​Subquery potrebbe aiutare qui.\nL'unico modo per limitare questa Query (e per non caricare tutti i record in memoria) sarebbe eseguire una query di tipo top-n-per-group, che non credo l'ORM sia in grado di fare. Ciò che posso suggerire è: invece di limitare il QuerySet, trova un modo per filtrarlo. Ad esempio, ottieni solo i Post dell'ultimo giorno, settimana o mese (in base alla frequenza dei post). `Category.objects.prefetch_related(Prefetch( 'post_set', queryset=Post.objects.filter( date_published__gte=datetime.date.today()-timedelta(days=7)), to_attr='example_posts', ))` In questo modo non caricherai tutti i Post in memoria.\nSe le query di finestra vengono implementate (https://code.djangoproject.com/ticket/26608), allora questo caso d'uso potrebbe essere possibile in qualcosa di simile a: `Prefetch( 'post_set', queryset= Post.objects .annotate(_rank=Window(Rank(), partition_by='cateogry') .filter(_rank__lte=3) )`\nHo provato il suggerimento di filtro per rank utilizzando Django 2.0 ma ottengo questo errore: `django.db.utils.NotSupportedError: Window is disallowed in the filter clause.`\nPenso che ci sia un workaround ora nella nuova versione di django poiché abbiamo OuterRef e Subquery. `from django.db.models import OuterRef, Subquery User.objects.all().prefetch_related('comments',queryset=Comment.objects.filter(id__in=Subquery(Comment.objects.filter(user_id=OuterRef('user_id')).values_list('id', flat=True)[:5])))`\nNota che la soluzione sopra potrebbe non essere portabile su alcuni database MySql, con errore 1235, \"Questa versione di MySQL non supporta ancora 'LIMIT & IN/ALL/ANY/SOME subquery'\"\nCome sottolineato da altri, il supporto per il filtro contro le funzioni di finestra consentirebbe a `prefetch_related_objects` di utilizzare `Rank(partition_by)` per supportare questa funzionalità. Se qualcuno vuole provare a risolvere questo problema particolare prima che #28333 venga risolto, dovrebbe essere fattibile utilizzando una combinazione di `Queryset.raw` e `Query.compile`.",
    "created_at": "2022-08-13T06:18:25Z",
    "version": "4.2",
    "FAIL_TO_PASS": "[\"test_foreignkey_reverse (prefetch_related.tests.PrefetchLimitTests)\", \"test_m2m_forward (prefetch_related.tests.PrefetchLimitTests)\", \"test_m2m_reverse (prefetch_related.tests.PrefetchLimitTests)\", \"test_reverse_ordering (prefetch_related.tests.PrefetchLimitTests)\"]",
    "PASS_TO_PASS": "[\"The prefetched relationship is used rather than populating the reverse\", \"test_bug (prefetch_related.tests.Ticket19607Tests)\", \"When intermediary results are prefetched without a destination\", \"In-bulk does correctly prefetch objects by not using .iterator()\", \"test_prefetch_nullable (prefetch_related.tests.NullableTest)\", \"test_traverse_nullable (prefetch_related.tests.NullableTest)\", \"test_bug (prefetch_related.tests.Ticket21410Tests)\", \"test_bug (prefetch_related.tests.Ticket21760Tests)\", \"test_m2m_then_m2m (prefetch_related.tests.DefaultManagerTests)\", \"test_order (prefetch_related.tests.LookupOrderingTest)\", \"test_foreignkey (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m_manager_reused (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_basic (prefetch_related.tests.RawQuerySetTests)\", \"test_clear (prefetch_related.tests.RawQuerySetTests)\", \"test_prefetch_before_raw (prefetch_related.tests.RawQuerySetTests)\", \"test_using_is_honored_custom_qs (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_fkey (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_inheritance (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_m2m (prefetch_related.tests.MultiDbTests)\", \"test_child_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey_to_inherited (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_m2m_to_inheriting_model (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_parent_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_add_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"Nested prefetch_related() shouldn't trigger duplicate queries for the same\", \"test_detect_is_fetched_with_to_attr (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"test_prefetch_reverse_foreign_key (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"test_remove_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"test_charfield_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_custom_queryset (prefetch_related.tests.GenericRelationTests)\", \"test_deleted_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_generic_relation (prefetch_related.tests.GenericRelationTests)\", \"test_nullable_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_fk_pk (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_nonint_pk (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_uuid_pk (prefetch_related.tests.GenericRelationTests)\", \"A 'content_object' can be traversed with prefetch_related() and\", \"test_attribute_error (prefetch_related.tests.PrefetchRelatedTests)\", \"test_bool (prefetch_related.tests.PrefetchRelatedTests)\", \"test_clear (prefetch_related.tests.PrefetchRelatedTests)\", \"test_count (prefetch_related.tests.PrefetchRelatedTests)\", \"test_exists (prefetch_related.tests.PrefetchRelatedTests)\", \"Related filtering of prefetched querysets is deferred on m2m and\", \"A m2m relation can be followed after a relation like ForeignKey that\", \"test_foreignkey_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"test_forward_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"Objects retrieved with .get() get the prefetch behavior.\", \"Regression test for #20242 - QuerySet \\\"in\\\" didn't work the first time\", \"test_invalid_final_lookup (prefetch_related.tests.PrefetchRelatedTests)\", \"test_len (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_prefetching_iterator_with_chunks (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_prefetching_iterator_without_chunks (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_prefetching_iterator_without_chunks_warning (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m can be followed through another m2m.\", \"test_m2m_then_m2m_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_fk_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_one_to_one_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_named_values_list (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_no_match (prefetch_related.tests.PrefetchRelatedTests)\", \"A model (Bio) with a OneToOneField primary key (author) that references\", \"test_overriding_prefetch (prefetch_related.tests.PrefetchRelatedTests)\", \"test_prefetch_eq (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m relation can be followed after going through the select_related\", \"test_survives_clone (prefetch_related.tests.PrefetchRelatedTests)\", \"test_ambiguous (prefetch_related.tests.CustomPrefetchTests)\", \"test_custom_qs (prefetch_related.tests.CustomPrefetchTests)\", \"Related filtering of prefetched querysets is deferred until necessary.\", \"test_generic_rel (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_fk (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_gfk (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_are_not_overwritten (prefetch_related.tests.CustomPrefetchTests)\", \"Nested prefetches whose name clashes with descriptor names\", \"test_o2m_through_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_raw_queryset (prefetch_related.tests.CustomPrefetchTests)\", \"test_reverse_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_cached_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_doesnt_cache_through_attr_as_list (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_multiple_items_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_single_item_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_values_queryset (prefetch_related.tests.CustomPrefetchTests)\"]",
    "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-14369",
    "base_commit": "fa4e8d1cd279acf9b24560813c8652494ccd5922",
    "patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -138,8 +138,7 @@ def _make_parser(cls):\n         for Astronomical Catalogues 2.0\n         <http://vizier.u-strasbg.fr/vizier/doc/catstd-3.2.htx>`_, which is not\n         terribly precise.  The exact grammar is here is based on the\n-        YACC grammar in the `unity library\n-        <https://bitbucket.org/nxg/unity/>`_.\n+        YACC grammar in the `unity library <https://purl.org/nxg/dist/unity/>`_.\n         \"\"\"\n         tokens = cls._tokens\n \n@@ -182,7 +181,7 @@ def p_product_of_units(p):\n         def p_division_of_units(p):\n             \"\"\"\n             division_of_units : DIVISION unit_expression\n-                              | unit_expression DIVISION combined_units\n+                              | combined_units DIVISION unit_expression\n             \"\"\"\n             if len(p) == 3:\n                 p[0] = p[2] ** -1\ndiff --git a/astropy/units/format/cds_parsetab.py b/astropy/units/format/cds_parsetab.py\n--- a/astropy/units/format/cds_parsetab.py\n+++ b/astropy/units/format/cds_parsetab.py\n@@ -17,9 +17,9 @@\n \n _lr_method = 'LALR'\n \n-_lr_signature = 'CLOSE_BRACKET CLOSE_PAREN DIMENSIONLESS DIVISION OPEN_BRACKET OPEN_PAREN PRODUCT SIGN UFLOAT UINT UNIT X\\n            main : factor combined_units\\n                 | combined_units\\n                 | DIMENSIONLESS\\n                 | OPEN_BRACKET combined_units CLOSE_BRACKET\\n                 | OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET\\n                 | factor\\n            \\n            combined_units : product_of_units\\n                           | division_of_units\\n            \\n            product_of_units : unit_expression PRODUCT combined_units\\n                             | unit_expression\\n            \\n            division_of_units : DIVISION unit_expression\\n                              | unit_expression DIVISION combined_units\\n            \\n            unit_expression : unit_with_power\\n                            | OPEN_PAREN combined_units CLOSE_PAREN\\n            \\n            factor : signed_float X UINT signed_int\\n                   | UINT X UINT signed_int\\n                   | UINT signed_int\\n                   | UINT\\n                   | signed_float\\n            \\n            unit_with_power : UNIT numeric_power\\n                            | UNIT\\n            \\n            numeric_power : sign UINT\\n            \\n            sign : SIGN\\n                 |\\n            \\n            signed_int : SIGN UINT\\n            \\n            signed_float : sign UINT\\n                         | sign UFLOAT\\n            '\n+_lr_signature = 'CLOSE_BRACKET CLOSE_PAREN DIMENSIONLESS DIVISION OPEN_BRACKET OPEN_PAREN PRODUCT SIGN UFLOAT UINT UNIT X\\n            main : factor combined_units\\n                 | combined_units\\n                 | DIMENSIONLESS\\n                 | OPEN_BRACKET combined_units CLOSE_BRACKET\\n                 | OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET\\n                 | factor\\n            \\n            combined_units : product_of_units\\n                           | division_of_units\\n            \\n            product_of_units : unit_expression PRODUCT combined_units\\n                             | unit_expression\\n            \\n            division_of_units : DIVISION unit_expression\\n                              | combined_units DIVISION unit_expression\\n            \\n            unit_expression : unit_with_power\\n                            | OPEN_PAREN combined_units CLOSE_PAREN\\n            \\n            factor : signed_float X UINT signed_int\\n                   | UINT X UINT signed_int\\n                   | UINT signed_int\\n                   | UINT\\n                   | signed_float\\n            \\n            unit_with_power : UNIT numeric_power\\n                            | UNIT\\n            \\n            numeric_power : sign UINT\\n            \\n            sign : SIGN\\n                 |\\n            \\n            signed_int : SIGN UINT\\n            \\n            signed_float : sign UINT\\n                         | sign UFLOAT\\n            '\n     \n-_lr_action_items = {'DIMENSIONLESS':([0,5,],[4,19,]),'OPEN_BRACKET':([0,],[5,]),'UINT':([0,10,13,16,20,21,23,31,],[7,24,-23,-24,34,35,36,40,]),'DIVISION':([0,2,5,6,7,11,14,15,16,22,24,25,26,27,30,36,39,40,41,42,],[12,12,12,-19,-18,27,-13,12,-21,-17,-26,-27,12,12,-20,-25,-14,-22,-15,-16,]),'SIGN':([0,7,16,34,35,],[13,23,13,23,23,]),'UFLOAT':([0,10,13,],[-24,25,-23,]),'OPEN_PAREN':([0,2,5,6,7,12,15,22,24,25,26,27,36,41,42,],[15,15,15,-19,-18,15,15,-17,-26,-27,15,15,-25,-15,-16,]),'UNIT':([0,2,5,6,7,12,15,22,24,25,26,27,36,41,42,],[16,16,16,-19,-18,16,16,-17,-26,-27,16,16,-25,-15,-16,]),'$end':([1,2,3,4,6,7,8,9,11,14,16,17,22,24,25,28,30,32,33,36,37,38,39,40,41,42,],[0,-6,-2,-3,-19,-18,-7,-8,-10,-13,-21,-1,-17,-26,-27,-11,-20,-4,-5,-25,-9,-12,-14,-22,-15,-16,]),'X':([6,7,24,25,],[20,21,-26,-27,]),'CLOSE_BRACKET':([8,9,11,14,16,18,19,28,30,37,38,39,40,],[-7,-8,-10,-13,-21,32,33,-11,-20,-9,-12,-14,-22,]),'CLOSE_PAREN':([8,9,11,14,16,28,29,30,37,38,39,40,],[-7,-8,-10,-13,-21,-11,39,-20,-9,-12,-14,-22,]),'PRODUCT':([11,14,16,30,39,40,],[26,-13,-21,-20,-14,-22,]),}\n+_lr_action_items = {'DIMENSIONLESS':([0,5,],[4,20,]),'OPEN_BRACKET':([0,],[5,]),'UINT':([0,10,13,16,21,22,24,31,],[7,25,-23,-24,35,36,37,40,]),'DIVISION':([0,2,3,5,6,7,8,9,11,14,15,16,17,19,23,25,26,27,28,29,30,32,37,38,39,40,41,42,],[12,12,18,12,-19,-18,-7,-8,-10,-13,12,-21,18,18,-17,-26,-27,12,-11,18,-20,-12,-25,18,-14,-22,-15,-16,]),'SIGN':([0,7,16,35,36,],[13,24,13,24,24,]),'UFLOAT':([0,10,13,],[-24,26,-23,]),'OPEN_PAREN':([0,2,5,6,7,12,15,18,23,25,26,27,37,41,42,],[15,15,15,-19,-18,15,15,15,-17,-26,-27,15,-25,-15,-16,]),'UNIT':([0,2,5,6,7,12,15,18,23,25,26,27,37,41,42,],[16,16,16,-19,-18,16,16,16,-17,-26,-27,16,-25,-15,-16,]),'$end':([1,2,3,4,6,7,8,9,11,14,16,17,23,25,26,28,30,32,33,34,37,38,39,40,41,42,],[0,-6,-2,-3,-19,-18,-7,-8,-10,-13,-21,-1,-17,-26,-27,-11,-20,-12,-4,-5,-25,-9,-14,-22,-15,-16,]),'X':([6,7,25,26,],[21,22,-26,-27,]),'CLOSE_BRACKET':([8,9,11,14,16,19,20,28,30,32,38,39,40,],[-7,-8,-10,-13,-21,33,34,-11,-20,-12,-9,-14,-22,]),'CLOSE_PAREN':([8,9,11,14,16,28,29,30,32,38,39,40,],[-7,-8,-10,-13,-21,-11,39,-20,-12,-9,-14,-22,]),'PRODUCT':([11,14,16,30,39,40,],[27,-13,-21,-20,-14,-22,]),}\n \n _lr_action = {}\n for _k, _v in _lr_action_items.items():\n@@ -28,7 +28,7 @@\n       _lr_action[_x][_k] = _y\n del _lr_action_items\n \n-_lr_goto_items = {'main':([0,],[1,]),'factor':([0,],[2,]),'combined_units':([0,2,5,15,26,27,],[3,17,18,29,37,38,]),'signed_float':([0,],[6,]),'product_of_units':([0,2,5,15,26,27,],[8,8,8,8,8,8,]),'division_of_units':([0,2,5,15,26,27,],[9,9,9,9,9,9,]),'sign':([0,16,],[10,31,]),'unit_expression':([0,2,5,12,15,26,27,],[11,11,11,28,11,11,11,]),'unit_with_power':([0,2,5,12,15,26,27,],[14,14,14,14,14,14,14,]),'signed_int':([7,34,35,],[22,41,42,]),'numeric_power':([16,],[30,]),}\n+_lr_goto_items = {'main':([0,],[1,]),'factor':([0,],[2,]),'combined_units':([0,2,5,15,27,],[3,17,19,29,38,]),'signed_float':([0,],[6,]),'product_of_units':([0,2,5,15,27,],[8,8,8,8,8,]),'division_of_units':([0,2,5,15,27,],[9,9,9,9,9,]),'sign':([0,16,],[10,31,]),'unit_expression':([0,2,5,12,15,18,27,],[11,11,11,28,11,32,11,]),'unit_with_power':([0,2,5,12,15,18,27,],[14,14,14,14,14,14,14,]),'signed_int':([7,35,36,],[23,41,42,]),'numeric_power':([16,],[30,]),}\n \n _lr_goto = {}\n for _k, _v in _lr_goto_items.items():\n@@ -38,31 +38,31 @@\n del _lr_goto_items\n _lr_productions = [\n   (\"S' -> main\",\"S'\",1,None,None,None),\n-  ('main -> factor combined_units','main',2,'p_main','cds.py',156),\n-  ('main -> combined_units','main',1,'p_main','cds.py',157),\n-  ('main -> DIMENSIONLESS','main',1,'p_main','cds.py',158),\n-  ('main -> OPEN_BRACKET combined_units CLOSE_BRACKET','main',3,'p_main','cds.py',159),\n-  ('main -> OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET','main',3,'p_main','cds.py',160),\n-  ('main -> factor','main',1,'p_main','cds.py',161),\n-  ('combined_units -> product_of_units','combined_units',1,'p_combined_units','cds.py',174),\n-  ('combined_units -> division_of_units','combined_units',1,'p_combined_units','cds.py',175),\n-  ('product_of_units -> unit_expression PRODUCT combined_units','product_of_units',3,'p_product_of_units','cds.py',181),\n-  ('product_of_units -> unit_expression','product_of_units',1,'p_product_of_units','cds.py',182),\n-  ('division_of_units -> DIVISION unit_expression','division_of_units',2,'p_division_of_units','cds.py',191),\n-  ('division_of_units -> unit_expression DIVISION combined_units','division_of_units',3,'p_division_of_units','cds.py',192),\n-  ('unit_expression -> unit_with_power','unit_expression',1,'p_unit_expression','cds.py',201),\n-  ('unit_expression -> OPEN_PAREN combined_units CLOSE_PAREN','unit_expression',3,'p_unit_expression','cds.py',202),\n-  ('factor -> signed_float X UINT signed_int','factor',4,'p_factor','cds.py',211),\n-  ('factor -> UINT X UINT signed_int','factor',4,'p_factor','cds.py',212),\n-  ('factor -> UINT signed_int','factor',2,'p_factor','cds.py',213),\n-  ('factor -> UINT','factor',1,'p_factor','cds.py',214),\n-  ('factor -> signed_float','factor',1,'p_factor','cds.py',215),\n-  ('unit_with_power -> UNIT numeric_power','unit_with_power',2,'p_unit_with_power','cds.py',232),\n-  ('unit_with_power -> UNIT','unit_with_power',1,'p_unit_with_power','cds.py',233),\n-  ('numeric_power -> sign UINT','numeric_power',2,'p_numeric_power','cds.py',242),\n-  ('sign -> SIGN','sign',1,'p_sign','cds.py',248),\n-  ('sign -> <empty>','sign',0,'p_sign','cds.py',249),\n-  ('signed_int -> SIGN UINT','signed_int',2,'p_signed_int','cds.py',258),\n-  ('signed_float -> sign UINT','signed_float',2,'p_signed_float','cds.py',264),\n-  ('signed_float -> sign UFLOAT','signed_float',2,'p_signed_float','cds.py',265),\n+  ('main -> factor combined_units','main',2,'p_main','cds.py',147),\n+  ('main -> combined_units','main',1,'p_main','cds.py',148),\n+  ('main -> DIMENSIONLESS','main',1,'p_main','cds.py',149),\n+  ('main -> OPEN_BRACKET combined_units CLOSE_BRACKET','main',3,'p_main','cds.py',150),\n+  ('main -> OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET','main',3,'p_main','cds.py',151),\n+  ('main -> factor','main',1,'p_main','cds.py',152),\n+  ('combined_units -> product_of_units','combined_units',1,'p_combined_units','cds.py',166),\n+  ('combined_units -> division_of_units','combined_units',1,'p_combined_units','cds.py',167),\n+  ('product_of_units -> unit_expression PRODUCT combined_units','product_of_units',3,'p_product_of_units','cds.py',173),\n+  ('product_of_units -> unit_expression','product_of_units',1,'p_product_of_units','cds.py',174),\n+  ('division_of_units -> DIVISION unit_expression','division_of_units',2,'p_division_of_units','cds.py',183),\n+  ('division_of_units -> combined_units DIVISION unit_expression','division_of_units',3,'p_division_of_units','cds.py',184),\n+  ('unit_expression -> unit_with_power','unit_expression',1,'p_unit_expression','cds.py',193),\n+  ('unit_expression -> OPEN_PAREN combined_units CLOSE_PAREN','unit_expression',3,'p_unit_expression','cds.py',194),\n+  ('factor -> signed_float X UINT signed_int','factor',4,'p_factor','cds.py',203),\n+  ('factor -> UINT X UINT signed_int','factor',4,'p_factor','cds.py',204),\n+  ('factor -> UINT signed_int','factor',2,'p_factor','cds.py',205),\n+  ('factor -> UINT','factor',1,'p_factor','cds.py',206),\n+  ('factor -> signed_float','factor',1,'p_factor','cds.py',207),\n+  ('unit_with_power -> UNIT numeric_power','unit_with_power',2,'p_unit_with_power','cds.py',222),\n+  ('unit_with_power -> UNIT','unit_with_power',1,'p_unit_with_power','cds.py',223),\n+  ('numeric_power -> sign UINT','numeric_power',2,'p_numeric_power','cds.py',232),\n+  ('sign -> SIGN','sign',1,'p_sign','cds.py',238),\n+  ('sign -> <empty>','sign',0,'p_sign','cds.py',239),\n+  ('signed_int -> SIGN UINT','signed_int',2,'p_signed_int','cds.py',248),\n+  ('signed_float -> sign UINT','signed_float',2,'p_signed_float','cds.py',254),\n+  ('signed_float -> sign UFLOAT','signed_float',2,'p_signed_float','cds.py',255),\n ]\n",
    "test_patch": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -60,9 +60,13 @@ def test_unit_grammar_fail(string):\n         ([\"mW/m2\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n-        ([\"1.5×10+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"1.5×10+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n@@ -106,6 +110,8 @@ def test_cds_grammar(strings, unit):\n         \"solMass(3/2)\",\n         \"km / s\",\n         \"km s-1\",\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n         \"pix0.1nm\",\n         \"pix/(0.1nm)\",\n         \"km*s\",\n",
    "problem_statement": "Unità errate lette dai file MRT (formato CDS) con astropy.table\n### Descrizione\n\nQuando si leggono file MRT (formattati secondo lo standard CDS, che è anche il formato raccomandato da AAS/ApJ) con `format='ascii.cds'`, astropy.table analizza in modo errato le unità composte. Secondo lo standard CDS, le unità dovrebbero essere SI senza spazi (http://vizier.u-strasbg.fr/doc/catstd-3.2.htx). Quindi, un'unità come `erg/AA/s/kpc^2` (luminosità superficiale per una misurazione del continuo) dovrebbe essere scritta come `10+3J/m/s/kpc2`.\n\nQuando utilizzo questi tipi di unità composte con il lettore ascii.cds, le unità non vengono interpretate correttamente. In particolare, l'ordine delle divisioni sembra essere confuso.\n\n### Comportamento atteso\n\nLe unità nella tabella risultante dovrebbero essere le stesse del file MRT di input.\n\n### Come riprodurre\n\nOttieni il pacchetto astropy da pip\n\nUtilizzando il seguente file MRT come input:\n```\nTitle:\nAuthors:\nTable:\n================================================================================\nByte-by-byte Description of file: tab.txt\n--------------------------------------------------------------------------------\n   Bytes Format Units          \t\tLabel      Explanations\n--------------------------------------------------------------------------------\n   1- 10 A10    ---            \t\tID         ID\n  12- 21 F10.5  10+3J/m/s/kpc2    \tSBCONT     Cont surface brightness\n  23- 32 F10.5  10-7J/s/kpc2 \t\tSBLINE     Line surface brightness\n--------------------------------------------------------------------------------\nID0001     70.99200   38.51040      \nID0001     13.05120   28.19240      \nID0001     3.83610    10.98370      \nID0001     1.99101    6.78822       \nID0001     1.31142    5.01932      \n```\n\nE poi leggendo la tabella ottengo:\n```\nfrom astropy.table import Table\ndat = Table.read('tab.txt',format='ascii.cds')\nprint(dat)\n  ID          SBCONT             SBLINE     \n       1e+3 J s / (kpc2 m) 1e-7 J kpc2 / s\n------ -------------------- ----------------\nID0001               70.992          38.5104\nID0001              13.0512          28.1924\nID0001               3.8361          10.9837\nID0001              1.99101          6.78822\nID0001              1.31142          5.01932\n```\nPer la colonna SBCONT, il secondo è nel posto sbagliato, e per SBLINE kpc2 è nel posto sbagliato.\n\n### Versioni\n\n```\nimport platform; print(platform.platform())\nimport sys; print(\"Python\", sys.version)\nimport astropy; print(\"astropy\", astropy.__version__)\n\nmacOS-12.5-arm64-arm-64bit\nPython 3.9.12 (main, Apr  5 2022, 01:52:34) \n[Clang 12.0.0 ]\nastropy 5.2.1\n```",
    "hints_text": "Benvenuto in Astropy 👋 e grazie per aver aperto la tua prima issue!\n\nUn membro del progetto ti risponderà il prima possibile; nel frattempo, ti preghiamo di verificare le [linee guida per la segnalazione delle issue](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) e assicurarti di aver fornito tutti i dettagli richiesti.\n\nLe issue su GitHub nel repository Astropy vengono utilizzate per tracciare segnalazioni di bug e richieste di funzionalità; se la tua issue pone una domanda su come utilizzare Astropy, ti preghiamo invece di porre la tua domanda nel [forum degli utenti Astropy Discourse](https://community.openastronomy.org/c/astropy/8) e chiudere questa issue.\n\nSe ritieni che questa issue non abbia ricevuto una risposta in tempi ragionevoli, ti preghiamo di inviare un messaggio direttamente alla [mailing list di sviluppo](http://groups.google.com/group/astropy-dev). Se l'issue è urgente o di natura sensibile (ad esempio, una vulnerabilità di sicurezza), ti preghiamo di inviare un'email direttamente all'indirizzo privato feedback@astropy.org.\n\nHmm, non può essere da `units` proprio perché sembra analizzare correttamente in questo modo e rimane lo stesso anche se faccio `u.add_enabled_units('cds')` con astropy 5.3.dev.\n\n```python\n>>> from astropy import units as u\n>>> u.Unit('10+3J/m/s/kpc2')\nWARNING: UnitsWarning: '10+3J/m/s/kpc2' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\nUnit(\"1000 J / (kpc2 m s)\")\n>>> u.Unit('10-7J/s/kpc2')\nWARNING: UnitsWarning: '10-7J/s/kpc2' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\nUnit(\"1e-07 J / (kpc2 s)\")\n>>> u.Unit('10-7J/s/kpc2').to_string()\nWARNING: UnitsWarning: '10-7J/s/kpc2' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\n'1e-07 J / (kpc2 s)'\n```\n\nSì, `units` funziona correttamente (per il mio caso specifico ho effettuato una conversione separata utilizzando quello). \nSembra proprio esserci un bug nel parser del formato CDS. Mentre, come ha notato @pllim, quello regolare analizza correttamente bene, quello CDS no:\n\n```\nIn [3]: u.Unit('10+3J/m/s/kpc2', format='cds')\nOut[3]: Unit(\"1000 J s / (kpc2 m)\")\n```\n\nDeve esserci qualcosa di strano nel parser (`astropy/units/format/cds.py`).",
    "created_at": "2023-02-06T21:56:51Z",
    "version": "5.1",
    "FAIL_TO_PASS": "[\"astropy/units/tests/test_format.py::test_cds_grammar[strings4-unit4]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings6-unit6]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[km/s.Mpc-1]\"]",
    "PASS_TO_PASS": "[\"astropy/units/tests/test_format.py::test_unit_grammar[strings0-unit0]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings1-unit1]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings2-unit2]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings3-unit3]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings4-unit4]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings5-unit5]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings6-unit6]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings7-unit7]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings8-unit8]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings9-unit9]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings10-unit10]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings11-unit11]\", \"astropy/units/tests/test_format.py::test_unit_grammar[strings12-unit12]\", \"astropy/units/tests/test_format.py::test_unit_grammar_fail[sin(\", \"astropy/units/tests/test_format.py::test_unit_grammar_fail[mag(mag)]\", \"astropy/units/tests/test_format.py::test_unit_grammar_fail[dB(dB(mW))]\", \"astropy/units/tests/test_format.py::test_unit_grammar_fail[dex()]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings0-unit0]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings1-unit1]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings2-unit2]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings3-unit3]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings5-unit5]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings7-unit7]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings8-unit8]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings9-unit9]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings10-unit10]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings11-unit11]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings12-unit12]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings13-unit13]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings14-unit14]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings15-unit15]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings16-unit16]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings17-unit17]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings18-unit18]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings19-unit19]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings20-unit20]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings21-unit21]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings22-unit22]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings23-unit23]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings24-unit24]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings25-unit25]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings26-unit26]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings27-unit27]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings28-unit28]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings29-unit29]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings30-unit30]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings31-unit31]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings32-unit32]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings33-unit33]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings34-unit34]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings35-unit35]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings36-unit36]\", \"astropy/units/tests/test_format.py::test_cds_grammar[strings37-unit37]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[0.1\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[solMass(3/2)]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[km\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[/s.Mpc]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[pix0.1nm]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[pix/(0.1nm)]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[km*s]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[km**2]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[5x8+3m]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[0.1---]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[---m]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[m---]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[--]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[0.1-]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[-m]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[m-]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[mag(s-1)]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[dB(mW)]\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[dex(cm\", \"astropy/units/tests/test_format.py::test_cds_grammar_fail[[--]]\", \"astropy/units/tests/test_format.py::test_cds_dimensionless\", \"astropy/units/tests/test_format.py::test_cds_log10_dimensionless\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings0-unit0]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings1-unit1]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings2-unit2]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings3-unit3]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings4-unit4]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings5-unit5]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings6-unit6]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings7-unit7]\", \"astropy/units/tests/test_format.py::test_ogip_grammar[strings8-unit8]\", \"astropy/units/tests/test_format.py::test_ogip_grammar_fail[log(photon\", \"astropy/units/tests/test_format.py::test_ogip_grammar_fail[sin(\", \"astropy/units/tests/test_format.py::test_ogip_grammar_fail[dB(mW)]\", \"astropy/units/tests/test_format.py::test_ogip_grammar_fail[dex(cm/s**2)]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit3]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit4]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit5]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit6]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit7]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit8]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit9]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit10]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit11]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit12]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit13]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit14]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit15]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit16]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit17]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit18]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit19]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit20]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit21]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit22]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit23]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit24]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit25]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit26]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit27]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit28]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit29]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit30]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit31]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit32]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit33]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit34]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit35]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit36]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit37]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit38]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit39]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit40]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit41]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit42]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit43]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit44]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit45]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit46]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit47]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit48]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit49]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit50]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit51]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit52]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit53]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit54]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit55]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit56]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit57]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit58]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit59]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit60]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit61]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit62]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit63]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit64]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit65]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit66]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit67]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit68]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit69]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit70]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit71]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit72]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit73]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit74]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit75]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit76]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit77]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit78]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit79]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit80]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit81]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit82]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit83]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit84]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit85]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit86]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit87]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit88]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit89]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit90]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit91]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit92]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit93]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit94]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit95]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit96]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit97]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit98]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit99]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit100]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit101]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit102]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit103]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit104]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit105]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit106]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit107]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit108]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit109]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit110]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit111]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit112]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit113]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit114]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit115]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit116]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit117]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit118]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit119]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit120]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit121]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit122]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit123]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit124]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit125]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit126]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit127]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit128]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit129]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit130]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit131]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit132]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit133]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit134]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit135]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit136]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit137]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit138]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit139]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit140]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit141]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit142]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit143]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit144]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit145]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit146]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit147]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit148]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit149]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit150]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit151]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit152]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit153]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit154]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit155]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit156]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit157]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit158]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit159]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit160]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit161]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit162]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit163]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit164]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit165]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit166]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit167]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit168]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit169]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit170]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit171]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit172]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit173]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit174]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit175]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit176]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit177]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit178]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit179]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit180]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit181]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit182]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit183]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit184]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit185]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit186]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit187]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit188]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit189]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit190]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit191]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit192]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit193]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit194]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit195]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit196]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit197]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit198]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit199]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit200]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit201]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit202]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit203]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit204]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit205]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit206]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit207]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit208]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit209]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit210]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit211]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit212]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit213]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit214]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit215]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit216]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit217]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit218]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit219]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit220]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit221]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit222]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit223]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit224]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit225]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit226]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit227]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit228]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit229]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit230]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit231]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit232]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit233]\", \"astropy/units/tests/test_format.py::TestRoundtripGeneric::test_roundtrip[unit234]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit3]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit4]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit5]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit6]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit7]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit8]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit9]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit10]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit11]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit12]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit13]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit14]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit15]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit16]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit17]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit18]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit19]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit20]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit21]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit22]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit23]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit24]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit25]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit26]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit27]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit28]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit29]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit30]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit31]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit32]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit33]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit34]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit35]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit36]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit37]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit38]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit39]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit40]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit41]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit42]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit43]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit44]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit45]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit46]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit47]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit48]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit49]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit50]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit51]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit52]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit53]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit54]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit55]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit56]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit57]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit58]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit59]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit60]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit61]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit62]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit63]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit64]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit65]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit66]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit67]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit68]\", \"astropy/units/tests/test_format.py::TestRoundtripVOUnit::test_roundtrip[unit69]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit3]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit4]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit5]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit6]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit7]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit8]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit9]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit10]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit11]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit12]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit13]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit14]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit15]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit16]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit17]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit18]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit19]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit20]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit21]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit22]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit23]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit24]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit25]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit26]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit27]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit28]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit29]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit30]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit31]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit32]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit33]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit34]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit35]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit36]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit37]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit38]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit39]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit40]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit41]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit42]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit43]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit44]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit45]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit46]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit47]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit48]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit49]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit50]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit51]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit52]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit53]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit54]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit55]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit56]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit57]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit58]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit59]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit60]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit61]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit62]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit63]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit64]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit65]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit66]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit67]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit68]\", \"astropy/units/tests/test_format.py::TestRoundtripFITS::test_roundtrip[unit69]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit3]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit4]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit5]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit6]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit7]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit8]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit9]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit10]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit11]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit12]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit13]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit14]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit15]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit16]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit17]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit18]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit19]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit20]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit21]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit22]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit23]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit24]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit25]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit26]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit27]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit28]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit29]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit30]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit31]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit32]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit33]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit34]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit35]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit36]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit37]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit38]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit39]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit40]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit41]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit42]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit43]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit44]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit45]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit46]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit47]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit48]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit49]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit50]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit51]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit52]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit53]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit54]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit55]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit56]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit57]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit58]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit59]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit60]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit61]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit62]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit63]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit64]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit65]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit66]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit67]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit68]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit69]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit70]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit71]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit72]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit73]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit74]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit75]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit76]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit77]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit78]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit79]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit80]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit81]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit82]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit83]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit84]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit85]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit86]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit87]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit88]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit89]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit90]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit91]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit92]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit93]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit94]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit95]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit96]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit97]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit98]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit99]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit100]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit101]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit102]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit103]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit104]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip[unit105]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip_dex[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip_dex[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripCDS::test_roundtrip_dex[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit0]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit1]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit2]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit3]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit4]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit5]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit6]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit7]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit8]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit9]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit10]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit11]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit12]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit13]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit14]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit15]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit16]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit17]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit18]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit19]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit20]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit21]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit22]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit23]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit24]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit25]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit26]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit27]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit28]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit29]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit30]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit31]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit32]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit33]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit34]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit35]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit36]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit37]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit38]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit39]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit40]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit41]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit42]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit43]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit44]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit45]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit46]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit47]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit48]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit49]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit50]\", \"astropy/units/tests/test_format.py::TestRoundtripOGIP::test_roundtrip[unit51]\", \"astropy/units/tests/test_format.py::test_fits_units_available\", \"astropy/units/tests/test_format.py::test_vo_units_available\", \"astropy/units/tests/test_format.py::test_cds_units_available\", \"astropy/units/tests/test_format.py::test_cds_non_ascii_unit\", \"astropy/units/tests/test_format.py::test_latex\", \"astropy/units/tests/test_format.py::test_new_style_latex\", \"astropy/units/tests/test_format.py::test_latex_scale\", \"astropy/units/tests/test_format.py::test_latex_inline_scale\", \"astropy/units/tests/test_format.py::test_format_styles[generic-erg\", \"astropy/units/tests/test_format.py::test_format_styles[s-erg\", \"astropy/units/tests/test_format.py::test_format_styles[console-\", \"astropy/units/tests/test_format.py::test_format_styles[latex-$\\\\\\\\mathrm{\\\\\\\\frac{erg}{s\\\\\\\\,cm^{2}}}$]\", \"astropy/units/tests/test_format.py::test_format_styles[latex_inline-$\\\\\\\\mathrm{erg\\\\\\\\,s^{-1}\\\\\\\\,cm^{-2}}$]\", \"astropy/units/tests/test_format.py::test_format_styles[>20s-\", \"astropy/units/tests/test_format.py::test_flatten_to_known\", \"astropy/units/tests/test_format.py::test_flatten_impossible\", \"astropy/units/tests/test_format.py::test_console_out\", \"astropy/units/tests/test_format.py::test_flexible_float\", \"astropy/units/tests/test_format.py::test_fits_to_string_function_error\", \"astropy/units/tests/test_format.py::test_fraction_repr\", \"astropy/units/tests/test_format.py::test_scale_effectively_unity\", \"astropy/units/tests/test_format.py::test_percent\", \"astropy/units/tests/test_format.py::test_scaled_dimensionless\", \"astropy/units/tests/test_format.py::test_deprecated_did_you_mean_units\", \"astropy/units/tests/test_format.py::test_fits_function[mag(ct/s)]\", \"astropy/units/tests/test_format.py::test_fits_function[dB(mW)]\", \"astropy/units/tests/test_format.py::test_fits_function[dex(cm\", \"astropy/units/tests/test_format.py::test_vounit_function[mag(ct/s)]\", \"astropy/units/tests/test_format.py::test_vounit_function[dB(mW)]\", \"astropy/units/tests/test_format.py::test_vounit_function[dex(cm\", \"astropy/units/tests/test_format.py::test_vounit_binary_prefix\", \"astropy/units/tests/test_format.py::test_vounit_unknown\", \"astropy/units/tests/test_format.py::test_vounit_details\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[nm-nm-0.1-10^-1-0.1]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[fm-fm-100.0-10+2-100]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[m^2-m**2-100.0-100.0-100]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[cm-cm-2.54-2.54-2.54]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[kg-kg-1.898124597e+27-1.898124597E27-1.8981246e+27]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[m/s-m.s**-1-299792458.0-299792458-2.9979246e+08]\", \"astropy/units/tests/test_format.py::test_vounit_scale_factor[cm2-cm**2-1e-20-10^(-20)-1e-20]\", \"astropy/units/tests/test_format.py::test_vounit_custom\", \"astropy/units/tests/test_format.py::test_vounit_implicit_custom\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10+2-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10(+2)-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**+2-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**(+2)-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^+2-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^(+2)-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**2-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**(2)-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^2-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^(2)-100-10**2]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10-20-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10(-20)-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**-20-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10**(-20)-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^-20-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor[10^(-20)-1e-20-10**-20]\", \"astropy/units/tests/test_format.py::test_fits_scale_factor_errors\", \"astropy/units/tests/test_format.py::test_double_superscript\", \"astropy/units/tests/test_format.py::test_powers[1.0-m]\", \"astropy/units/tests/test_format.py::test_powers[2.0-m2]\", \"astropy/units/tests/test_format.py::test_powers[-10-1\", \"astropy/units/tests/test_format.py::test_powers[1.5-m(3/2)]\", \"astropy/units/tests/test_format.py::test_powers[0.6666666666666666-m(2/3)]\", \"astropy/units/tests/test_format.py::test_powers[0.6363636363636364-m(7/11)]\", \"astropy/units/tests/test_format.py::test_powers[-0.015625-1\", \"astropy/units/tests/test_format.py::test_powers[0.01-m(1/100)]\", \"astropy/units/tests/test_format.py::test_powers[0.019801980198019802-m(0.019801980198019802)]\", \"astropy/units/tests/test_format.py::test_powers[power9-m(2/101)]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\xb5g-unit0]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u03bcg-unit1]\", \"astropy/units/tests/test_format.py::test_unicode[g\\\\u22121-unit2]\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\u207b\\\\xb9-unit3]\", \"astropy/units/tests/test_format.py::test_unicode[m\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\xb2-unit5]\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\u207a\\\\xb2-unit6]\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\xb3-unit7]\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\xb9\\\\u2070-unit8]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u03a9-unit9]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u2126-unit10]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\xb5\\\\u03a9-unit11]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u212b-unit12]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u212b\", \"astropy/units/tests/test_format.py::test_unicode[\\\\xc5-unit14]\", \"astropy/units/tests/test_format.py::test_unicode[A\\\\u030a-unit15]\", \"astropy/units/tests/test_format.py::test_unicode[m\\\\u212b-unit16]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\xb0C-unit17]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\xb0-unit18]\", \"astropy/units/tests/test_format.py::test_unicode[M\\\\u2299-unit19]\", \"astropy/units/tests/test_format.py::test_unicode[L\\\\u2609-unit20]\", \"astropy/units/tests/test_format.py::test_unicode[M\\\\u2295-unit21]\", \"astropy/units/tests/test_format.py::test_unicode[M\\\\u2641-unit22]\", \"astropy/units/tests/test_format.py::test_unicode[R\\\\u2643-unit23]\", \"astropy/units/tests/test_format.py::test_unicode[\\\\u2032-unit24]\", \"astropy/units/tests/test_format.py::test_unicode[R\\\\u221e-unit25]\", \"astropy/units/tests/test_format.py::test_unicode[M\\\\u209a-unit26]\", \"astropy/units/tests/test_format.py::test_unicode_failures[g\\\\xb5]\", \"astropy/units/tests/test_format.py::test_unicode_failures[g\\\\u2212]\", \"astropy/units/tests/test_format.py::test_unicode_failures[m\\\\u207b1]\", \"astropy/units/tests/test_format.py::test_unicode_failures[m+\\\\xb9]\", \"astropy/units/tests/test_format.py::test_unicode_failures[m\\\\u2212\\\\xb9]\", \"astropy/units/tests/test_format.py::test_unicode_failures[k\\\\u212b]\", \"astropy/units/tests/test_format.py::test_parse_error_message_for_output_only_format[unicode]\", \"astropy/units/tests/test_format.py::test_parse_error_message_for_output_only_format[latex]\", \"astropy/units/tests/test_format.py::test_parse_error_message_for_output_only_format[latex_inline]\", \"astropy/units/tests/test_format.py::test_unknown_parser\", \"astropy/units/tests/test_format.py::test_celsius_fits\"]",
    "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-11510",
    "base_commit": "6cb783c0024a873722952a67ebb9f41771c8eb6d",
    "patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -8,6 +8,7 @@\n from docutils.parsers.rst.directives.admonitions import BaseAdmonition\n from docutils.parsers.rst.directives.misc import Class\n from docutils.parsers.rst.directives.misc import Include as BaseInclude\n+from docutils.statemachine import StateMachine\n \n from sphinx import addnodes\n from sphinx.domains.changeset import VersionChange  # noqa: F401  # for compatibility\n@@ -17,6 +18,7 @@\n from sphinx.util.docutils import SphinxDirective\n from sphinx.util.matching import Matcher, patfilter\n from sphinx.util.nodes import explicit_title_re\n+from sphinx.util.osutil import os_path\n \n if TYPE_CHECKING:\n     from docutils.nodes import Element, Node\n@@ -369,6 +371,40 @@ class Include(BaseInclude, SphinxDirective):\n     \"\"\"\n \n     def run(self) -> list[Node]:\n+\n+        # To properly emit \"source-read\" events from included RST text,\n+        # we must patch the ``StateMachine.insert_input()`` method.\n+        # In the future, docutils will hopefully offer a way for Sphinx\n+        # to provide the RST parser to use\n+        # when parsing RST text that comes in via Include directive.\n+        def _insert_input(include_lines, path):\n+            # First, we need to combine the lines back into text so that\n+            # we can send it with the source-read event.\n+            # In docutils 0.18 and later, there are two lines at the end\n+            # that act as markers.\n+            # We must preserve them and leave them out of the source-read event:\n+            text = \"\\n\".join(include_lines[:-2])\n+\n+            # The docname to pass into the source-read event\n+            docname = self.env.path2doc(os_path(path))\n+            # Emit the \"source-read\" event\n+            arg = [text]\n+            self.env.app.events.emit(\"source-read\", docname, arg)\n+            text = arg[0]\n+\n+            # Split back into lines and reattach the two marker lines\n+            include_lines = text.splitlines() + include_lines[-2:]\n+\n+            # Call the parent implementation.\n+            # Note that this snake does not eat its tail because we patch\n+            # the *Instance* method and this call is to the *Class* method.\n+            return StateMachine.insert_input(self.state_machine, include_lines, path)\n+\n+        # Only enable this patch if there are listeners for 'source-read'.\n+        if self.env.app.events.listeners.get('source-read'):\n+            # See https://github.com/python/mypy/issues/2427 for details on the mypy issue\n+            self.state_machine.insert_input = _insert_input  # type: ignore[method-assign]\n+\n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n             # docutils \"standard\" includes, do not do path processing\n",
    "test_patch": "diff --git a/tests/roots/test-directive-include/baz/baz.rst b/tests/roots/test-directive-include/baz/baz.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-directive-include/baz/baz.rst\n@@ -0,0 +1,6 @@\n+Baz\n+===\n+\n+.. include:: foo.rst\n+\n+Baz was here.\n\\ No newline at end of file\ndiff --git a/tests/roots/test-directive-include/conf.py b/tests/roots/test-directive-include/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-directive-include/conf.py\n@@ -0,0 +1,2 @@\n+project = 'test-directive-include'\n+exclude_patterns = ['_build']\ndiff --git a/tests/roots/test-directive-include/foo.rst b/tests/roots/test-directive-include/foo.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-directive-include/foo.rst\n@@ -0,0 +1 @@\n+The #magical foo.\ndiff --git a/tests/roots/test-directive-include/text.txt b/tests/roots/test-directive-include/text.txt\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-directive-include/text.txt\n@@ -0,0 +1 @@\n+This is plain text.\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -148,3 +148,40 @@ def test_toctree_twice(app):\n     assert_node(doctree[0][0],\n                 entries=[(None, 'foo'), (None, 'foo')],\n                 includefiles=['foo', 'foo'])\n+\n+\n+@pytest.mark.sphinx(testroot='directive-include')\n+def test_include_source_read_event(app):\n+    sources_reported = {}\n+\n+    def source_read_handler(app, doc, source):\n+        sources_reported[doc] = source[0]\n+\n+    app.connect(\"source-read\", source_read_handler)\n+    text = (\".. include:: baz/baz.rst\\n\"\n+            \"   :start-line: 4\\n\\n\"\n+            \".. include:: text.txt\\n\"\n+            \"   :literal:    \\n\")\n+    app.env.find_files(app.config, app.builder)\n+    restructuredtext.parse(app, text, 'index')\n+    assert \"index\" in sources_reported\n+    assert \"text.txt\" not in sources_reported  # text was included as literal, no rst parsing\n+    assert \"baz/baz\" in sources_reported\n+    assert sources_reported[\"baz/baz\"] == \"\\nBaz was here.\"\n+\n+\n+@pytest.mark.sphinx(testroot='directive-include')\n+def test_include_source_read_event_nested_includes(app):\n+\n+    def source_read_handler(app, doc, source):\n+        text = source[0].replace(\"#magical\", \"amazing\")\n+        source[0] = text\n+\n+    app.connect(\"source-read\", source_read_handler)\n+    text = (\".. include:: baz/baz.rst\\n\")\n+    app.env.find_files(app.config, app.builder)\n+    doctree = restructuredtext.parse(app, text, 'index')\n+    assert_node(doctree, addnodes.document)\n+    assert len(doctree.children) == 3\n+    assert_node(doctree.children[1], nodes.paragraph)\n+    assert doctree.children[1].rawsource == \"The amazing foo.\"\n",
    "problem_statement": "**L'evento source-read non modifica l'origine dei file inclusi**\n\n### Descrizione del bug\n\nNella [documentazione Yocto](https://git.yoctoproject.org/yocto-docs), utilizziamo un'estensione personalizzata per eseguire ricerche e sostituzioni in blocchi letterali, vedi https://git.yoctoproject.org/yocto-docs/tree/documentation/sphinx/yocto-vars.py.\n\nAbbiamo scoperto (https://git.yoctoproject.org/yocto-docs/commit/?id=b7375ea4380e716a02c736e4231aaf7c1d868c6b e https://lore.kernel.org/yocto-docs/CAP71WjwG2PCT=ceuZpBmeF-Xzn9yVQi1PG2+d6+wRjouoAZ0Aw@mail.gmail.com/#r) che questo non funziona su tutti i file e alcuni vengono esclusi da questo meccanismo. Questo è il caso dei file inclusi.\n\nHo potuto riprodurre il problema su Sphinx 5.0.2.\n\n### Come riprodurre\n\n**conf.py:**\n```python\nimport sys\nimport os\n\nsys.path.insert(0, os.path.abspath('.'))\n\nextensions = [\n        'my-extension'\n]\n```\n\n**index.rst:**\n```reStructuredText\nThis is a test\n==============\n\n.. include:: something-to-include.rst\n\n&REPLACE_ME;\n```\n\n**something-to-include.rst:**\n```reStructuredText\nTesting\n=======\n\n&REPLACE_ME;\n```\n\n**my-extension.py:**\n```python\n#!/usr/bin/env python3\n\nfrom sphinx.application import Sphinx\n\n\n__version__ = '1.0'\n\n\ndef subst_vars_replace(app: Sphinx, docname, source):\n    result = source[0]\n    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n    source[0] = result\n\n\ndef setup(app: Sphinx):\n\n    app.connect('source-read', subst_vars_replace)\n\n    return dict(\n        version=__version__,\n        parallel_read_safe=True,\n        parallel_write_safe=True\n    )\n```\n\n```sh\nsphinx-build . build\nif grep -Rq REPLACE_ME build/*.html; then echo BAD; fi\n```\n\nIl file `build/index.html` conterrà:\n```html\n[...]\n<div class=\"section\" id=\"testing\">\n<h1>Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this heading\">¶</a></h1>\n<p>&amp;REPLACE_ME;</p>\n<p>REPLACED</p>\n</div>\n[...]\n```\n\nNota che il dump di `docname` e `source[0]` mostra che la funzione viene effettivamente chiamata per il file `something-to-include.rst` e il suo contenuto viene correttamente sostituito in `source[0]`, ma per qualche motivo non arriva al file HTML finale.\n\n### Comportamento atteso\n\nIl file `build/index.html` dovrebbe contenere:\n```html\n[...]\n<div class=\"section\" id=\"testing\">\n<h1>Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this heading\">¶</a></h1>\n<p>REPLACED</p>\n<p>REPLACED</p>\n</div>\n[...]\n```\n\n### Il tuo progetto\n\nhttps://git.yoctoproject.org/yocto-docs\n\n### Screenshots\n\n_Nessuna risposta_\n\n### Sistema Operativo\n\nLinux\n\n### Versione Python\n\n3.10\n\n### Versione Sphinx\n\n5.0.2\n\n### Estensioni Sphinx\n\nEstensione personalizzata che utilizza l'evento source-read\n\n### Strumenti aggiuntivi\n\n_Nessuna risposta_\n\n### Contesto aggiuntivo\n\n_Nessuna risposta_",
    "hints_text": "Purtroppo, l'evento `source-read` non supporta la direttiva `include`. Quindi non verrà emesso all'inclusione.\n\n> Nota che il dumping di docname e source[0] mostra che la funzione viene effettivamente chiamata per il file something-to-include.rst e il suo contenuto viene correttamente sostituito in source[0], ma per qualche motivo non arriva al file HTML finale.\n\nPuoi vedere il risultato della sostituzione in `something-to-include.html` invece che in `index.html`. Il file sorgente è stato elaborato due volte, come file sorgente e come file incluso. L'evento che hai visto è stato emesso per il primo.\nQuesto dovrebbe essere documentato in modo che gli utenti non si aspettino che funzioni come ho fatto io.\n\nCapisco \"wontfix\" come \"questo è il comportamento previsto\", c'è una ragione tecnica dietro questa scelta? In sostanza, è qualcosa che può essere implementato/corretto nelle versioni future o è una scelta attiva e deliberata che non verrà mai supportata?\n\nC'è qualche soluzione alternativa per risolvere questo problema? Forse agganciando l'azione di inclusione come con source-read??\n\n> Ciao.\n> \n> C'è qualche soluzione alternativa per risolvere questo problema? Forse agganciando l'azione di inclusione come con source-read??\n\nHo trascorso gli ultimi due giorni cercando di utilizzare l'evento `source-read` per sostituire le posizioni delle immagini per figure e immagini. Ho trovato questo ticket oscuro, che dice che non è possibile utilizzando l'API di Sphinx?\n\nTicket piuttosto vecchio, non è chiaro dalla risposta di @tk0miya se si tratta di un bug o di cosa si dovrebbe fare invece. Questo sembra un caso d'uso piuttosto basilare per l'API di Sphinx (cioè, cercare/sostituire testo utilizzando l'API)\nPer quanto ne so, questo è il comportamento previsto. Come hanno detto:\n\n> Il file sorgente è stato elaborato due volte, come file sorgente e come file incluso. L'evento che hai visto è stato emesso per il primo.\n\nSe non ricordo male, l'evento `source-read` viene attivato in una fase iniziale della compilazione, molto prima che le direttive vengano effettivamente elaborate. In particolare, non abbiamo idea che ci sia una direttiva `include` (e non dovremmo analizzare il sorgente in quel momento). Inoltre, il contenuto incluso viene letto solo quando la direttiva viene eseguita e non prima.\n\nSe vuoi che il file incluso tramite la direttiva `include` venga elaborato dall'evento `source-read`, devi modificare la direttiva `include`. Tuttavia, la direttiva `include` di Sphinx è solo un wrapper intorno alla direttiva `include` di docutils, quindi il lavoro dietro è complicato.\n\nInvece di usare `&REPLACE;`, ti suggerirei di usare costruzioni di sostituzione e metterle in un `rst_prolog` invece. Ad esempio,\n\n```python\nrst_prolog = \"\"\"\n.. |mine| replace:: not yours\n\"\"\"\n```\n\ne poi, nel documento desiderato:\n\n```rst\nQuesto documento è |mine|.\n```\n\n---\n\nPer un modo più generico, dovrai scavare di più. Ecco alcune idee \"hacky\":\n\n- Usa un file modello (diciamo `a.tpl`) e scrivi qualcosa come `[[a.tpl]]`. Quando leggi il file, crea un file `a.out` da `a.tpl` e sostituisci `[[a.tpl]]` con `.. include:: a.out`.\n- In alternativa, aggiungi una trasformazione post-elaborazione che agisce sui nodi generati per sostituire il contenuto in attesa di essere sostituito. Questo può essere fatto modificando la direttiva `include` e post-elaborando i nodi che sono stati appena creati, ad esempio.\n\nEcco una soluzione che risolve il problema sottostante in Sphinx, utilizzando un'estensione:\n\n```python\n\"\"\"Estensione per correggere i problemi nella direttiva include incorporata.\"\"\"\n\nimport docutils.statemachine\n\n# Fornisce correzioni per la direttiva `include` di Sphinx, che non supporta l'evento source-read di Sphinx.\n# Fortunatamente, la direttiva Include alla fine chiama StateMachine.insert_input,\n# per il testo rst e questo è l'unico uso di quella funzione. Quindi facciamo un monkey-patch!\n\n\ndef setup(app):\n    og_insert_input = docutils.statemachine.StateMachine.insert_input\n\n    def my_insert_input(self, include_lines, path):\n        # prima dobbiamo combinare le righe di nuovo in testo in modo da poterlo inviare con l'evento source-read\n        # evento:\n        text = \"\\n\".join(include_lines)\n        # emetti l'evento \"source-read\"\n        arg = [text]\n        app.env.events.emit(\"source-read\", path, arg)\n        text = arg[0]\n        # dividi di nuovo in righe:\n        include_lines = text.splitlines()\n        # chiama la funzione originale:\n        og_insert_input(self, include_lines, path)\n\n    # inietta la nostra funzione patchata\n    docutils.statemachine.StateMachine.insert_input = my_insert_input\n\n    return {\n        \"version\": \"0.0.1\",\n        \"parallel_read_safe\": True,\n        \"parallel_write_safe\": True,\n    }\n```\n\nOra, sono disposto a contribuire con una patch appropriata a Sphinx (sottoclassando `docutils.statematchine.StateMachine` per estendere la funzione `insert_input`). Ma non perderò tempo su questo se i manutentori di Sphinx non sono interessati a risolvere questo problema. Ammetto che la mia soluzione tramite estensione funziona abbastanza bene e aggirare il problema.\n\nQuesta estensione mi permette di impostare condizionali sulle righe della tabella. Evviva!\n\n> Ecco una soluzione che risolve il problema sottostante in Sphinx, utilizzando un'estensione:\n> \n> ```python\n> \"\"\"Estensione per correggere i problemi nella direttiva include incorporata.\"\"\"\n> \n> import docutils.statemachine\n> \n> # Fornisce correzioni per la direttiva `include` di Sphinx, che non supporta l'evento source-read di Sphinx.\n> # Fortunatamente, la direttiva Include alla fine chiama StateMachine.insert_input,\n> # per il testo rst e questo è l'unico uso di quella funzione. Quindi facciamo un monkey-patch!\n> \n> \n> def setup(app):\n>     og_insert_input = docutils.statemachine.StateMachine.insert_input\n> \n>     def my_insert_input(self, include_lines, path):\n>         # prima dobbiamo combinare le righe di nuovo in testo in modo da poterlo inviare con l'evento source-read\n>         # evento:\n>         text = \"\\n\".join(include_lines)\n>         # emetti l'evento \"source-read\"\n>         arg = [text]\n>         app.env.events.emit(\"source-read\", path, arg)\n>         text = arg[0]\n>         # dividi di nuovo in righe:\n>         include_lines = text.splitlines()\n>         # chiama la funzione originale:\n>         og_insert_input(self, include_lines, path)\n> \n>     # inietta la nostra funzione patchata\n>     docutils.statemachine.StateMachine.insert_input = my_insert_input\n> \n>     return {\n>         \"version\": \"0.0.1\",\n>         \"parallel_read_safe\": True,\n>         \"parallel_write_safe\": True,\n>     }\n> ```\n> \n> Ora, sono disposto a contribuire con una patch appropriata a Sphinx (sottoclassando `docutils.statematchine.StateMachine` per estendere la funzione `insert_input`). Ma non perderò tempo su questo se i manutentori di Sphinx non sono interessati a risolvere questo problema. Ammetto che la mia soluzione tramite estensione funziona abbastanza bene e aggirare il problema.\n\nWow! è un ottimo plugin. Grazie per averlo condiviso!!\n\nUn'ultima cosa, questo problema dovrebbe essere chiamato \"**l'evento source-read non viene emesso per i file rst inclusi**\" - questo è davvero il problema in gioco qui.\n\nQuello che fa la mia patch è iniettare codice nella funzione `insert_input` in modo che emetta un evento \"source-read\" corretto per il testo rst che sta per essere incluso nel documento host. Questo problema è presente in Sphinx fin dall'inizio e sono stati creati alcuni bug per questo. Basandomi sulle risposte a quei bug, ho questo senso di ragno che non tutti capiscono qual è il problema sottostante, ma potrei sbagliarmi. Il mio senso di ragno non è buono come quello di Peter Parker :wink:\n\nHo aggirato il problema eliminando tutte le dichiarazioni di inclusione nella nostra documentazione. Sto usando solo il TOC. Probabilmente è la migliore pratica comunque.\n\n@halldorfannar per favore potresti convertire la tua patch in una PR?\n\nA\n\nAssolutamente, @AA-Turner. Inizierò a lavorare su questo oggi.",
    "created_at": "2023-07-24T22:46:12Z",
    "version": "7.2",
    "FAIL_TO_PASS": "[\"tests/test_directive_other.py::test_include_source_read_event\", \"tests/test_directive_other.py::test_include_source_read_event_nested_includes\"]",
    "PASS_TO_PASS": "[\"tests/test_directive_other.py::test_toctree\", \"tests/test_directive_other.py::test_relative_toctree\", \"tests/test_directive_other.py::test_toctree_urls_and_titles\", \"tests/test_directive_other.py::test_toctree_glob\", \"tests/test_directive_other.py::test_toctree_glob_and_url\", \"tests/test_directive_other.py::test_reversed_toctree\", \"tests/test_directive_other.py::test_toctree_twice\"]",
    "environment_setup_commit": "7758e016231c3886e5a290c00fcb2c75d1f36c18",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-18199",
    "base_commit": "ba80d1e493f21431b4bf729b3e0452cd47eb9566",
    "patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -2,6 +2,7 @@\n \n from sympy.core.compatibility import as_int, range\n from sympy.core.function import Function\n+from sympy.utilities.iterables import cartes\n from sympy.core.numbers import igcd, igcdex, mod_inverse\n from sympy.core.power import isqrt\n from sympy.core.singleton import S\n@@ -742,6 +743,48 @@ def _nthroot_mod1(s, q, p, all_roots):\n         return res\n     return min(res)\n \n+def _nthroot_mod_composite(a, n, m):\n+    \"\"\"\n+    Find the solutions to ``x**n = a mod m`` when m is not prime.\n+    \"\"\"\n+    from sympy.ntheory.modular import crt\n+    f = factorint(m)\n+    dd = {}\n+    for p, e in f.items():\n+        tot_roots = set()\n+        if e == 1:\n+            tot_roots.update(nthroot_mod(a, n, p, True) or [])\n+        else:\n+            for root in nthroot_mod(a, n, p, True) or []:\n+                rootn = pow(root, n)\n+                diff = (rootn // (root or 1) * n) % p\n+                if diff != 0:\n+                    ppow = p\n+                    for j in range(1, e):\n+                        ppow *= p\n+                        root = (root - (rootn - a) * mod_inverse(diff, p)) % ppow\n+                    tot_roots.add(root)\n+                else:\n+                    new_base = p\n+                    roots_in_base = {root}\n+                    while new_base < pow(p, e):\n+                        new_base *= p\n+                        new_roots = set()\n+                        for k in roots_in_base:\n+                            if (pow(k, n) - a) % (new_base) != 0:\n+                                continue\n+                            while k not in new_roots:\n+                                new_roots.add(k)\n+                                k = (k + (new_base // p)) % new_base\n+                        roots_in_base = new_roots\n+                    tot_roots = tot_roots | roots_in_base\n+        dd[pow(p, e)] = tot_roots\n+    a = []\n+    m = []\n+    for x, y in dd.items():\n+        m.append(x)\n+        a.append(list(y))\n+    return sorted(set(crt(m, list(i))[0] for i in cartes(*a)))\n \n def nthroot_mod(a, n, p, all_roots=False):\n     \"\"\"\n@@ -771,11 +814,12 @@ def nthroot_mod(a, n, p, all_roots=False):\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n+    if not isprime(p):\n+        return _nthroot_mod_composite(a, n, p)\n+    if a % p == 0:\n+        return [0]\n     if not is_nthpow_residue(a, n, p):\n         return None\n-    if not isprime(p):\n-        raise NotImplementedError(\"Not implemented for composite p\")\n-\n     if (p - 1) % n == 0:\n         return _nthroot_mod1(a, n, p, all_roots)\n     # The roots of ``x**n - a = 0 (mod p)`` are roots of\n",
    "test_patch": "diff --git a/sympy/ntheory/tests/test_residue.py b/sympy/ntheory/tests/test_residue.py\n--- a/sympy/ntheory/tests/test_residue.py\n+++ b/sympy/ntheory/tests/test_residue.py\n@@ -162,7 +162,8 @@ def test_residue():\n     assert is_nthpow_residue(31, 4, 41)\n     assert not is_nthpow_residue(2, 2, 5)\n     assert is_nthpow_residue(8547, 12, 10007)\n-    raises(NotImplementedError, lambda: nthroot_mod(29, 31, 74))\n+\n+    assert nthroot_mod(29, 31, 74) == [45]\n     assert nthroot_mod(1801, 11, 2663) == 44\n     for a, q, p in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663),\n           (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663),\n@@ -170,8 +171,12 @@ def test_residue():\n         r = nthroot_mod(a, q, p)\n         assert pow(r, q, p) == a\n     assert nthroot_mod(11, 3, 109) is None\n-    raises(NotImplementedError, lambda: nthroot_mod(16, 5, 36))\n-    raises(NotImplementedError, lambda: nthroot_mod(9, 16, 36))\n+    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n+    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n+    assert nthroot_mod(4, 3, 3249000) == []\n+    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n+    assert nthroot_mod(0, 12, 37, True) == [0]\n+    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n \n     for p in primerange(5, 100):\n         qv = range(3, p, 4)\ndiff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -2242,11 +2242,12 @@ def test_solve_modular():\n     assert solveset(Mod(3**(3**x), 4) - 3, x, S.Integers) == \\\n             Intersection(ImageSet(Lambda(n, Intersection({log(2*n + 1)/log(3)},\n             S.Integers)), S.Naturals0), S.Integers)\n-    # Not Implemented for m without primitive root\n+    # Implemented for m without primitive root\n     assert solveset(Mod(x**3, 8) - 1, x, S.Integers) == \\\n-            ConditionSet(x, Eq(Mod(x**3, 8) - 1, 0), S.Integers)\n+            ImageSet(Lambda(n, 8*n + 1), S.Integers)\n     assert solveset(Mod(x**4, 9) - 4, x, S.Integers) == \\\n-            ConditionSet(x, Eq(Mod(x**4, 9) - 4, 0), S.Integers)\n+            Union(ImageSet(Lambda(n, 9*n + 4), S.Integers),\n+            ImageSet(Lambda(n, 9*n + 5), S.Integers))\n     # domain intersection\n     assert solveset(3 - Mod(5*x - 8, 7), x, S.Naturals0) == \\\n             Intersection(ImageSet(Lambda(n, 7*n + 5), S.Integers), S.Naturals0)\n",
    "problem_statement": "La funzione `nthroot_mod` manca una radice di x = 0 mod p.\nQuando nell'equazione x**n = a mod p, se a % p == 0, allora x = 0 mod p è anche una radice di questa equazione. Ma attualmente `nthroot_mod` non controlla questa condizione. `nthroot_mod(17*17, 5, 17)` ha una radice `0 mod 17`, ma non la restituisce.",
    "hints_text": "Invia una richiesta pull relativa a questo.",
    "created_at": "2020-01-01T19:08:59Z",
    "version": "1.6",
    "FAIL_TO_PASS": "[\"test_solve_modular\"]",
    "PASS_TO_PASS": "[\"test_invert_real\", \"test_invert_complex\", \"test_domain_check\", \"test_issue_11536\", \"test_issue_17479\", \"test_is_function_class_equation\", \"test_garbage_input\", \"test_solve_mul\", \"test_solve_invert\", \"test_errorinverses\", \"test_solve_polynomial\", \"test_return_root_of\", \"test__has_rational_power\", \"test_solveset_sqrt_1\", \"test_solveset_sqrt_2\", \"test_solve_polynomial_symbolic_param\", \"test_solve_rational\", \"test_solveset_real_gen_is_pow\", \"test_no_sol\", \"test_sol_zero_real\", \"test_no_sol_rational_extragenous\", \"test_solve_polynomial_cv_1a\", \"test_solveset_real_rational\", \"test_solveset_real_log\", \"test_poly_gens\", \"test_solve_abs\", \"test_issue_9565\", \"test_issue_10069\", \"test_real_imag_splitting\", \"test_units\", \"test_solve_only_exp_1\", \"test_atan2\", \"test_piecewise_solveset\", \"test_solveset_complex_polynomial\", \"test_sol_zero_complex\", \"test_solveset_complex_rational\", \"test_solveset_complex_exp\", \"test_solveset_real_exp\", \"test_solve_complex_log\", \"test_solve_complex_sqrt\", \"test_solveset_complex_tan\", \"test_solve_invalid_sol\", \"test_solveset\", \"test__solveset_multi\", \"test_conditionset\", \"test_solveset_domain\", \"test_improve_coverage\", \"test_issue_9522\", \"test_solvify\", \"test_abs_invert_solvify\", \"test_linear_eq_to_matrix\", \"test_issue_16577\", \"test_linsolve\", \"test_linsolve_immutable\", \"test_solve_decomposition\", \"test_nonlinsolve_basic\", \"test_nonlinsolve_abs\", \"test_raise_exception_nonlinsolve\", \"test_trig_system\", \"test_nonlinsolve_positive_dimensional\", \"test_nonlinsolve_polysys\", \"test_nonlinsolve_using_substitution\", \"test_nonlinsolve_complex\", \"test_issue_5132_1\", \"test_issue_5132_2\", \"test_issue_6752\", \"test_issue_2777\", \"test_issue_8828\", \"test_nonlinsolve_conditionset\", \"test_substitution_basic\", \"test_issue_5132_substitution\", \"test_raises_substitution\", \"test_issue_9556\", \"test_issue_9611\", \"test_issue_9557\", \"test_issue_9778\", \"test_issue_10214\", \"test_issue_9849\", \"test_issue_9953\", \"test_issue_9913\", \"test_issue_10397\", \"test_issue_14987\", \"test_simplification\", \"test_issue_10555\", \"test_issue_8715\", \"test_issue_11174\", \"test_issue_11534\", \"test_issue_10477\", \"test_issue_10671\", \"test_issue_11064\", \"test_issue_12478\", \"test_issue_12429\", \"test_solveset_arg\", \"test__is_finite_with_finite_vars\", \"test_issue_13550\", \"test_issue_13849\", \"test_issue_14223\", \"test_issue_10158\", \"test_issue_14300\", \"test_issue_14454\", \"test_term_factors\", \"test_transolve\", \"test_exponential_real\", \"test_expo_conditionset\", \"test_exponential_symbols\", \"test_is_exponential\", \"test_solve_exponential\", \"test_logarithmic\", \"test_is_logarithmic\", \"test_solve_logarithm\", \"test_linear_coeffs\", \"test_is_modular\", \"test_invert_modular\"]",
    "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-10554",
    "base_commit": "14d026cccb144c6877294ba4cd4e03ebf0842498",
    "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -356,7 +356,12 @@ def get_order_by(self):\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    if col_alias:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Add column used in ORDER BY clause without an alias to\n+                    # the selected columns.\n+                    self.query.add_select_col(src)\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1774,6 +1774,10 @@ def clear_select_fields(self):\n         self.select = ()\n         self.values_select = ()\n \n+    def add_select_col(self, col):\n+        self.select += col,\n+        self.values_select += col.output_field.name,\n+\n     def set_select(self, cols):\n         self.default_cols = False\n         self.select = tuple(cols)\n",
    "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -153,6 +153,29 @@ def test_union_with_values_list_on_annotated_and_unannotated(self):\n         qs2 = Number.objects.filter(num=9)\n         self.assertCountEqual(qs1.union(qs2).values_list('num', flat=True), [1, 9])\n \n+    def test_union_with_values_list_and_order(self):\n+        ReservedName.objects.bulk_create([\n+            ReservedName(name='rn1', order=7),\n+            ReservedName(name='rn2', order=5),\n+            ReservedName(name='rn0', order=6),\n+            ReservedName(name='rn9', order=-1),\n+        ])\n+        qs1 = ReservedName.objects.filter(order__gte=6)\n+        qs2 = ReservedName.objects.filter(order__lte=5)\n+        union_qs = qs1.union(qs2)\n+        for qs, expected_result in (\n+            # Order by a single column.\n+            (union_qs.order_by('-pk').values_list('order', flat=True), [-1, 6, 5, 7]),\n+            (union_qs.order_by('pk').values_list('order', flat=True), [7, 5, 6, -1]),\n+            (union_qs.values_list('order', flat=True).order_by('-pk'), [-1, 6, 5, 7]),\n+            (union_qs.values_list('order', flat=True).order_by('pk'), [7, 5, 6, -1]),\n+            # Order by multiple columns.\n+            (union_qs.order_by('-name', 'pk').values_list('order', flat=True), [-1, 5, 7, 6]),\n+            (union_qs.values_list('order', flat=True).order_by('-name', 'pk'), [-1, 5, 7, 6]),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertEqual(list(qs), expected_result)\n+\n     def test_count_union(self):\n         qs1 = Number.objects.filter(num__lte=1).values('num')\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n",
    "problem_statement": "Unione del queryset con ordinamento si interrompe sull'ordinamento con querysets derivate\nDescrizione\n\n\t\t(ultima modifica di Sergei Maertens)\n\nPotrebbe essere correlato a #29692\nRiproduzione semplice (i modelli esatti non sono rilevanti, penso):\n>>> Dimension.objects.values_list('id', flat=True)\n<QuerySet [10, 11, 12, 13, 14, 15, 16, 17, 18]>\n>>> qs = (\n\tDimension.objects.filter(pk__in=[10, 11])\n\t.union(Dimension.objects.filter(pk__in=[16, 17])\n\t.order_by('order')\n)\n>>> qs\n<QuerySet [<Dimension: boeksoort>, <Dimension: grootboek>, <Dimension: kenteken>, <Dimension: activa>]>\n# questo causa la rivalutazione del queryset originale e lo interrompe\n>>> qs.order_by().values_list('pk', flat=True)\n<QuerySet [16, 11, 10, 17]>\n>>> qs\n[interrompe]\nTraceback:\nTraceback (chiamata più recente per ultima):\n File \"<input>\", line 1, in <module>\n\tqs\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/models/query.py\", line 248, in __repr__\n\tdata = list(self[:REPR_OUTPUT_SIZE + 1])\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/models/query.py\", line 272, in __iter__\n\tself._fetch_all()\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/models/query.py\", line 1179, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/models/query.py\", line 53, in __iter__\n\tresults = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1068, in execute_sql\n\tcursor.execute(sql, params)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/backends/utils.py\", line 100, in execute\n\treturn super().execute(sql, params)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/backends/utils.py\", line 68, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/utils.py\", line 89, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/home/bbt/.virtualenvs/ispnext/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\n\treturn self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: ORDER BY position 4 is not in select list\nLINE 1: ...dimensions_dimension\".\"id\" IN (16, 17)) ORDER BY (4) ASC LIM...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nValutare il queryset invece di creare un nuovo queryset fa procedere il codice come previsto.\n[dim.id for dim in qs]",
    "hints_text": "Sembra un bug causato da una modifica dell'attributo `.query` senza aver eseguito un `copy()` preventivo della query/queryset.\nAllegato un test di regressione che fallisce su master (testato su f3d3338e06d571a529bb2046428eeac8e56bcbf6).\n​PR\nI test non stanno passando.\nSono necessari più test, quantomeno. Ma la discussione nella PR suggerisce che non abbiamo ancora trovato la strategia giusta.",
    "created_at": "2018-10-24T14:24:45Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
    "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-13852",
    "base_commit": "c935e1d106743efd5bf0705fbeedbd18fadff4dc",
    "patch": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -1,12 +1,12 @@\n \"\"\" Riemann zeta and related function. \"\"\"\n from __future__ import print_function, division\n \n-from sympy.core import Function, S, sympify, pi\n+from sympy.core import Function, S, sympify, pi, I\n from sympy.core.function import ArgumentIndexError\n from sympy.core.compatibility import range\n from sympy.functions.combinatorial.numbers import bernoulli, factorial, harmonic\n from sympy.functions.elementary.exponential import log\n-\n+from sympy.functions.elementary.miscellaneous import sqrt\n \n ###############################################################################\n ###################### LERCH TRANSCENDENT #####################################\n@@ -253,7 +253,7 @@ class polylog(Function):\n     >>> from sympy import expand_func\n     >>> from sympy.abc import z\n     >>> expand_func(polylog(1, z))\n-    -log(z*exp_polar(-I*pi) + 1)\n+    -log(-z + 1)\n     >>> expand_func(polylog(0, z))\n     z/(-z + 1)\n \n@@ -276,7 +276,27 @@ def eval(cls, s, z):\n         elif z == -1:\n             return -dirichlet_eta(s)\n         elif z == 0:\n-            return 0\n+            return S.Zero\n+        elif s == 2:\n+            if z == S.Half:\n+                return pi**2/12 - log(2)**2/2\n+            elif z == 2:\n+                return pi**2/4 - I*pi*log(2)\n+            elif z == -(sqrt(5) - 1)/2:\n+                return -pi**2/15 + log((sqrt(5)-1)/2)**2/2\n+            elif z == -(sqrt(5) + 1)/2:\n+                return -pi**2/10 - log((sqrt(5)+1)/2)**2\n+            elif z == (3 - sqrt(5))/2:\n+                return pi**2/15 - log((sqrt(5)-1)/2)**2\n+            elif z == (sqrt(5) - 1)/2:\n+                return pi**2/10 - log((sqrt(5)-1)/2)**2\n+        # For s = 0 or -1 use explicit formulas to evaluate, but\n+        # automatically expanding polylog(1, z) to -log(1-z) seems undesirable\n+        # for summation methods based on hypergeometric functions\n+        elif s == 0:\n+            return z/(1 - z)\n+        elif s == -1:\n+            return z/(1 - z)**2\n \n     def fdiff(self, argindex=1):\n         s, z = self.args\n@@ -291,7 +311,7 @@ def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
    "test_patch": "diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py\n--- a/sympy/functions/special/tests/test_zeta_functions.py\n+++ b/sympy/functions/special/tests/test_zeta_functions.py\n@@ -1,6 +1,6 @@\n from sympy import (Symbol, zeta, nan, Rational, Float, pi, dirichlet_eta, log,\n                    zoo, expand_func, polylog, lerchphi, S, exp, sqrt, I,\n-                   exp_polar, polar_lift, O, stieltjes)\n+                   exp_polar, polar_lift, O, stieltjes, Abs)\n from sympy.utilities.randtest import (test_derivative_numerically as td,\n                       random_complex_number as randcplx, verify_numerically as tn)\n \n@@ -128,12 +128,25 @@ def test_polylog_expansion():\n     assert polylog(s, 1) == zeta(s)\n     assert polylog(s, -1) == -dirichlet_eta(s)\n \n-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))\n+    assert myexpand(polylog(1, z), -log(1 - z))\n     assert myexpand(polylog(0, z), z/(1 - z))\n-    assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))\n+    assert myexpand(polylog(-1, z), z/(1 - z)**2)\n+    assert ((1-z)**3 * expand_func(polylog(-2, z))).simplify() == z*(1 + z)\n     assert myexpand(polylog(-5, z), None)\n \n \n+def test_polylog_values():\n+    import random\n+    assert polylog(2, 2) == pi**2/4 - I*pi*log(2)\n+    assert polylog(2, S.Half) == pi**2/12 - log(2)**2/2\n+    for z in [S.Half, 2, (sqrt(5)-1)/2, -(sqrt(5)-1)/2, -(sqrt(5)+1)/2, (3-sqrt(5))/2]:\n+        assert Abs(polylog(2, z).evalf() - polylog(2, z, evaluate=False).evalf()) < 1e-15\n+    for s in [-1, 0, 1]:\n+        for _ in range(10):\n+            z = random.uniform(-5, 5) + I*random.uniform(-5, 5)\n+            assert Abs(polylog(s, z).evalf() - polylog(s, z, evaluate=False).evalf()) < 1e-15\n+\n+\n def test_lerchphi_expansion():\n     assert myexpand(lerchphi(1, s, a), zeta(s, a))\n     assert myexpand(lerchphi(z, s, 1), polylog(s, z)/z)\n",
    "problem_statement": "Aggiungi la valutazione per polylog\n```\nIn [1]: polylog(2, Rational(1,2))\nOut[1]: polylog(2, 1/2)\n\nIn [2]: polylog(2, Rational(1,2)).expand(func=True)\nOut[2]: polylog(2, 1/2)\n\nLa risposta dovrebbe essere -log(2)**2/2 + pi**2/12\n\nIn [11]: print(nsimplify(expand_func(polylog(2, Rational(1,2))).evalf(), [pi**2, log(2)**2]))\n-log(2)**2/2 + pi**2/12\n```\n\nIssue originale per #7132: http://code.google.com/p/sympy/issues/detail?id=4033\nAutore originale: https://code.google.com/u/asmeurer@gmail.com/\n\nPerché l'espansione di polylog(1, z) contiene exp_polar(-I*pi)?\nNon vedo una ragione per exp_polar qui: \n```\n>>> expand_func(polylog(1, z))\n-log(z*exp_polar(-I*pi) + 1)\n```\nA mia conoscenza, `polylog(1, z)` e `-log(1-z)` sono esattamente la stessa funzione a tutti gli effetti. Concordano per |z|<1 per la loro definizione in serie di potenze. Entrambe sono ramificate in 1 allo stesso modo. La valutazione di mpmath implementa i loro tagli di ramo in modo coerente: quando z è reale e maggiore di 1, la parte immaginaria di entrambe le funzioni è -pi. Ho testato la valutazione in migliaia di punti casuali, reali e complessi: entrambe restituiscono gli stessi valori.\n\nSymPy concorda anche che hanno la stessa derivata, che è z/(1-z):  \n```\nexpand_func(diff(polylog(1, z) + log(1 - z), z))    # 0 \n```\nMa con l'implementazione corrente di `expand_func(polylog(1, z))`, sembrerebbe che expand_func cambi la derivata della funzione: \n``` \nexpand_func(diff(polylog(1, z) - expand_func(polylog(1, z)), z))\n```\nrestituisce `exp_polar(-I*pi)/(z*exp_polar(-I*pi) + 1) + 1/(-z + 1)` che non si semplifica a 0. \n\nIn generale, penso che avere exp_polar in espressioni come `-log(1 + 3*exp_polar(-I*pi))` non sia significativo. Le informazioni aggiuntive contenute in \"polar\" sono il numero di avvolgimenti di un percorso intorno a 0. Qui, a causa di + 1, questo finisce per essere il numero di avvolgimenti intorno a 1, che è irrilevante perché log non è ramificato in 1.",
    "hints_text": "**Cc:** raou...@gmail.com  \n\nCommento originale: http://code.google.com/p/sympy/issues/detail?id=4033#c1\nAutore originale: https://code.google.com/u/asmeurer@gmail.com/",
    "created_at": "2018-01-06T23:54:51Z",
    "version": "1.1",
    "FAIL_TO_PASS": "[\"test_polylog_values\"]",
    "PASS_TO_PASS": "[\"test_zeta_eval\", \"test_dirichlet_eta_eval\", \"test_stieltjes\", \"test_stieltjes_evalf\"]",
    "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-16560",
    "base_commit": "51c9bb7cd16081133af4f0ab6d06572660309730",
    "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -32,6 +32,7 @@ def __init__(\n         condition=None,\n         deferrable=None,\n         include=None,\n+        violation_error_code=None,\n         violation_error_message=None,\n     ):\n         if index_type and index_type.lower() not in {\"gist\", \"spgist\"}:\n@@ -60,7 +61,11 @@ def __init__(\n         self.condition = condition\n         self.deferrable = deferrable\n         self.include = tuple(include) if include else ()\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(\n+            name=name,\n+            violation_error_code=violation_error_code,\n+            violation_error_message=violation_error_message,\n+        )\n \n     def _get_expressions(self, schema_editor, query):\n         expressions = []\n@@ -149,12 +154,13 @@ def __eq__(self, other):\n                 and self.condition == other.condition\n                 and self.deferrable == other.deferrable\n                 and self.include == other.include\n+                and self.violation_error_code == other.violation_error_code\n                 and self.violation_error_message == other.violation_error_message\n             )\n         return super().__eq__(other)\n \n     def __repr__(self):\n-        return \"<%s: index_type=%s expressions=%s name=%s%s%s%s%s>\" % (\n+        return \"<%s: index_type=%s expressions=%s name=%s%s%s%s%s%s>\" % (\n             self.__class__.__qualname__,\n             repr(self.index_type),\n             repr(self.expressions),\n@@ -162,6 +168,11 @@ def __repr__(self):\n             \"\" if self.condition is None else \" condition=%s\" % self.condition,\n             \"\" if self.deferrable is None else \" deferrable=%r\" % self.deferrable,\n             \"\" if not self.include else \" include=%s\" % repr(self.include),\n+            (\n+                \"\"\n+                if self.violation_error_code is None\n+                else \" violation_error_code=%r\" % self.violation_error_code\n+            ),\n             (\n                 \"\"\n                 if self.violation_error_message is None\n@@ -204,9 +215,13 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n             queryset = queryset.exclude(pk=model_class_pk)\n         if not self.condition:\n             if queryset.exists():\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(\n+                    self.get_violation_error_message(), code=self.violation_error_code\n+                )\n         else:\n             if (self.condition & Exists(queryset.filter(self.condition))).check(\n                 replacement_map, using=using\n             ):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(\n+                    self.get_violation_error_message(), code=self.violation_error_code\n+                )\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -18,11 +18,16 @@\n \n class BaseConstraint:\n     default_violation_error_message = _(\"Constraint “%(name)s” is violated.\")\n+    violation_error_code = None\n     violation_error_message = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(\n+    #     self, *, name, violation_error_code=None, violation_error_message=None\n+    # ):\n+    def __init__(\n+        self, *args, name=None, violation_error_code=None, violation_error_message=None\n+    ):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -30,6 +35,8 @@ def __init__(self, *args, name=None, violation_error_message=None):\n                 f\"argument: 'name'\"\n             )\n         self.name = name\n+        if violation_error_code is not None:\n+            self.violation_error_code = violation_error_code\n         if violation_error_message is not None:\n             self.violation_error_message = violation_error_message\n         else:\n@@ -74,6 +81,8 @@ def deconstruct(self):\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if self.violation_error_code is not None:\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n@@ -82,13 +91,19 @@ def clone(self):\n \n \n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(\n+        self, *, check, name, violation_error_code=None, violation_error_message=None\n+    ):\n         self.check = check\n         if not getattr(check, \"conditional\", False):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(\n+            name=name,\n+            violation_error_code=violation_error_code,\n+            violation_error_message=violation_error_message,\n+        )\n \n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n@@ -112,15 +127,22 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(\n+                    self.get_violation_error_message(), code=self.violation_error_code\n+                )\n         except FieldError:\n             pass\n \n     def __repr__(self):\n-        return \"<%s: check=%s name=%s%s>\" % (\n+        return \"<%s: check=%s name=%s%s%s>\" % (\n             self.__class__.__qualname__,\n             self.check,\n             repr(self.name),\n+            (\n+                \"\"\n+                if self.violation_error_code is None\n+                else \" violation_error_code=%r\" % self.violation_error_code\n+            ),\n             (\n                 \"\"\n                 if self.violation_error_message is None\n@@ -134,6 +156,7 @@ def __eq__(self, other):\n             return (\n                 self.name == other.name\n                 and self.check == other.check\n+                and self.violation_error_code == other.violation_error_code\n                 and self.violation_error_message == other.violation_error_message\n             )\n         return super().__eq__(other)\n@@ -163,6 +186,7 @@ def __init__(\n         deferrable=None,\n         include=None,\n         opclasses=(),\n+        violation_error_code=None,\n         violation_error_message=None,\n     ):\n         if not name:\n@@ -213,7 +237,11 @@ def __init__(\n             F(expression) if isinstance(expression, str) else expression\n             for expression in expressions\n         )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(\n+            name=name,\n+            violation_error_code=violation_error_code,\n+            violation_error_message=violation_error_message,\n+        )\n \n     @property\n     def contains_expressions(self):\n@@ -293,7 +321,7 @@ def remove_sql(self, model, schema_editor):\n         )\n \n     def __repr__(self):\n-        return \"<%s:%s%s%s%s%s%s%s%s>\" % (\n+        return \"<%s:%s%s%s%s%s%s%s%s%s>\" % (\n             self.__class__.__qualname__,\n             \"\" if not self.fields else \" fields=%s\" % repr(self.fields),\n             \"\" if not self.expressions else \" expressions=%s\" % repr(self.expressions),\n@@ -302,6 +330,11 @@ def __repr__(self):\n             \"\" if self.deferrable is None else \" deferrable=%r\" % self.deferrable,\n             \"\" if not self.include else \" include=%s\" % repr(self.include),\n             \"\" if not self.opclasses else \" opclasses=%s\" % repr(self.opclasses),\n+            (\n+                \"\"\n+                if self.violation_error_code is None\n+                else \" violation_error_code=%r\" % self.violation_error_code\n+            ),\n             (\n                 \"\"\n                 if self.violation_error_message is None\n@@ -320,6 +353,7 @@ def __eq__(self, other):\n                 and self.include == other.include\n                 and self.opclasses == other.opclasses\n                 and self.expressions == other.expressions\n+                and self.violation_error_code == other.violation_error_code\n                 and self.violation_error_message == other.violation_error_message\n             )\n         return super().__eq__(other)\n@@ -385,14 +419,17 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.violation_error_code,\n+                    )\n                 # When fields are defined, use the unique_error_message() for\n                 # backward compatibility.\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n                             raise ValidationError(\n-                                instance.unique_error_message(model, self.fields)\n+                                instance.unique_error_message(model, self.fields),\n                             )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n@@ -400,6 +437,9 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.violation_error_code,\n+                    )\n             except FieldError:\n                 pass\n",
    "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -77,17 +77,26 @@ def test_custom_violation_error_message_clone(self):\n             \"custom base_name message\",\n         )\n \n+    def test_custom_violation_code_message(self):\n+        c = BaseConstraint(name=\"base_name\", violation_error_code=\"custom_code\")\n+        self.assertEqual(c.violation_error_code, \"custom_code\")\n+\n     def test_deconstruction(self):\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n+            violation_error_code=\"custom_code\",\n         )\n         path, args, kwargs = constraint.deconstruct()\n         self.assertEqual(path, \"django.db.models.BaseConstraint\")\n         self.assertEqual(args, ())\n         self.assertEqual(\n             kwargs,\n-            {\"name\": \"base_name\", \"violation_error_message\": \"custom %(name)s message\"},\n+            {\n+                \"name\": \"base_name\",\n+                \"violation_error_message\": \"custom %(name)s message\",\n+                \"violation_error_code\": \"custom_code\",\n+            },\n         )\n \n     def test_deprecation(self):\n@@ -148,6 +157,20 @@ def test_eq(self):\n                 check=check1, name=\"price\", violation_error_message=\"custom error\"\n             ),\n         )\n+        self.assertNotEqual(\n+            models.CheckConstraint(check=check1, name=\"price\"),\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_code=\"custom_code\"\n+            ),\n+        )\n+        self.assertEqual(\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_code=\"custom_code\"\n+            ),\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_code=\"custom_code\"\n+            ),\n+        )\n \n     def test_repr(self):\n         constraint = models.CheckConstraint(\n@@ -172,6 +195,18 @@ def test_repr_with_violation_error_message(self):\n             \"violation_error_message='More than 1'>\",\n         )\n \n+    def test_repr_with_violation_error_code(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(price__lt=1),\n+            name=\"price_lt_one\",\n+            violation_error_code=\"more_than_one\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<CheckConstraint: check=(AND: ('price__lt', 1)) name='price_lt_one' \"\n+            \"violation_error_code='more_than_one'>\",\n+        )\n+\n     def test_invalid_check_types(self):\n         msg = \"CheckConstraint.check must be a Q instance or boolean expression.\"\n         with self.assertRaisesMessage(TypeError, msg):\n@@ -237,6 +272,21 @@ def test_validate(self):\n         # Valid product.\n         constraint.validate(Product, Product(price=10, discounted_price=5))\n \n+    def test_validate_custom_error(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"discount is fake\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"discount is fake\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n     def test_validate_boolean_expressions(self):\n         constraint = models.CheckConstraint(\n             check=models.expressions.ExpressionWrapper(\n@@ -341,6 +391,30 @@ def test_eq(self):\n                 violation_error_message=\"custom error\",\n             ),\n         )\n+        self.assertNotEqual(\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_code=\"custom_error\",\n+            ),\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_code=\"other_custom_error\",\n+            ),\n+        )\n+        self.assertEqual(\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_code=\"custom_error\",\n+            ),\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_code=\"custom_error\",\n+            ),\n+        )\n \n     def test_eq_with_condition(self):\n         self.assertEqual(\n@@ -512,6 +586,20 @@ def test_repr_with_violation_error_message(self):\n             ),\n         )\n \n+    def test_repr_with_violation_error_code(self):\n+        constraint = models.UniqueConstraint(\n+            models.F(\"baz__lower\"),\n+            name=\"unique_lower_baz\",\n+            violation_error_code=\"baz\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            (\n+                \"<UniqueConstraint: expressions=(F(baz__lower),) \"\n+                \"name='unique_lower_baz' violation_error_code='baz'>\"\n+            ),\n+        )\n+\n     def test_deconstruction(self):\n         fields = [\"foo\", \"bar\"]\n         name = \"unique_fields\"\n@@ -656,12 +744,16 @@ class Meta:\n \n     def test_validate(self):\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n+        # Custom message and error code are ignored.\n+        constraint.violation_error_message = \"Custom message\"\n+        constraint.violation_error_code = \"custom_code\"\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n             name=self.p1.name, color=self.p1.color\n         )\n-        with self.assertRaisesMessage(ValidationError, msg):\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n             constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_together\")\n         # Null values are ignored.\n         constraint.validate(\n             UniqueConstraintProduct,\n@@ -716,6 +808,20 @@ def test_validate_condition(self):\n             exclude={\"name\"},\n         )\n \n+    @skipUnlessDBFeature(\"supports_partial_indexes\")\n+    def test_validate_conditon_custom_error(self):\n+        p1 = UniqueConstraintConditionProduct.objects.create(name=\"p1\")\n+        constraint = UniqueConstraintConditionProduct._meta.constraints[0]\n+        constraint.violation_error_message = \"Custom message\"\n+        constraint.violation_error_code = \"custom_code\"\n+        msg = \"Custom message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(\n+                UniqueConstraintConditionProduct,\n+                UniqueConstraintConditionProduct(name=p1.name, color=None),\n+            )\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n     def test_validate_expression(self):\n         constraint = models.UniqueConstraint(Lower(\"name\"), name=\"name_lower_uniq\")\n         msg = \"Constraint “name_lower_uniq” is violated.\"\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -397,6 +397,17 @@ def test_repr(self):\n             \"(F(datespan), '-|-')] name='exclude_overlapping' \"\n             \"violation_error_message='Overlapping must be excluded'>\",\n         )\n+        constraint = ExclusionConstraint(\n+            name=\"exclude_overlapping\",\n+            expressions=[(F(\"datespan\"), RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"overlapping_must_be_excluded\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<ExclusionConstraint: index_type='GIST' expressions=[\"\n+            \"(F(datespan), '-|-')] name='exclude_overlapping' \"\n+            \"violation_error_code='overlapping_must_be_excluded'>\",\n+        )\n \n     def test_eq(self):\n         constraint_1 = ExclusionConstraint(\n@@ -470,6 +481,16 @@ def test_eq(self):\n             condition=Q(cancelled=False),\n             violation_error_message=\"other custom error\",\n         )\n+        constraint_12 = ExclusionConstraint(\n+            name=\"exclude_overlapping\",\n+            expressions=[\n+                (F(\"datespan\"), RangeOperators.OVERLAPS),\n+                (F(\"room\"), RangeOperators.EQUAL),\n+            ],\n+            condition=Q(cancelled=False),\n+            violation_error_code=\"custom_code\",\n+            violation_error_message=\"other custom error\",\n+        )\n         self.assertEqual(constraint_1, constraint_1)\n         self.assertEqual(constraint_1, mock.ANY)\n         self.assertNotEqual(constraint_1, constraint_2)\n@@ -483,7 +504,9 @@ def test_eq(self):\n         self.assertNotEqual(constraint_5, constraint_6)\n         self.assertNotEqual(constraint_1, object())\n         self.assertNotEqual(constraint_10, constraint_11)\n+        self.assertNotEqual(constraint_11, constraint_12)\n         self.assertEqual(constraint_10, constraint_10)\n+        self.assertEqual(constraint_12, constraint_12)\n \n     def test_deconstruct(self):\n         constraint = ExclusionConstraint(\n@@ -760,17 +783,32 @@ def test_validate_range_adjacent(self):\n         constraint = ExclusionConstraint(\n             name=\"ints_adjacent\",\n             expressions=[(\"ints\", RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"custom_code\",\n             violation_error_message=\"Custom error message.\",\n         )\n         range_obj = RangesModel.objects.create(ints=(20, 50))\n         constraint.validate(RangesModel, range_obj)\n         msg = \"Custom error message.\"\n-        with self.assertRaisesMessage(ValidationError, msg):\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n             constraint.validate(RangesModel, RangesModel(ints=(10, 20)))\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         constraint.validate(RangesModel, RangesModel(ints=(10, 19)))\n         constraint.validate(RangesModel, RangesModel(ints=(51, 60)))\n         constraint.validate(RangesModel, RangesModel(ints=(10, 20)), exclude={\"ints\"})\n \n+    def test_validate_with_custom_code_and_condition(self):\n+        constraint = ExclusionConstraint(\n+            name=\"ints_adjacent\",\n+            expressions=[(\"ints\", RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"custom_code\",\n+            condition=Q(ints__lt=(100, 200)),\n+        )\n+        range_obj = RangesModel.objects.create(ints=(20, 50))\n+        constraint.validate(RangesModel, range_obj)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, RangesModel(ints=(10, 20)))\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n     def test_expressions_with_params(self):\n         constraint_name = \"scene_left_equal\"\n         self.assertNotIn(constraint_name, self.get_constraints(Scene._meta.db_table))\n",
    "problem_statement": "Consentire la personalizzazione dell'attributo code di ValidationError sollevato da BaseConstraint.validate\nDescrizione\n\nAttualmente è possibile personalizzare il violation_error_message di un ValidationError sollevato da un vincolo, ma non il codice.\nVorrei aggiungere un nuovo parametro per personalizzare l'attributo code a BaseConstraint per consentire di aggiungerne facilmente uno.\nAttualmente, per ottenere lo stesso risultato, è necessario creare una sottoclasse del vincolo per modificare validate in modo da catturare e rilanciare il ValidationError.\nPoiché la documentazione consiglia di \"Fornire un codice di errore descrittivo al costruttore\" quando si solleva un ValidationError in ​https://docs.djangoproject.com/en/4.1/ref/forms/validation/#raising-validationerror, penso che avrebbe senso fornire questa possibilità per gli errori sollevati dai vincoli.\nSe pensate che sia una buona idea, sarei felice di lavorare su una PR.",
    "hints_text": "Risposta a xafer: Attualmente è possibile personalizzare il `violation_error_message` di un `ValidationError` sollevato da un vincolo, ma non il codice. Vorrei aggiungere un nuovo parametro `violation_error_message` a `BaseConstraint` per consentire di aggiungerne uno facilmente. Concordo, aggiungere `violation_error_code` sembra una buona idea, poiché abbiamo un meccanismo simile per i validatori.",
    "created_at": "2023-02-16T10:45:56Z",
    "version": "5.0",
    "FAIL_TO_PASS": "[\"test_custom_violation_code_message (constraints.tests.BaseConstraintTests.test_custom_violation_code_message)\", \"test_deconstruction (constraints.tests.BaseConstraintTests.test_deconstruction)\", \"test_eq (constraints.tests.CheckConstraintTests.test_eq)\", \"test_repr_with_violation_error_code (constraints.tests.CheckConstraintTests.test_repr_with_violation_error_code)\", \"test_validate_custom_error (constraints.tests.CheckConstraintTests.test_validate_custom_error)\", \"test_eq (constraints.tests.UniqueConstraintTests.test_eq)\", \"test_repr_with_violation_error_code (constraints.tests.UniqueConstraintTests.test_repr_with_violation_error_code)\", \"test_validate_conditon_custom_error (constraints.tests.UniqueConstraintTests.test_validate_conditon_custom_error)\"]",
    "PASS_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests.test_constraint_sql)\", \"test_contains_expressions (constraints.tests.BaseConstraintTests.test_contains_expressions)\", \"test_create_sql (constraints.tests.BaseConstraintTests.test_create_sql)\", \"test_custom_violation_error_message (constraints.tests.BaseConstraintTests.test_custom_violation_error_message)\", \"test_custom_violation_error_message_clone (constraints.tests.BaseConstraintTests.test_custom_violation_error_message_clone)\", \"test_default_violation_error_message (constraints.tests.BaseConstraintTests.test_default_violation_error_message)\", \"test_deprecation (constraints.tests.BaseConstraintTests.test_deprecation)\", \"test_name_required (constraints.tests.BaseConstraintTests.test_name_required)\", \"test_positional_arguments (constraints.tests.BaseConstraintTests.test_positional_arguments)\", \"test_remove_sql (constraints.tests.BaseConstraintTests.test_remove_sql)\", \"test_validate (constraints.tests.BaseConstraintTests.test_validate)\", \"test_abstract_name (constraints.tests.CheckConstraintTests.test_abstract_name)\", \"test_database_constraint (constraints.tests.CheckConstraintTests.test_database_constraint)\", \"test_database_constraint_unicode (constraints.tests.CheckConstraintTests.test_database_constraint_unicode)\", \"test_deconstruction (constraints.tests.CheckConstraintTests.test_deconstruction)\", \"test_invalid_check_types (constraints.tests.CheckConstraintTests.test_invalid_check_types)\", \"test_name (constraints.tests.CheckConstraintTests.test_name)\", \"test_repr (constraints.tests.CheckConstraintTests.test_repr)\", \"test_repr_with_violation_error_message (constraints.tests.CheckConstraintTests.test_repr_with_violation_error_message)\", \"test_validate (constraints.tests.CheckConstraintTests.test_validate)\", \"test_validate_boolean_expressions (constraints.tests.CheckConstraintTests.test_validate_boolean_expressions)\", \"test_validate_nullable_field_with_none (constraints.tests.CheckConstraintTests.test_validate_nullable_field_with_none)\", \"test_validate_rawsql_expressions_noop (constraints.tests.CheckConstraintTests.test_validate_rawsql_expressions_noop)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests.test_condition_must_be_q)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests.test_database_constraint)\", \"test_database_constraint_with_condition (constraints.tests.UniqueConstraintTests.test_database_constraint_with_condition)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests.test_deconstruction)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests.test_deconstruction_with_condition)\", \"test_deconstruction_with_deferrable (constraints.tests.UniqueConstraintTests.test_deconstruction_with_deferrable)\", \"test_deconstruction_with_expressions (constraints.tests.UniqueConstraintTests.test_deconstruction_with_expressions)\", \"test_deconstruction_with_include (constraints.tests.UniqueConstraintTests.test_deconstruction_with_include)\", \"test_deconstruction_with_opclasses (constraints.tests.UniqueConstraintTests.test_deconstruction_with_opclasses)\", \"test_deferrable_with_condition (constraints.tests.UniqueConstraintTests.test_deferrable_with_condition)\", \"test_deferrable_with_expressions (constraints.tests.UniqueConstraintTests.test_deferrable_with_expressions)\", \"test_deferrable_with_include (constraints.tests.UniqueConstraintTests.test_deferrable_with_include)\", \"test_deferrable_with_opclasses (constraints.tests.UniqueConstraintTests.test_deferrable_with_opclasses)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests.test_eq_with_condition)\", \"test_eq_with_deferrable (constraints.tests.UniqueConstraintTests.test_eq_with_deferrable)\", \"test_eq_with_expressions (constraints.tests.UniqueConstraintTests.test_eq_with_expressions)\", \"test_eq_with_include (constraints.tests.UniqueConstraintTests.test_eq_with_include)\", \"test_eq_with_opclasses (constraints.tests.UniqueConstraintTests.test_eq_with_opclasses)\", \"test_expressions_and_fields_mutually_exclusive (constraints.tests.UniqueConstraintTests.test_expressions_and_fields_mutually_exclusive)\", \"test_expressions_with_opclasses (constraints.tests.UniqueConstraintTests.test_expressions_with_opclasses)\", \"test_invalid_defer_argument (constraints.tests.UniqueConstraintTests.test_invalid_defer_argument)\", \"test_invalid_include_argument (constraints.tests.UniqueConstraintTests.test_invalid_include_argument)\", \"test_invalid_opclasses_argument (constraints.tests.UniqueConstraintTests.test_invalid_opclasses_argument)\", \"test_model_validation (constraints.tests.UniqueConstraintTests.test_model_validation)\", \"test_model_validation_constraint_no_code_error (constraints.tests.UniqueConstraintTests.test_model_validation_constraint_no_code_error)\", \"Partial unique constraints are not ignored by\", \"test_name (constraints.tests.UniqueConstraintTests.test_name)\", \"test_opclasses_and_fields_same_length (constraints.tests.UniqueConstraintTests.test_opclasses_and_fields_same_length)\", \"test_repr (constraints.tests.UniqueConstraintTests.test_repr)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests.test_repr_with_condition)\", \"test_repr_with_deferrable (constraints.tests.UniqueConstraintTests.test_repr_with_deferrable)\", \"test_repr_with_expressions (constraints.tests.UniqueConstraintTests.test_repr_with_expressions)\", \"test_repr_with_include (constraints.tests.UniqueConstraintTests.test_repr_with_include)\", \"test_repr_with_opclasses (constraints.tests.UniqueConstraintTests.test_repr_with_opclasses)\", \"test_repr_with_violation_error_message (constraints.tests.UniqueConstraintTests.test_repr_with_violation_error_message)\", \"test_requires_field_or_expression (constraints.tests.UniqueConstraintTests.test_requires_field_or_expression)\", \"test_requires_name (constraints.tests.UniqueConstraintTests.test_requires_name)\", \"test_validate (constraints.tests.UniqueConstraintTests.test_validate)\", \"test_validate_condition (constraints.tests.UniqueConstraintTests.test_validate_condition)\", \"test_validate_expression (constraints.tests.UniqueConstraintTests.test_validate_expression)\", \"test_validate_expression_condition (constraints.tests.UniqueConstraintTests.test_validate_expression_condition)\", \"test_validate_expression_str (constraints.tests.UniqueConstraintTests.test_validate_expression_str)\", \"test_validate_ordered_expression (constraints.tests.UniqueConstraintTests.test_validate_ordered_expression)\"]",
    "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
    "difficulty": "1-4 hours"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11734",
    "base_commit": "999891bd80b3d02dd916731a7a239e1036174885",
    "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2332,10 +2332,6 @@ def get_db_prep_value(self, value, connection, prepared=False):\n             value = connection.ops.validate_autopk_value(value)\n         return value\n \n-    def get_prep_value(self, value):\n-        from django.db.models.expressions import OuterRef\n-        return value if isinstance(value, OuterRef) else super().get_prep_value(value)\n-\n     def contribute_to_class(self, cls, name, **kwargs):\n         assert not cls._meta.auto_field, (\n             \"Model %s can't have more than one auto-generated field.\"\ndiff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -101,7 +101,7 @@ def as_sql(self, compiler, connection):\n \n class RelatedLookupMixin:\n     def get_prep_lookup(self):\n-        if not isinstance(self.lhs, MultiColSource) and self.rhs_is_direct_value():\n+        if not isinstance(self.lhs, MultiColSource) and not hasattr(self.rhs, 'resolve_expression'):\n             # If we get here, we are dealing with single-column relations.\n             self.rhs = get_normalized_value(self.rhs, self.lhs)[0]\n             # We need to run the related field's get_prep_value(). Consider case\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1702,7 +1702,9 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n         handle.\n         \"\"\"\n         filter_lhs, filter_rhs = filter_expr\n-        if isinstance(filter_rhs, F):\n+        if isinstance(filter_rhs, OuterRef):\n+            filter_expr = (filter_lhs, OuterRef(filter_rhs))\n+        elif isinstance(filter_rhs, F):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n",
    "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -6,7 +6,7 @@\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DEFAULT_DB_ALIAS, connection\n-from django.db.models import Count, F, Q\n+from django.db.models import Count, Exists, F, OuterRef, Q\n from django.db.models.sql.constants import LOUTER\n from django.db.models.sql.where import NothingNode, WhereNode\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -2754,10 +2754,10 @@ def setUpTestData(cls):\n         Food.objects.create(name='oranges')\n         Eaten.objects.create(food=f1, meal='dinner')\n         j1 = Job.objects.create(name='Manager')\n-        r1 = Responsibility.objects.create(description='Playing golf')\n+        cls.r1 = Responsibility.objects.create(description='Playing golf')\n         j2 = Job.objects.create(name='Programmer')\n         r2 = Responsibility.objects.create(description='Programming')\n-        JobResponsibilities.objects.create(job=j1, responsibility=r1)\n+        JobResponsibilities.objects.create(job=j1, responsibility=cls.r1)\n         JobResponsibilities.objects.create(job=j2, responsibility=r2)\n \n     def test_to_field(self):\n@@ -2810,6 +2810,14 @@ def test_exclude_reverse_fk_field_ref(self):\n     def test_exclude_with_circular_fk_relation(self):\n         self.assertEqual(ObjectB.objects.exclude(objecta__objectb__name=F('name')).count(), 0)\n \n+    def test_subquery_exclude_outerref(self):\n+        qs = JobResponsibilities.objects.filter(\n+            Exists(Responsibility.objects.exclude(jobs=OuterRef('job'))),\n+        )\n+        self.assertTrue(qs.exists())\n+        self.r1.delete()\n+        self.assertFalse(qs.exists())\n+\n \n class ExcludeTest17600(TestCase):\n     \"\"\"\n",
    "problem_statement": "OuterRef in exclude() o ~Q() utilizza il modello sbagliato.\nDescrizione\n\nIl seguente test (aggiunto a tests/queries/test_qs_combinators) fallisce quando si tenta di escludere i risultati utilizzando OuterRef()\n```python\ndef test_exists_exclude(self):\n\t# filter()\n\tqs = Number.objects.annotate(\n\t\tfoo=Exists(\n\t\t\tItem.objects.filter(tags__category_id=OuterRef('pk'))\n\t\t)\n\t).filter(foo=True)\n\tprint(qs) # funziona\n\t# exclude()\n\tqs = Number.objects.annotate(\n\t\tfoo =Exists(\n\t\t\tItem.objects.exclude(tags__category_id=OuterRef('pk'))\n\t\t)\n\t).filter(foo=True)\n\tprint(qs) # si blocca\n\t# filter(~Q())\n\tqs = Number.objects.annotate(\n\t\tfoo =Exists(\n\t\t\tItem.objects.filter(~Q(tags__category_id=OuterRef('pk')))\n\t\t)\n\t).filter(foo=True)\n\tprint(qs) # si blocca\n```\nSi verifica il seguente errore:\nValueError: This queryset contains a reference to an outer query and may only be used in a subquery",
    "hints_text": "Grazie per la segnalazione. L'errore `ValueError` è stato corretto in `35431298226165986ad07e91f9d3aca721ff38ec`. Il test fornito fallisce su `master` con `django.db.utils.ProgrammingError: missing FROM-clause entry for table \"V0\" LINE 1: ...(U1.\"tag_id\" = U2.\"id\") WHERE U2.\"category_id\" = (\"V0\".\"id\")...` Sembra che `OuterRef` si risolva in `\"V0\".\"id\"` invece di `\"queries_number\".\"id\"` \nSELECT ... FROM \"queries_number\" WHERE EXISTS(\n    SELECT ... FROM \"queries_item\" V0 WHERE NOT (V0.\"id\" IN (\n        SELECT U1.\"item_id\" FROM \"queries_item_tags\" U1 \n        INNER JOIN \"queries_tag\" U2 ON (U1.\"tag_id\" = U2.\"id\") \n        WHERE U2.\"category_id\" = \"V0\".\"id\"\n    ))\n\nIl problema può essere riprodotto anche senza l'annotazione \nNumber.objects.filter(Exists(Item.objects.exclude(tags__category_id=OuterRef('pk'))))",
    "created_at": "2019-09-01T18:46:50Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\"]",
    "PASS_TO_PASS": "[\"test_ticket8597 (queries.tests.ComparisonTests)\", \"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"test_no_fields_cloning (queries.tests.CloneTests)\", \"test_no_model_options_cloning (queries.tests.CloneTests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_no_extra_params (queries.tests.DefaultValuesInsertTest)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket8683 (queries.tests.Queries3Tests)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_qs_list (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket_24605 (queries.tests.TestTicket24605)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_correct_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_ticket_20101 (queries.tests.Ticket20101Tests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"test_inverted_q_across_relations (queries.tests.JoinReuseTest)\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"test_related_sliced_subquery (queries.tests.SubqueryTests)\", \"test_slice_subquery_and_query (queries.tests.SubqueryTests)\", \"Delete queries can safely contain sliced subqueries\", \"test_exclude_plain (queries.tests.ExcludeTest17600)\", \"test_exclude_plain_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"test_common_mixed_case_foreign_keys (queries.tests.Queries1Tests)\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_get_clears_ordering (queries.tests.Queries1Tests)\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"test_order_by_join_unref (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"test_ticket17429 (queries.tests.Queries1Tests)\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7098 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9411 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-22914",
    "base_commit": "c4e836cdf73fc6aa7bab6a86719a0f08861ffb1d",
    "patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -18,6 +18,8 @@\n \n _known_functions = {\n     'Abs': 'abs',\n+    'Min': 'min',\n+    'Max': 'max',\n }\n _known_functions_math = {\n     'acos': 'acos',\n",
    "test_patch": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -6,7 +6,7 @@\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -58,6 +58,9 @@ def test_PythonCodePrinter():\n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n \n def test_PythonCodePrinter_standard():\n     prntr = PythonCodePrinter()\n",
    "problem_statement": "PythonCodePrinter non supporta Min e Max\nNon possiamo generare codice Python per le funzioni sympy Min e Max.\n\nAd esempio:\n```\nfrom sympy import symbols, Min, pycode\na, b = symbols(\"a b\")\nc = Min(a,b)\nprint(pycode(c))\n```\nl'output è:\n\n```\n  # Non supportato in Python:\n  # Min\nMin(a, b)\n```\n\nSimile all'issue #16669, dovremmo aggiungere i seguenti metodi a PythonCodePrinter:\n\n```\ndef _print_Min(self, expr):\n    return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n\n\ndef _print_Max(self, expr):\n    return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n\n```",
    "hints_text": "Questo può essere fatto anche semplicemente aggiungendo `min` e `max` a `_known_functions`:\r\n```python\r\n_known_functions = {\r\n    'Abs': 'abs',\r\n    'Min': 'min',\r\n}\r\n```\r\n\r\nportando a\r\n\r\n```python\r\n>>> from sympy import Min\r\n>>> from sympy.abc import x, y\r\n>>> from sympy.printing.pycode import PythonCodePrinter\r\n>>> PythonCodePrinter().doprint(Min(x,y))\r\n'min(x, y)'\r\n```\r\n@ThePauliPrinciple Dovrei aprire una Pull Request con queste modifiche che hai menzionato qui?\r\n\n> @ThePauliPrinciple Dovrei aprire una Pull Request con queste modifiche che hai menzionato qui?\r\n\r\nNon sono sicuro se l'OP (@yonizim ) intendesse creare una PR o solo menzionare il problema, ma se non lo ha fatto, sentiti libero di farlo. \nVai avanti @AdvaitPote . Grazie per la risposta rapida.\nCerto @yonizim @ThePauliPrinciple !",
    "created_at": "2022-01-25T10:37:44Z",
    "version": "1.10",
    "FAIL_TO_PASS": "[\"test_PythonCodePrinter\"]",
    "PASS_TO_PASS": "[\"test_PythonCodePrinter_standard\", \"test_MpmathPrinter\", \"test_NumPyPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_sqrt\", \"test_frac\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\", \"test_NumPyPrinter_print_seq\", \"test_issue_16535_16536\", \"test_Integral\", \"test_fresnel_integrals\", \"test_beta\", \"test_airy\", \"test_airy_prime\"]",
    "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "matplotlib/matplotlib",
    "instance_id": "matplotlib__matplotlib-14623",
    "base_commit": "d65c9ca20ddf81ef91199e6d819f9d3506ef477c",
    "patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3262,8 +3262,11 @@ def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             cbook._warn_external(\n                 f\"Attempting to set identical left == right == {left} results \"\n                 f\"in singular transformations; automatically expanding.\")\n+        swapped = left > right\n         left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n         left, right = self.xaxis.limit_range_for_scale(left, right)\n+        if swapped:\n+            left, right = right, left\n \n         self.viewLim.intervalx = (left, right)\n         if auto is not None:\n@@ -3642,8 +3645,11 @@ def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n+        swapped = bottom > top\n         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n+        if swapped:\n+            bottom, top = top, bottom\n \n         self.viewLim.intervaly = (bottom, top)\n         if auto is not None:\ndiff --git a/lib/matplotlib/ticker.py b/lib/matplotlib/ticker.py\n--- a/lib/matplotlib/ticker.py\n+++ b/lib/matplotlib/ticker.py\n@@ -1521,8 +1521,8 @@ def raise_if_exceeds(self, locs):\n         return locs\n \n     def nonsingular(self, v0, v1):\n-        \"\"\"Modify the endpoints of a range as needed to avoid singularities.\"\"\"\n-        return mtransforms.nonsingular(v0, v1, increasing=False, expander=.05)\n+        \"\"\"Expand a range as needed to avoid singularities.\"\"\"\n+        return mtransforms.nonsingular(v0, v1, expander=.05)\n \n     def view_limits(self, vmin, vmax):\n         \"\"\"\ndiff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -623,8 +623,11 @@ def set_xlim3d(self, left=None, right=None, emit=True, auto=False,\n             cbook._warn_external(\n                 f\"Attempting to set identical left == right == {left} results \"\n                 f\"in singular transformations; automatically expanding.\")\n+        swapped = left > right\n         left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n         left, right = self.xaxis.limit_range_for_scale(left, right)\n+        if swapped:\n+            left, right = right, left\n         self.xy_viewLim.intervalx = (left, right)\n \n         if auto is not None:\n@@ -681,8 +684,11 @@ def set_ylim3d(self, bottom=None, top=None, emit=True, auto=False,\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n+        swapped = bottom > top\n         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n+        if swapped:\n+            bottom, top = top, bottom\n         self.xy_viewLim.intervaly = (bottom, top)\n \n         if auto is not None:\n@@ -739,8 +745,11 @@ def set_zlim3d(self, bottom=None, top=None, emit=True, auto=False,\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n+        swapped = bottom > top\n         bottom, top = self.zaxis.get_major_locator().nonsingular(bottom, top)\n         bottom, top = self.zaxis.limit_range_for_scale(bottom, top)\n+        if swapped:\n+            bottom, top = top, bottom\n         self.zz_viewLim.intervalx = (bottom, top)\n \n         if auto is not None:\n",
    "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -936,7 +936,12 @@ def test_inverted_limits():\n \n     assert ax.get_xlim() == (-5, 4)\n     assert ax.get_ylim() == (5, -3)\n-    plt.close()\n+\n+    # Test inverting nonlinear axes.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n \n \n @image_comparison(baseline_images=['nonfinite_limits'])\n",
    "problem_statement": "Inversione di un asse utilizzando i suoi limiti non funziona per la scala logaritmica\r\n### Segnalazione di un bug\r\n\r\n**Riepilogo del bug**\r\nA partire da matplotlib 3.1.0 non è più possibile invertire un asse logaritmico utilizzando i suoi limiti.\r\n\r\n**Codice per la riproduzione**\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ny = np.linspace(1000e2, 1, 100)\r\nx = np.exp(-np.linspace(0, 1, y.size))\r\n\r\nfor yscale in ('linear', 'log'):\r\n    fig, ax = plt.subplots()\r\n    ax.plot(x, y)\r\n    ax.set_yscale(yscale)\r\n    ax.set_ylim(y.max(), y.min())\r\n```\r\n\r\n**Risultato effettivo**\r\nL'asse y viene invertito solo per la scala ``\"linear\"``.\r\n\r\n![linear](https://user-images.githubusercontent.com/9482218/60081191-99245e80-9731-11e9-9e4a-eadb3ef58666.png)\r\n\r\n![log](https://user-images.githubusercontent.com/9482218/60081203-9e81a900-9731-11e9-8bae-0be1c9762b16.png)\r\n\r\n**Risultato atteso**\r\nMi aspetterei che l'asse y sia invertito sia per la scala ``\"linear\"`` che per la scala ``\"log\"``.\r\n\r\n**Versione di Matplotlib**\r\n  * Sistema operativo: Linux e MacOS\r\n  * Versione di Matplotlib: 3.1.0 \r\n  * Versione di Python: 3.7.3\r\n \r\nPython e matplotlib sono stati installati utilizzando conda.",
    "hints_text": "Ottima osservazione. Questo problema è stato introdotto in https://github.com/matplotlib/matplotlib/pull/13409; nella versione master è stato risolto da https://github.com/matplotlib/matplotlib/pull/13593, che è troppo grande per essere backportato, ma posso estrarre https://github.com/matplotlib/matplotlib/commit/160de568e1f6d3e5e1bd10192f049815bf778dea#diff-cdfe9e4fdad4085b0a74c1dbe0def08dR16, che è sufficiente.",
    "created_at": "2019-06-25T14:01:17Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_inverted_limits\"]",
    "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_params[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_no_None\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_datetime_masked\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\"]",
    "environment_setup_commit": "42259bb9715bbacbbb2abc8005df836f3a7fd080",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-7748",
    "base_commit": "9988d5ce267bf0df4791770b469431b1fb00dcdd",
    "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1036,39 +1036,71 @@ class DocstringSignatureMixin:\n     Mixin for FunctionDocumenter and MethodDocumenter to provide the\n     feature of reading the signature from the docstring.\n     \"\"\"\n+    _new_docstrings = None  # type: List[List[str]]\n+    _signatures = None      # type: List[str]\n \n     def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n+\n+        # candidates of the object name\n+        valid_names = [self.objpath[-1]]  # type: ignore\n+        if isinstance(self, ClassDocumenter):\n+            valid_names.append('__init__')\n+            if hasattr(self.object, '__mro__'):\n+                valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n+        self._signatures = []\n         result = None\n         for i, doclines in enumerate(docstrings):\n-            # no lines in docstring, no match\n-            if not doclines:\n-                continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n+            for j, line in enumerate(doclines):\n+                if not line:\n+                    # no lines in docstring, no match\n+                    break\n+\n+                if line.endswith('\\\\'):\n+                    multiline = True\n+                    line = line.rstrip('\\\\').rstrip()\n+                else:\n+                    multiline = False\n+\n+                # match first line of docstring against signature RE\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+\n+                # the base name must match ours\n+                if base not in valid_names:\n+                    continue\n+\n+                # re-prepare docstring to ignore more leading indentation\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[j + 1:]),\n+                                                            tabsize=tab_width)\n+\n+                if result is None:\n+                    # first signature\n+                    result = args, retann\n+                else:\n+                    # subsequent signatures\n+                    self._signatures.append(\"(%s) -> %s\" % (args, retann))\n+\n+                if multiline:\n+                    # the signature have multiple signatures on docstring\n+                    continue\n+                else:\n+                    # don't look any further\n+                    break\n+\n+            if result:\n+                # finish the loop when signature found\n+                break\n+\n         return result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n@@ -1076,9 +1108,8 @@ def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n-        lines = getattr(self, '_new_docstrings', None)\n-        if lines is not None:\n-            return lines\n+        if self._new_docstrings is not None:\n+            return self._new_docstrings\n         return super().get_doc(None, ignore)  # type: ignore\n \n     def format_signature(self, **kwargs: Any) -> str:\n@@ -1088,7 +1119,11 @@ def format_signature(self, **kwargs: Any) -> str:\n             result = self._find_signature()\n             if result is not None:\n                 self.args, self.retann = result\n-        return super().format_signature(**kwargs)  # type: ignore\n+        sig = super().format_signature(**kwargs)  # type: ignore\n+        if self._signatures:\n+            return \"\\n\".join([sig] + self._signatures)\n+        else:\n+            return sig\n \n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n@@ -1170,6 +1205,7 @@ def format_signature(self, **kwargs: Any) -> str:\n \n                     documenter = FunctionDocumenter(self.directive, '')\n                     documenter.object = func\n+                    documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n \n         return \"\\n\".join(sigs)\n",
    "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/docstring_signature.py b/tests/roots/test-ext-autodoc/target/docstring_signature.py\n--- a/tests/roots/test-ext-autodoc/target/docstring_signature.py\n+++ b/tests/roots/test-ext-autodoc/target/docstring_signature.py\n@@ -17,3 +17,9 @@ def __new__(cls):\n class D:\n     def __init__(self):\n         \"\"\"D(foo, bar, baz)\"\"\"\n+\n+\n+class E:\n+    def __init__(self):\n+        \"\"\"E(foo: int, bar: int, baz: int) -> None \\\\\n+        E(foo: str, bar: str, baz: str) -> None\"\"\"\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -346,6 +346,10 @@ def test_autoclass_content_and_docstring_signature_class(app):\n         '',\n         '.. py:class:: D()',\n         '   :module: target.docstring_signature',\n+        '',\n+        '',\n+        '.. py:class:: E()',\n+        '   :module: target.docstring_signature',\n         ''\n     ]\n \n@@ -375,6 +379,11 @@ def test_autoclass_content_and_docstring_signature_init(app):\n         '',\n         '.. py:class:: D(foo, bar, baz)',\n         '   :module: target.docstring_signature',\n+        '',\n+        '',\n+        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n+        '              E(foo: str, bar: str, baz: str) -> None',\n+        '   :module: target.docstring_signature',\n         ''\n     ]\n \n@@ -409,6 +418,11 @@ def test_autoclass_content_and_docstring_signature_both(app):\n         '.. py:class:: D(foo, bar, baz)',\n         '   :module: target.docstring_signature',\n         '',\n+        '',\n+        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n+        '              E(foo: str, bar: str, baz: str) -> None',\n+        '   :module: target.docstring_signature',\n+        '',\n     ]\n \n \n",
    "problem_statement": "`autodoc_docstring_signature` con metodi sovraccaricati\nQuando si utilizza swig per avvolgere classi C++ per Python, se queste hanno metodi sovraccaricati, credo che la convenzione sia di posizionare le firme per ciascuno dei metodi C++ sovraccaricati all'inizio della docstring. Attualmente, `autodoc_docstring_signature` può rilevare solo la prima. Sarebbe utile poter rilevare tutte.",
    "hints_text": "Perché i metodi sovraccaricati non hanno la firma corretta? Vorrei sapere perché vuoi utilizzare `autodoc_docstring_signature`. Penso che sia un workaround per un caso speciale.\nC'è qualche workaround per questo?\n@3nids Potresti farmi sapere il tuo problema in dettaglio per favore? Non ho ancora capito qual è il problema reale di questa questione. C'è un esempio minimo riproducibile?\nUtilizziamo Sphinx per documentare i binding Python di un'API C++ Qt.\nAbbiamo metodi sovraccaricati nell'API:\n\nad esempio, il metodo `getFeatures` ha 4 firme sovraccaricate.\nLa generazione della documentazione aggiunge le 4 firme con i 4 docstring.\nQuesto produce questo output nei documenti:\n\n![image](https://user-images.githubusercontent.com/127259/67165602-6446b200-f387-11e9-9159-260f9a8ab1fc.png)\n\nGrazie per la spiegazione. Ho appena capito cosa è successo. Purtroppo, Sphinx non supporta più firme per gli oggetti Python. Quindi non ci sono workaround, per quanto ne sappia (AFAIK). Considererò come realizzare questa funzionalità in seguito.\nSarebbe possibile sponsorizzare tale funzionalità?\nAttualmente, Sphinx non partecipa a programmi di sponsorizzazione. Quindi non c'è modo di pagare un premio per questa funzionalità.\n\nfuori tema: Personalmente, ho appena iniziato il programma GitHub sponsors questa settimana. Quindi i sponsor sono sempre benvenuti. Ma non vorrei cambiare l'ordine in base alle richieste dei sponsor...",
    "created_at": "2020-05-30T06:41:07Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\"]",
    "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
    "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-7229",
    "base_commit": "3aa75c8d00a4a2d4acf10d80f76b937cadb666b7",
    "patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1855,15 +1855,13 @@ def where(cond, x, y, keep_attrs=None):\n     Dataset.where, DataArray.where :\n         equivalent methods\n     \"\"\"\n+    from .dataset import Dataset\n+\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n-    if keep_attrs is True:\n-        # keep the attributes of x, the second parameter, by default to\n-        # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n \n     # alignment for three arguments is complicated, so don't support it yet\n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.where,\n         cond,\n         x,\n@@ -1874,6 +1872,27 @@ def where(cond, x, y, keep_attrs=None):\n         keep_attrs=keep_attrs,\n     )\n \n+    # keep the attributes of x, the second parameter, by default to\n+    # be consistent with the `where` method of `DataArray` and `Dataset`\n+    # rebuild the attrs from x at each level of the output, which could be\n+    # Dataset, DataArray, or Variable, and also handle coords\n+    if keep_attrs is True:\n+        if isinstance(y, Dataset) and not isinstance(x, Dataset):\n+            # handle special case where x gets promoted to Dataset\n+            result.attrs = {}\n+            if getattr(x, \"name\", None) in result.data_vars:\n+                result[x.name].attrs = getattr(x, \"attrs\", {})\n+        else:\n+            # otherwise, fill in global attrs and variable attrs (if they exist)\n+            result.attrs = getattr(x, \"attrs\", {})\n+            for v in getattr(result, \"data_vars\", []):\n+                result[v].attrs = getattr(getattr(x, v, None), \"attrs\", {})\n+        for c in getattr(result, \"coords\", []):\n+            # always fill coord attrs of x\n+            result[c].attrs = getattr(getattr(x, c, None), \"attrs\", {})\n+\n+    return result\n+\n \n @overload\n def polyval(\n",
    "test_patch": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1925,16 +1925,63 @@ def test_where() -> None:\n \n \n def test_where_attrs() -> None:\n-    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n-    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n-    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    cond = xr.DataArray([True, False], coords={\"a\": [0, 1]}, attrs={\"attr\": \"cond_da\"})\n+    cond[\"a\"].attrs = {\"attr\": \"cond_coord\"}\n+    x = xr.DataArray([1, 1], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    x[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    y = xr.DataArray([0, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n+    y[\"a\"].attrs = {\"attr\": \"y_coord\"}\n+\n+    # 3 DataArrays, takes attrs from x\n     actual = xr.where(cond, x, y, keep_attrs=True)\n-    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n-    # ensure keep_attrs can handle scalar values\n+    # x as a scalar, takes no attrs\n+    actual = xr.where(cond, 0, y, keep_attrs=True)\n+    expected = xr.DataArray([0, 0], coords={\"a\": [0, 1]})\n+    assert_identical(expected, actual)\n+\n+    # y as a scalar, takes attrs from x\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # x and y as a scalar, takes no attrs\n     actual = xr.where(cond, 1, 0, keep_attrs=True)\n-    assert actual.attrs == {}\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]})\n+    assert_identical(expected, actual)\n+\n+    # cond and y as a scalar, takes attrs from x\n+    actual = xr.where(True, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 1], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # DataArray and 2 Datasets, takes attrs from x\n+    ds_x = xr.Dataset(data_vars={\"x\": x}, attrs={\"attr\": \"x_ds\"})\n+    ds_y = xr.Dataset(data_vars={\"x\": y}, attrs={\"attr\": \"y_ds\"})\n+    ds_actual = xr.where(cond, ds_x, ds_y, keep_attrs=True)\n+    ds_expected = xr.Dataset(\n+        data_vars={\n+            \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+        },\n+        attrs={\"attr\": \"x_ds\"},\n+    )\n+    ds_expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(ds_expected, ds_actual)\n+\n+    # 2 DataArrays and 1 Dataset, takes attrs from x\n+    ds_actual = xr.where(cond, x.rename(\"x\"), ds_y, keep_attrs=True)\n+    ds_expected = xr.Dataset(\n+        data_vars={\n+            \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+        },\n+    )\n+    ds_expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(ds_expected, ds_actual)\n \n \n @pytest.mark.parametrize(\n",
    "problem_statement": "`xr.where(..., keep_attrs=True)` sovrascrive gli attributi delle coordinate\n### Cosa è successo?\n\n#6461 ha avuto alcune conseguenze impreviste per `xr.where(..., keep_attrs=True)`, dove gli attributi delle coordinate vengono sovrascritti dagli attributi delle variabili. Supponiamo che questo sia stato rotto dalla versione `2022.06.0`.\n\n### Cosa ti aspettavi che accadesse?\n\nGli attributi delle coordinate dovrebbero essere preservati.\n\n### Esempio Minimo Completo Verificabile\n\n```Python\nimport xarray as xr\r\nds = xr.tutorial.load_dataset(\"air_temperature\")\r\nxr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n```\n\n### Conferma MVCE\n\n- [X] Esempio minimo — l'esempio è il più focalizzato possibile per dimostrare il problema sottostante in xarray.\n- [X] Esempio completo — l'esempio è auto-contenuto, inclusi tutti i dati e il testo di eventuali traceback.\n- [X] Esempio verificabile — l'esempio può essere copiato e incollato in un prompt IPython o in un [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), restituendo il risultato.\n- [X] Nuova issue — una ricerca tra le GitHub Issues suggerisce che non si tratta di un duplicato.\n\n### Output del log rilevante\n\n```Python\n# Nuovi attributi di time sono:\r\n{'long_name': '4xDaily Air temperature at sigma level 995',\r\n 'units': 'degK',\r\n 'precision': 2,\r\n 'GRIB_id': 11,\r\n 'GRIB_name': 'TMP',\r\n 'var_desc': 'Air temperature',\r\n 'dataset': 'NMC Reanalysis',\r\n 'level_desc': 'Surface',\r\n 'statistic': 'Individual Obs',\r\n 'parent_stat': 'Other',\r\n 'actual_range': array([185.16, 322.1 ], dtype=float32)}\r\n\r\n# Invece di:\r\n{'standard_name': 'time', 'long_name': 'Time'}\n```\n\n### Qualcos'altro che dobbiamo sapere?\n\nSto avendo difficoltà a capire come il semplice cambiamento `lambda` in #6461 abbia portato a questo. Ho provato a tracciare il mio percorso attraverso le varie funzioni di merge, ma ci sono molti strati. Sono felice di inviare una PR se qualcuno ha un'idea per una correzione ovvia.\n\n### Ambiente\n\n<details>\r\nVERSIONI INSTALLATE\r\n------------------\r\ncommit: None\r\npython: 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) \r\n[GCC 10.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.15.0-52-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: ('en_US', 'UTF-8')\r\nlibhdf5: 1.12.2\r\nlibnetcdf: 4.8.1\r\n\r\nxarray: 2022.10.0\r\npandas: 1.4.3\r\nnumpy: 1.23.4\r\nscipy: 1.9.3\r\nnetCDF4: 1.6.1\r\npydap: None\r\nh5netcdf: 1.0.2\r\nh5py: 3.7.0\r\nNio: None\r\nzarr: 2.13.3\r\ncftime: 1.6.2\r\nnc_time_axis: 1.4.1\r\nPseudoNetCDF: None\r\nrasterio: 1.3.3\r\ncfgrib: 0.9.10.2\r\niris: None\r\nbottleneck: 1.3.5\r\ndask: 2022.10.0\r\ndistributed: 2022.10.0\r\nmatplotlib: 3.6.1\r\ncartopy: 0.21.0\r\nseaborn: None\r\nnumbagg: None\r\nfsspec: 2022.10.0\r\ncupy: None\r\npint: 0.19.2\r\nsparse: 0.13.0\r\nflox: 0.6.1\r\nnumpy_groupies: 0.9.19\r\nsetuptools: 65.5.0\r\npip: 22.3\r\nconda: None\r\npytest: 7.1.3\r\nIPython: 8.5.0\r\nsphinx: None\r\n\r\n\r\n\r\n</details>",
    "hints_text": "L'originale è così:\n```python\n# mantieni gli attributi di x, il secondo parametro, per impostazione predefinita per\n# essere coerente con il metodo `where` di `DataArray` e `Dataset`\nkeep_attrs = lambda attrs, context: attrs[1]\n```\n\nIl nuovo è così:\n```python\n# mantieni gli attributi di x, il secondo parametro, per impostazione predefinita per\n# essere coerente con il metodo `where` di `DataArray` e `Dataset`\nkeep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n```\n\nNoto che l'originale restituisce `attrs[1]` per qualche motivo, ma il nuovo no. Non ho provato, ma prova qualcosa del genere:\n```python\ndef keep_attrs(attrs, context):\n    attrs_ = getattr(x, \"attrs\", {})  # Corretto da getattrs a getattr\n    if attrs_:\n        return attrs_[1]\n    else:\n        return attrs_\n```\nNon capisco da dove venga `x`, sembra rischioso ottenere qualcosa al di fuori dell'ambito della funzione in questo modo.\n\nQualsiasi cosa utilizzi `attrs[1]` e l'helper `_get_all_of_type` sarà difficile da garantire il comportamento dichiarato nella docstring, che è quello di prendere gli attributi di `x`. Se `x` è uno scalare, `_get_all_of_type` restituisce una lista di lunghezza 2 e `attrs[1]` finisce per essere gli attributi di `y`. Penso che potremmo voler rielaborare questo, proverò alcune cose più tardi oggi.\nVedi anche i suggerimenti in https://github.com/pydata/xarray/pull/6461#discussion_r1004988864 e https://github.com/pydata/xarray/pull/6461#discussion_r1005023395",
    "created_at": "2022-10-26T21:45:01Z",
    "version": "2022.09",
    "FAIL_TO_PASS": "[\"xarray/tests/test_computation.py::test_where_attrs\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_computation.py::test_signature_properties\", \"xarray/tests/test_computation.py::test_result_name\", \"xarray/tests/test_computation.py::test_ordered_set_union\", \"xarray/tests/test_computation.py::test_ordered_set_intersection\", \"xarray/tests/test_computation.py::test_join_dict_keys\", \"xarray/tests/test_computation.py::test_collect_dict_values\", \"xarray/tests/test_computation.py::test_apply_identity\", \"xarray/tests/test_computation.py::test_apply_two_inputs\", \"xarray/tests/test_computation.py::test_apply_1d_and_0d\", \"xarray/tests/test_computation.py::test_apply_two_outputs\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs\", \"xarray/tests/test_computation.py::test_apply_input_core_dimension\", \"xarray/tests/test_computation.py::test_apply_output_core_dimension\", \"xarray/tests/test_computation.py::test_apply_exclude\", \"xarray/tests/test_computation.py::test_apply_groupby_add\", \"xarray/tests/test_computation.py::test_unified_dim_sizes\", \"xarray/tests/test_computation.py::test_broadcast_compat_data_1d\", \"xarray/tests/test_computation.py::test_broadcast_compat_data_2d\", \"xarray/tests/test_computation.py::test_keep_attrs\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]\", \"xarray/tests/test_computation.py::test_dataset_join\", \"xarray/tests/test_computation.py::test_apply_dask\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_errors\", \"xarray/tests/test_computation.py::test_apply_dask_multiple_inputs\", \"xarray/tests/test_computation.py::test_apply_dask_new_output_dimension\", \"xarray/tests/test_computation.py::test_apply_dask_new_output_sizes\", \"xarray/tests/test_computation.py::test_vectorize\", \"xarray/tests/test_computation.py::test_vectorize_dask\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]\", \"xarray/tests/test_computation.py::test_vectorize_exclude_dims\", \"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\", \"xarray/tests/test_computation.py::test_corr_only_dataarray\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_dtype_error\", \"xarray/tests/test_computation.py::test_autocov[None-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a4]\", \"xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims\", \"xarray/tests/test_computation.py::test_output_wrong_number\", \"xarray/tests/test_computation.py::test_output_wrong_dims\", \"xarray/tests/test_computation.py::test_output_wrong_dim_size\", \"xarray/tests/test_computation.py::test_dot[True]\", \"xarray/tests/test_computation.py::test_dot[False]\", \"xarray/tests/test_computation.py::test_dot_align_coords[True]\", \"xarray/tests/test_computation.py::test_dot_align_coords[False]\", \"xarray/tests/test_computation.py::test_where\", \"xarray/tests/test_computation.py::test_polyval[simple-nodask]\", \"xarray/tests/test_computation.py::test_polyval[simple-dask]\", \"xarray/tests/test_computation.py::test_polyval[broadcast-x-nodask]\", \"xarray/tests/test_computation.py::test_polyval[broadcast-x-dask]\", \"xarray/tests/test_computation.py::test_polyval[shared-dim-nodask]\", \"xarray/tests/test_computation.py::test_polyval[shared-dim-dask]\", \"xarray/tests/test_computation.py::test_polyval[reordered-index-nodask]\", \"xarray/tests/test_computation.py::test_polyval[reordered-index-dask]\", \"xarray/tests/test_computation.py::test_polyval[sparse-index-nodask]\", \"xarray/tests/test_computation.py::test_polyval[sparse-index-dask]\", \"xarray/tests/test_computation.py::test_polyval[array-dataset-nodask]\", \"xarray/tests/test_computation.py::test_polyval[array-dataset-dask]\", \"xarray/tests/test_computation.py::test_polyval[dataset-array-nodask]\", \"xarray/tests/test_computation.py::test_polyval[dataset-array-dask]\", \"xarray/tests/test_computation.py::test_polyval[dataset-dataset-nodask]\", \"xarray/tests/test_computation.py::test_polyval[dataset-dataset-dask]\", \"xarray/tests/test_computation.py::test_polyval[datetime-nodask]\", \"xarray/tests/test_computation.py::test_polyval[datetime-dask]\", \"xarray/tests/test_computation.py::test_polyval[timedelta-nodask]\", \"xarray/tests/test_computation.py::test_polyval[timedelta-dask]\", \"xarray/tests/test_computation.py::test_polyval_cftime[1970-01-01-nodask]\", \"xarray/tests/test_computation.py::test_polyval_cftime[1970-01-01-dask]\", \"xarray/tests/test_computation.py::test_polyval_cftime[0753-04-21-nodask]\", \"xarray/tests/test_computation.py::test_polyval_cftime[0753-04-21-dask]\", \"xarray/tests/test_computation.py::test_polyval_degree_dim_checks\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-simple-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-simple-dask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-datetime-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-datetime-dask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-simple-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-simple-dask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-datetime-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-datetime-dask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-timedelta-nodask]\", \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[2D-timedelta-dask]\", \"xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-False]\", \"xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-True]\", \"xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-False]\", \"xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-True]\", \"xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-False]\", \"xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-True]\"]",
    "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pytest-dev/pytest",
    "instance_id": "pytest-dev__pytest-7236",
    "base_commit": "c98bc4cd3d687fe9b392d8eecd905627191d4f06",
    "patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -41,7 +41,7 @@ def collect(self):\n         if not getattr(cls, \"__test__\", True):\n             return\n \n-        skipped = getattr(cls, \"__unittest_skip__\", False)\n+        skipped = _is_skipped(cls)\n         if not skipped:\n             self._inject_setup_teardown_fixtures(cls)\n             self._inject_setup_class_fixture()\n@@ -89,7 +89,7 @@ def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):\n \n     @pytest.fixture(scope=scope, autouse=True)\n     def fixture(self, request):\n-        if getattr(self, \"__unittest_skip__\", None):\n+        if _is_skipped(self):\n             reason = self.__unittest_skip_why__\n             pytest.skip(reason)\n         if setup is not None:\n@@ -220,7 +220,7 @@ def runtest(self):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -301,3 +301,8 @@ def check_testcase_implements_trial_reporter(done=[]):\n \n     classImplements(TestCaseFunction, IReporter)\n     done.append(1)\n+\n+\n+def _is_skipped(obj) -> bool:\n+    \"\"\"Return True if the given object has been marked with @unittest.skip\"\"\"\n+    return bool(getattr(obj, \"__unittest_skip__\", False))\n",
    "test_patch": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1193,6 +1193,40 @@ def test_2(self):\n     ]\n \n \n+@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+def test_pdb_teardown_skipped(testdir, monkeypatch, mark):\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for skipped tests.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"test_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.test_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            {mark}(\"skipped for reasons\")\n+            def test_1(self):\n+                pass\n+\n+    \"\"\".format(\n+            mark=mark\n+        )\n+    )\n+    result = testdir.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(testdir):\n     pytest.importorskip(\"unittest.async_case\")\n \n",
    "problem_statement": "unittest.TestCase.tearDown eseguito su test saltati quando si esegue --pdb\r\n\r\nCon questo test minimo:\r\n```python\r\nimport unittest\r\n\r\nclass MyTestCase(unittest.TestCase):\r\n    def setUp(self):\r\n        xxx\r\n    @unittest.skip(\"hello\")\r\n    def test_one(self):\r\n        pass\r\n    def tearDown(self):\r\n        xxx\r\n```\r\n\r\n```\r\n$ python --version\r\nPython 3.6.10\r\n$ pip freeze\r\nattrs==19.3.0\r\nimportlib-metadata==1.6.0\r\nmore-itertools==8.2.0\r\npackaging==20.3\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.7\r\npytest==5.4.2\r\nsix==1.14.0\r\nwcwidth==0.1.9\r\nzipp==3.1.0\r\n```\r\n\r\nIl test viene saltato correttamente:\r\n```\r\n$ pytest test_repro.py \r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.10, pytest-5.4.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /srv/slapgrid/slappart3/srv/runner/project/repro_pytest\r\ncollected 1 item                                                               \r\n\r\ntest_repro.py s                                                          [100%]\r\n\r\n============================== 1 skipped in 0.02s ==============================\r\n\r\n```\r\n\r\nma quando si esegue con `--pdb`, il teardown sembra essere eseguito:\r\n```\r\n$ pytest --pdb test_repro.py \r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.10, pytest-5.4.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /srv/slapgrid/slappart3/srv/runner/project/repro_pytest\r\ncollected 1 item                                                               \r\n\r\ntest_repro.py sE\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nself = <test_repro.MyTestCase testMethod=test_one>\r\n\r\n    def tearDown(self):\r\n>       xxx\r\nE       NameError: name 'xxx' is not defined\r\n\r\ntest_repro.py:10: NameError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>\r\n*** NameError: name 'execfile' is not defined\r\n> /srv/slapgrid/slappart3/srv/runner/project/repro_pytest/test_repro.py(10)tearD\r\nown()\r\n-> xxx\r\n(Pdb) q\r\n\r\n\r\n=========================== short test summary info ============================\r\nERROR test_repro.py::MyTestCase::test_one - NameError: name 'xxx' is not defined\r\n!!!!!!!!!!!!!!!!!!! _pytest.outcomes.Exit: Quitting debugger !!!!!!!!!!!!!!!!!!!\r\n========================= 1 skipped, 1 error in 1.83s ==========================\r\n$ \r\n```\r\n\r\nMi sarei aspettato che il test venisse saltato, anche con `--pdb`. Con `pytest==5.4.1`, il test veniva saltato anche con `--pdb`, quindi sembra che qualcosa sia cambiato tra 5.4.2 e 5.4.1.\r\n\r\n(Avrei voluto inviare una PR, ma non ho tempo in questi giorni)",
    "hints_text": "Questo potrebbe essere una regressione da https://github.com/pytest-dev/pytest/pull/7151, vedo che modifica pdb, skip e teardown.\nVorrei lavorare su questo.\nCiao @gdhameeja,\r\n\r\nGrazie per l'offerta, ma è un po' più complicato a causa dell'interazione tra unittest e pytest. Ho intenzione di occuparmene oggi, poiché si tratta di una regressione. 👍 \r\n\r\nMa ancora grazie per l'offerta!",
    "created_at": "2020-05-21T19:53:14Z",
    "version": "5.4",
    "FAIL_TO_PASS": "[\"testing/test_unittest.py::test_pdb_teardown_skipped[@unittest.skip]\"]",
    "PASS_TO_PASS": "[\"testing/test_unittest.py::test_simple_unittest\", \"testing/test_unittest.py::test_runTest_method\", \"testing/test_unittest.py::test_isclasscheck_issue53\", \"testing/test_unittest.py::test_setup\", \"testing/test_unittest.py::test_setUpModule\", \"testing/test_unittest.py::test_setUpModule_failing_no_teardown\", \"testing/test_unittest.py::test_new_instances\", \"testing/test_unittest.py::test_function_item_obj_is_instance\", \"testing/test_unittest.py::test_teardown\", \"testing/test_unittest.py::test_teardown_issue1649\", \"testing/test_unittest.py::test_unittest_skip_issue148\", \"testing/test_unittest.py::test_method_and_teardown_failing_reporting\", \"testing/test_unittest.py::test_setup_failure_is_shown\", \"testing/test_unittest.py::test_setup_setUpClass\", \"testing/test_unittest.py::test_setup_class\", \"testing/test_unittest.py::test_testcase_adderrorandfailure_defers[Error]\", \"testing/test_unittest.py::test_testcase_adderrorandfailure_defers[Failure]\", \"testing/test_unittest.py::test_testcase_custom_exception_info[Error]\", \"testing/test_unittest.py::test_testcase_custom_exception_info[Failure]\", \"testing/test_unittest.py::test_testcase_totally_incompatible_exception_info\", \"testing/test_unittest.py::test_module_level_pytestmark\", \"testing/test_unittest.py::test_djangolike_testcase\", \"testing/test_unittest.py::test_unittest_not_shown_in_traceback\", \"testing/test_unittest.py::test_unorderable_types\", \"testing/test_unittest.py::test_unittest_typerror_traceback\", \"testing/test_unittest.py::test_unittest_expected_failure_for_failing_test_is_xfail[pytest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_failing_test_is_xfail[unittest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_passing_test_is_fail[pytest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_passing_test_is_fail[unittest]\", \"testing/test_unittest.py::test_unittest_setup_interaction[fixture-return]\", \"testing/test_unittest.py::test_unittest_setup_interaction[yield_fixture-yield]\", \"testing/test_unittest.py::test_non_unittest_no_setupclass_support\", \"testing/test_unittest.py::test_no_teardown_if_setupclass_failed\", \"testing/test_unittest.py::test_cleanup_functions\", \"testing/test_unittest.py::test_issue333_result_clearing\", \"testing/test_unittest.py::test_unittest_raise_skip_issue748\", \"testing/test_unittest.py::test_unittest_skip_issue1169\", \"testing/test_unittest.py::test_class_method_containing_test_issue1558\", \"testing/test_unittest.py::test_usefixtures_marker_on_unittest[builtins.object]\", \"testing/test_unittest.py::test_usefixtures_marker_on_unittest[unittest.TestCase]\", \"testing/test_unittest.py::test_testcase_handles_init_exceptions\", \"testing/test_unittest.py::test_error_message_with_parametrized_fixtures\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip.py-1\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip_class.py-1\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip_module.py-1\", \"testing/test_unittest.py::test_BdbQuit\", \"testing/test_unittest.py::test_exit_outcome\", \"testing/test_unittest.py::test_trace\", \"testing/test_unittest.py::test_pdb_teardown_called\", \"testing/test_unittest.py::test_pdb_teardown_skipped[@pytest.mark.skip]\", \"testing/test_unittest.py::test_async_support\"]",
    "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-14598",
    "base_commit": "80c3854a5f4f4a6ab86c03d9db7854767fcd83c1",
    "patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -66,7 +66,7 @@ class Card(_Verify):\n     # followed by an optional comment\n     _strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n     _comm_field = r\"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\\n)*))\"\n-    _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")\n+    _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?$\")\n \n     # FSC commentary card string which must contain printable ASCII characters.\n     # Note: \\Z matches the end of the string without allowing newlines\n@@ -859,7 +859,7 @@ def _split(self):\n                     return kw, vc\n \n                 value = m.group(\"strg\") or \"\"\n-                value = value.rstrip().replace(\"''\", \"'\")\n+                value = value.rstrip()\n                 if value and value[-1] == \"&\":\n                     value = value[:-1]\n                 values.append(value)\n",
    "test_patch": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -582,6 +582,22 @@ def test_long_string_value_via_fromstring(self, capsys):\n                 \"CONTINUE  '' / comments in line 1 comments with ''.                             \"\n             )\n \n+    def test_long_string_value_with_quotes(self):\n+        testval = \"x\" * 100 + \"''\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n+        testval = \"x\" * 100 + \"''xxx\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n+        testval = \"x\" * 100 + \"'' xxx\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n     def test_continue_card_with_equals_in_value(self):\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/117\n",
    "problem_statement": "Incoerenza nella gestione delle doppie virgolette singole ('') in FITS Card\n### Descrizione\n\nLa gestione delle virgolette singole nelle card FITS sembra corretta, tranne *a volte* quando si tratta di stringhe nulle, ovvero doppie virgolette singole (`''`), che a volte vengono trasformate in singole virgolette singole (`'`).\n\nAd esempio:\n```python\nIn [39]: from astropy.io import fits\nIn [40]: for n in range(60, 70):\n    ...:     card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\n    ...:     card2 = fits.Card.fromstring(str(card1))  # Dovrebbe essere lo stesso di card1\n    ...:     print(n, card1.value == card2.value)\n    ...:     if card1.value != card2.value:\n    ...:         print(card1.value)\n    ...:         print(card2.value)\n```\nrestituisce\n```\n60 True\n61 True\n62 True\n63 True\n64 True\n65 False\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n66 True\n67 False\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n68 False\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n69 False\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n```\n\nSe la stringa nulla `''` è inclusa in un valore più grande, il problema si verifica in una posizione diversa:\n```python\nIn [39]: from astropy.io import fits\nIn [40]: for n in range(50, 70):\n    ...:     card1 = fits.Card('CONFIG', \"x\" * n + \"''\" + \"x\"*10)\n    ...:     card2 = fits.Card.fromstring(str(card1))\n    ...:     print(n, len(card1.value), card1.value == card2.value)\n```\nrestituisce\n```\n50 62 True\n51 63 True\n52 64 True\n53 65 True\n54 66 True\n55 67 False\n56 68 False\n57 69 False\n58 70 False\n59 71 False\n60 72 False\n61 73 False\n62 74 False\n63 75 False\n64 76 True\n65 77 False\n66 78 True\n67 79 False\n68 80 False\n69 81 False\n```\n\n### Comportamento previsto\n\nTutti i valori delle card dovrebbero essere gestiti correttamente.\n\n### Come riprodurre\n\n```python\nfrom astropy.io import fits\nfor n in range(60, 70):\n    card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\n    card2 = fits.Card.fromstring(str(card1))\n    print(n, len(card1.value), card1.value == card2.value)\n    if card1.value != card2.value:\n        print(card1.value)\n        print(card2.value)\n```\n\n### Versioni\n\nLinux-5.10.0-1029-oem-x86_64-with-glibc2.29\nPython 3.8.10 (default, Mar 13 2023, 10:26:41) \n[GCC 9.4.0]\nastropy 5.2.1\nNumpy 1.23.5\npyerfa 2.0.0\nScipy 1.10.0\nMatplotlib 3.6.2",
    "hints_text": "Ciao, se possibile, vorrei essere assegnato a questa issue. Grazie.\nCiao @ashtonw3,\r\nDi solito non assegniamo le issue alle persone, basta menzionare qui che vuoi lavorarci.\r\nMa per questa issue specifica ho già una correzione e aprirò presto una PR, avrei dovuto farlo ieri ma ho trovato un'altra issue correlata che richiedeva una correzione aggiuntiva:\r\n\r\nPrima issue, la virgoletta alla fine della riga viene persa:\r\n```\r\nIn [5]: fits.Card.fromstring(fits.Card(\"FOO\", \"x\"*100 + \"''\", \"comment\").image).value\r\nOut[5]: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\"\r\n```\r\n\r\nIssue aggiuntiva, una stringa dopo le virgolette viene persa se c'è uno spazio tra di esse:\r\n```\r\nIn [7]: fits.Card.fromstring(fits.Card(\"FOO\", \"x\"*100 + \"'' aaa\", \"comment\").image).value\r\nOut[7]: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\"\r\n```",
    "created_at": "2023-03-29T10:34:49Z",
    "version": "5.2",
    "FAIL_TO_PASS": "[\"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_value_with_quotes\"]",
    "PASS_TO_PASS": "[\"astropy/io/fits/tests/test_header.py::test_shallow_copy\", \"astropy/io/fits/tests/test_header.py::test_init_with_header\", \"astropy/io/fits/tests/test_header.py::test_init_with_dict\", \"astropy/io/fits/tests/test_header.py::test_init_with_ordereddict\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_rename_keyword\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_indexing_case[A]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_indexing_case[a]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_card_constructor_default_args\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_card_from_bytes\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_string_value_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_boolean_value_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_integer_value_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_floating_point_value_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_floating_point_string_representation_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_complex_value_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_card_image_constructed_too_long\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_constructor_filter_illegal_data_structures\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_keyword_too_long\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_illegal_characters_in_key\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_add_history\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_add_blank\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_comment\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_commentary_cards\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_commentary_card_created_by_fromstring\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_commentary_card_will_not_parse_numerical_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_equal_sign_after_column8\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_blank_keyword\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_specify_undefined_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_complex_number_using_string_input\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_fixable_non_standard_fits_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_fixable_non_fsc\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_undefined_value_using_string_input\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_undefined_keys_values\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_mislocated_equal_sign\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_equal_only_up_to_column_10\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_verify_invalid_equal_sign\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_fix_invalid_equal_sign\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_value_with_multiple_long_words\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_unicode_string\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_repr\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_blank_keyword_long_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_from_file\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_word_in_long_string_too_long\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_string_value_via_fromstring\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_continue_card_with_equals_in_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_final_continue_card_lacks_ampersand\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_final_continue_card_ampersand_removal_on_long_comments\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_card_creation\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_with_abbrev_value_indicator\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_not_warn\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_keyword_whitespace\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_verify_mixed_case_hierarch\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_missing_keyword\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_card_lookup\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_card_delete\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_card_insert_delete\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_hierarch_create_and_update\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_short_hierarch_create_and_update\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_setitem_invalid\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_setitem_1tuple\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_setitem_2tuple\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_set_value_to_none\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_set_comment_only\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_iter\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_slice\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_slice_assignment\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_slice_delete\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_wildcard_slice\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_wildcard_with_hyphen\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_wildcard_slice_assignment\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_wildcard_slice_deletion\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_history\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_clear\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_clear_write[fitsext0]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_clear_write[fitsext1]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromkeys\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromkeys_with_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromkeys_with_value_and_comment\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromkeys_with_duplicates\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_items\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_iterkeys\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_itervalues\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_keys\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_list_like_pop\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_dict_like_pop\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_popitem\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_setdefault\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_from_dict\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_from_iterable\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend_unique\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend_unique_commentary\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend_update\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend_update_commentary\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_extend_exact\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_count\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_append_use_blanks\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_append_keyword_only\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_insert_use_blanks\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_insert_before_keyword\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_remove\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_comments\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_comment_slices_and_filters\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_comment_slice_filter_assign\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_commentary_slicing\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_commentary\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_commentary_comparison\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_commentary_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_totxtfile[]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_totxtfile[home_is_data]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_totxtfile[home_is_data,\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_tofile[]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_tofile[home_is_data]\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_tofile[home_is_data,\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_fromfile\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromtextfile\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromtextfile_with_end_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_append_end_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_invalid_end_cards\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_invalid_characters\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_unnecessary_move\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_invalid_float_cards\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_invalid_float_cards2\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_leading_zeros\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_assign_boolean\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_method_keyword_normalization\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_end_in_comment\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_assign_unicode\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_assign_non_ascii\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_strip_whitespace\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_keep_duplicate_history_in_orig_header\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_invalid_keyword_cards\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_fix_hierarch_with_invalid_value\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_assign_inf_nan\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_bool\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_numeric\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_newlines_in_commentary\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_commentary_card_appended_to_header\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_fromstring_bytes\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_set_keyword_with_space\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_strip\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_update_invalid_card\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_index_numpy_int\", \"astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_header_data_size\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_initialize_rvkc\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_parse_field_specifier\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_update_field_specifier\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_field_specifier_case_senstivity\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_get_rvkc_by_index\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_get_rvkc_by_keyword\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_get_rvkc_by_keyword_and_field_specifier\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_access_nonexistent_rvkc\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_update_rvkc\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_update_rvkc_2\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_raw_keyword_value\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_rvkc_insert_after\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_rvkc_delete\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_pattern_matching_keys\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_pattern_matching_key_deletion\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_successive_pattern_matching\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_rvkc_in_cardlist_keys\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_rvkc_in_cardlist_values\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_rvkc_value_attribute\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_overly_permissive_parsing\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_overly_aggressive_rvkc_lookup\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_fitsheader_script\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_fitsheader_compressed_from_primary_image_ext\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_fitsheader_table_feature\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_hdu_writeto_mode[wb]\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_hdu_writeto_mode[wb+]\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_hdu_writeto_mode[ab]\", \"astropy/io/fits/tests/test_header.py::TestRecordValuedKeywordCards::test_hdu_writeto_mode[ab+]\", \"astropy/io/fits/tests/test_header.py::test_subclass\"]",
    "environment_setup_commit": "362f6df12abf9bd769d4915fabf955c993ea22cf",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "matplotlib/matplotlib",
    "instance_id": "matplotlib__matplotlib-23314",
    "base_commit": "97fc1154992f64cfb2f86321155a7404efeb2d8a",
    "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -387,6 +387,8 @@ def apply_aspect(self, position=None):\n \n     @martist.allow_rasterization\n     def draw(self, renderer):\n+        if not self.get_visible():\n+            return\n         self._unstale_viewLim()\n \n         # draw the background patch\n",
    "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -45,6 +45,12 @@\n #       the tests with multiple threads.\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes(fig_test, fig_ref):\n+    ax = fig_test.subplots()\n+    ax.set_visible(False)\n+\n+\n def test_get_labels():\n     fig, ax = plt.subplots()\n     ax.set_xlabel('x label')\n@@ -7319,7 +7325,7 @@ def test_redraw_in_frame():\n     ax.redraw_in_frame()\n \n \n-def test_invisible_axes():\n+def test_invisible_axes_events():\n     # invisible axes should not respond to events...\n     fig, ax = plt.subplots()\n     assert fig.canvas.inaxes((200, 200)) is not None\ndiff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,12 @@\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes(fig_test, fig_ref):\n+    ax = fig_test.subplots(subplot_kw=dict(projection='3d'))\n+    ax.set_visible(False)\n+\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
    "problem_statement": "[Bug]: set_visible() non funziona per la proiezione 3D \n### Riepilogo del bug\n\nnella proiezione del subplot 3D la funzione set_visible non funziona anche se il valore è impostato su False\n\n### Codice per la riproduzione\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nfig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\nax1.scatter(1,1,1)\nax2.scatter(1,1,1, c='r')\nax1.set_visible(False)\n\nplt.show()\n# Thanks Tim for your help! \n```\n\n### Risultato effettivo\n\nil subplot rimane visibile, il che non dovrebbe accadere se il valore è impostato su False\n\n### Risultato atteso\n\nil subplot non è visibile se il valore è impostato su False\n\n### Informazioni aggiuntive\n\n_Nessuna risposta_\n\n### Sistema operativo\n\n_Nessuna risposta_\n\n### Versione di Matplotlib\n\n3.4.2\n\n### Backend di Matplotlib\n\nQt5Agg\n\n### Versione di Python\n\n3.8.10\n\n### Versione di Jupyter\n\n_Nessuna risposta_\n\n### Installazione\n\n_Nessuna risposta_",
    "hints_text": "Si prega di ridurre il problema a un esempio minimo quando si segnalano problemi.\n\nHo già fatto questo per te:\n```\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nfig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\nax1.scatter(1,1,1)\nax2.scatter(1,1,1, c='r')\nax1.set_visible(False)\n\nplt.show()\n```\n**Output**\n![grafik](https://user-images.githubusercontent.com/2836374/174673179-f5b14df5-7689-49eb-995a-4c97e31c3c43.png)\n\n**Atteso**\nGli assi sinistri dovrebbero essere invisibili.",
    "created_at": "2022-06-21T02:41:34Z",
    "version": "3.5",
    "FAIL_TO_PASS": "[\"lib/mpl_toolkits/tests/test_mplot3d.py::test_invisible_axes[png]\"]",
    "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_aspect_equal_error\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_colors\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_notshaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_lightsource\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_fill[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-both-levels0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-min-levels1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-max-levels2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tricontour[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_1d_input\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsubplots[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tight_layout_text[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_color[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-True]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-False]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png--50]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png-130]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_view_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_3d_from_2d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked_strides[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerocstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerorstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerostrideraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsamplesraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_empty[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_modification\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_collection_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_verts_validation\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_closed[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly_collection_2d_to_3d_empty\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_array[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_labelpad[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_cla[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plotsurface_1d_raises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_transform\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_rot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_world\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists_nowarning\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_autoscale\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length_checks\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_isometric[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_simple[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_edge_style[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_named_colors[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_rgb_data[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_xyz[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_calling_conventions\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_line3d_set_get_data_3d\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted_cla\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ax3d_tickcolour\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ticklabel_format[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3D_smoke[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_minor_ticks[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d_errorevery[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_stem3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_equal_box_aspect[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_colorbar_pos\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_shared_axes_retick\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pan\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scalarmap_update[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_subfigure_simple\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_computed_zorder[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter_spiral[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]\"]",
    "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14351",
    "base_commit": "06fd4df41afb5aa1d681b853c3c08d8c688ca3a5",
    "patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -406,6 +406,15 @@ def process_rhs(self, compiler, connection):\n                 self.rhs.add_fields(['pk'])\n             return super().process_rhs(compiler, connection)\n \n+    def get_group_by_cols(self, alias=None):\n+        cols = self.lhs.get_group_by_cols()\n+        if hasattr(self.rhs, 'get_group_by_cols'):\n+            if not getattr(self.rhs, 'has_select_fields', True):\n+                self.rhs.clear_select_clause()\n+                self.rhs.add_fields(['pk'])\n+            cols.extend(self.rhs.get_group_by_cols())\n+        return cols\n+\n     def get_rhs_op(self, connection, rhs):\n         return 'IN %s' % rhs\n \n",
    "test_patch": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,14 @@ class DistinctAggregate(Aggregate):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
    "problem_statement": "L'oggetto Q __or__ sembra ottenere tutte le colonne predefinite correlate a dunder e il queryset solleva un ProgrammingError.\nDescrizione\n\nSembra esserci una differenza nel modo in cui vengono configurati gli alias degli oggetti Q quando vengono OR'd. Il metodo get_default_columns per questo agent__property_groups__id__in utilizza solo 1, mentre get_default_columns per questo agent__property_groups__in ottiene tutti i campi, il che successivamente causa un errore \"subquery must return only one column\".\n# funziona in 3.2\nqueryset.filter(\n\tQ(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n\t| Q(agent__property_groups__count=0)\n).distinct()\n# VS\n# non funziona in 3.2, funzionava in 2.2.5, ora causa l'aggiunta di tutti i campi come parte di get_default_columns sugli alias\nqueryset.filter(\n\tQ(agent__property_groups__in=property_groups)\n\t| Q(agent__property_groups__count=0)\n).distinct()\nEcco l'errore:\n\n\treturn self.cursor.execute(sql, params)\n File \"/venv/lib/python3.6/site-packages/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/venv/lib/python3.6/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: subquery must return only one column\nLINE 1: ...ativemovingaverage\".\"id\", T5.\"property_group_id\", (SELECT U0...\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nAd esempio, sono riuscito a farlo funzionare controllando che cols[0].alias fosse 'U0' in modo che cols, select_fields e klass_info restituissero solo il campo necessario all'interno dell'oggetto Q o\n\t\t# django/db/models/sql/query.py:233 \n\t\tif cols:\n\t\t\tselect_list = []\n\t\t\t# ho aggiunto queste due righe, solo per un hack di debug\n\t\t\tif cols[0].alias == 'U0':\n\t\t\t\tcols = [cols[0]]\t\nFunzionava (2.2.5), ora non funziona (3.2):\n\nproperty_groups = PropertyGroup.objects.agent_groups(management_agent)\nqueryset = self.annotate(Count(\"agent__property_groups\"))\nreturn queryset.filter(\n\tQ(agent__property_groups__in=property_groups)\n\t| Q(agent__property_groups__count=0)\n).distinct()\nora funziona:\nqs = blah\nproperty_groups = PropertyGroup.objects.agent_groups(management_agent)\nqueryset = qs.annotate(Count(\"agent__property_groups\"))\nqueryset.filter(\n\tQ(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n\t| Q(agent__property_groups__count=0)\n).distinct()\nl'SQL generato\nSELECT COUNT(*) \n\tFROM (\n\t\tSELECT DISTINCT \n\t\t\t\"thing_managerticketratingcumulativemovingaverage\".\"id\" AS Col1, \"thing_managerticketratingcumulativemovingaverage\".\"created\" AS Col2, \"thing_managerticketratingcumulativemovingaverage\".\"updated\" AS Col3, \"thing_managerticketratingcumulativemovingaverage\".\"create_by\" AS Col4, \"thing_managerticketratingcumulativemovingaverage\".\"update_by\" AS Col5, \"thing_managerticketratingcumulativemovingaverage\".\"tenant_objs\" AS Col6, \"thing_managerticketratingcumulativemovingaverage\".\"date\" AS Col7, \"thing_managerticketratingcumulativemovingaverage\".\"average\" AS Col8, \"thing_managerticketratingcumulativemovingaverage\".\"data_points\" AS Col9, \"thing_managerticketratingcumulativemovingaverage\".\"agent_id\" AS Col10, COUNT(\"manager_managementagentpropertygroup\".\"property_group_id\") AS \"agent__property_groups__count\" \n\t\tFROM \"thing_managerticketratingcumulativemovingaverage\" \n\t\tINNER JOIN \"manager_managementagent\" \n\t\t\tON (\"thing_managerticketratingcumulativemovingaverage\".\"agent_id\" = \"manager_managementagent\".\"id\") \n\t\tLEFT OUTER JOIN \"manager_managementagentpropertygroup\" \n\t\t\tON (\"manager_managementagent\".\"id\" = \"manager_managementagentpropertygroup\".\"management_agent_id\") \n\t\tLEFT OUTER JOIN \"manager_managementagentpropertygroup\" T5 \n\t\t\tON (\"manager_managementagent\".\"id\" = T5.\"management_agent_id\") GROUP BY \"thing_managerticketratingcumulativemovingaverage\".\"id\", T5.\"property_group_id\", \n\t\t\t(\n\t\t\t\t-- il problema è proprio qui\n\t\t\t\tSELECT U0.\"id\", U0.\"created\", U0.\"updated\", U0.\"create_by\", U0.\"update_by\", U0.\"tenant_objs\", U0.\"name\" \n\t\t\t\t-- il problema è la riga sopra\n\t\t\t\tFROM \"property_propertygroup\" U0 \n\t\t\t\tINNER JOIN \"manager_managementagentpropertygroup\" U1 \n\t\t\t\t\tON (U0.\"id\" = U1.\"property_group_id\") \n\t\t\t\t\tWHERE U1.\"management_agent_id\" = %s) HAVING (\n\t\t\t\t\t\tT5.\"property_group_id\" IN (\n\t\t\t\t\t\t\tSELECT U0.\"id\" \n\t\t\t\t\t\t\tFROM \"property_propertygroup\" U0 \n\t\t\t\t\t\t\tINNER JOIN \"manager_managementagentpropertygroup\" U1 \n\t\t\t\t\t\t\tON (U0.\"id\" = U1.\"property_group_id\") \n\t\t\t\t\t\t\tWHERE U1.\"management_agent_id\" = %s) \n\t\t\t\t\t\t\t\tOR COUNT(\"manager_managementagentpropertygroup\".\"property_group_id\") = %s)\n\t\t\t);\t\nLa sub-select che causa l'errore:\nSELECT U0.\"id\", U0.\"created\", U0.\"updated\", U0.\"create_by\", U0.\"update_by\", U0.\"tenant_objs\", U0.\"name\" \nEsaminando come appare l'oggetto Q e come appaiono le colonne generate:\n<Q: (OR: ('agent__property_groups__in', <PropertyGroupQuerySet []>), ('agent__property_groups__count', 0))>,) {}\n> /app/test/compiler.py(27)yep_yep()\n-> try:\n(Pdb) c\nuhoh {'model': <class 'property.models.PropertyGroup'>, 'select_fields': [0, 1, 2, 3, 4, 5, 6]}\n[(Col(U0, property.PropertyGroup.id), ('U0.\"id\"', []), None), (Col(U0, property.PropertyGroup.created), ('U0.\"created\"', []), None), (Col(U0, property.PropertyGroup.updated), ('U0.\"updated\"', []), None), (Col(U0, property.PropertyGroup.create_by), ('U0.\"create_by\"', []), None), (Col(U0, property.PropertyGroup.update_by), ('U0.\"update_by\"', []), None), (Col(U0, property.PropertyGroup.tenant_objs), ('U0.\"tenant_objs\"', []), None), (Col(U0, property.PropertyGroup.name), ('U0.\"name\"', []), None)] {'model': <class 'property.models.PropertyGroup'>, 'select_fields': [0, 1, 2, 3, 4, 5, 6]} {}\n# VS funziona\n<Q: (OR: ('agent__property_groups__id__in', <PropertyGroupQuerySet []>), ('agent__property_groups__count', 0))>,) {}\n> /app/test/compiler.py(27)yep_yep()\n-> try:\n(Pdb) c\nuhoh {'model': <class 'property.models.PropertyGroup'>, 'select_fields': [0]}\n[(Col(U0, property.PropertyGroup.id), ('U0.\"id\"', []), None)] {'model': <class 'property.models.PropertyGroup'>, 'select_fields': [0]} {}\nextra_select []\nLa sub-select query:\n(Pdb) print(self)\nSELECT U0.\"id\", U0.\"created\", U0.\"updated\", U0.\"create_by\", U0.\"update_by\", U0.\"tenant_objs\", U0.\"name\" FROM \"property_propertygroup\" U0 INNER JOIN \"manager_managementagentpropertygroup\" U1 ON (U0.\"id\" = U1.\"property_group_id\") WHERE U1.\"management_agent_id\" = 342\n(Pdb) pprint(self.__dict__)\n{'_annotation_select_cache': None,\n '_constructor_args': ((<class 'property.models.PropertyGroup'>,), {}),\n '_db': None,\n '_extra_select_cache': None,\n '_filtered_relations': {},\n '_lookup_joins': ['property_propertygroup',\n\t\t\t\t 'manager_managementagentpropertygroup',\n\t\t\t\t 'manager_managementagent'],\n 'alias_cols': True,\n 'alias_map': {'U0': <django.db.models.sql.datastructures.BaseTable object at 0x7fc1efd77208>,\n\t\t\t 'U1': <django.db.models.sql.datastructures.Join object at 0x7fc1efd77828>,\n\t\t\t 'U2': <django.db.models.sql.datastructures.Join object at 0x7fc1efd777f0>},\n 'alias_prefix': 'U',\n 'alias_refcount': {'U0': 1, 'U1': 1, 'U2': 0},\n 'annotation_select_mask': None,\n 'annotations': {},\n 'base_table': 'U0',\n 'combinator': None,\n 'combinator_all': False,\n 'combined_queries': (),\n 'contains_aggregate': False,\n 'default_cols': True,\n 'default_ordering': False,\n 'deferred_loading': (frozenset(), True),\n 'distinct': False,\n 'distinct_fields': (),\n 'explain_format': None,\n 'explain_options': {},\n 'explain_query': False,\n 'external_aliases': {'manager_managementagent': False,\n\t\t\t\t\t 'manager_managementagentpropertygroup': False,\n\t\t\t\t\t 'thing_managerticketratingcumulativemovingaverage': False,\n\t\t\t\t\t 'property_propertygroup': False},\n 'extra': {},\n 'extra_order_by': (),\n 'extra_select_mask': None,\n 'extra_tables': (),\n 'filter_is_sticky': False,\n 'group_by': None,\n 'high_mark': None,\n 'low_mark': 0,\n 'max_depth': 5,\n 'model': <class 'property.models.PropertyGroup'>,\n 'order_by': (),\n 'select': (),\n 'select_for_no_key_update': False,\n 'select_for_update': False,\n 'select_for_update_nowait': False,\n 'select_for_update_of': (),\n 'select_for_update_skip_locked': False,\n 'select_related': False,\n 'standard_ordering': True,\n 'subq_aliases': frozenset({'T', 'U'}),\n 'subquery': True,\n 'table_map': {'manager_managementagent': ['U2'],\n\t\t\t 'manager_managementagentpropertygroup': ['U1'],\n\t\t\t 'property_propertygroup': ['U0']},\n 'used_aliases': {'manager_managementagentpropertygroup',\n\t\t\t\t 'property_propertygroup'},\n 'values_select': (),\n 'where': <WhereNode: (AND: <django.db.models.fields.related_lookups.RelatedExact object at 0x7fc1efd77860>)>,\n 'where_class': <class 'django.db.models.sql.where.WhereNode'>}",
    "hints_text": "Grazie per la segnalazione. Puoi fornire un progetto di esempio? (definizione dei modelli e un queryset completo). Non riesco a riprodurre il problema con i dettagli forniti.\n\nRisposta a Mariusz Felisiak: Grazie per la segnalazione. Puoi fornire un progetto di esempio? (definizione dei modelli e un queryset completo). Non riesco a riprodurre il problema con i dettagli forniti. Sì. Fammi sapere se c'è qualcos'altro che posso fare per aiutarti nella riproduzione. All'interno di `ticket32690.django.proj.tar.gz`, guardando il `readme.md`:\n\n```bash\ndocker-compose up\npyenv install 3.8.9\npyenv local 3.8.9\npython -m venv .env\n. .env/bin/activate\npip install -r requirements.txt\n# crea il db\npsql postgres://ticket32690user:password@127.0.0.1:5432/ -c \"create database ticket32690db;\"\n./manage.py migrate\n```\n\nDa dentro la shell di Django:\n\n```\n07:30:35 (.env) jmunsch@pop-os ticket32690 → ./manage.py shell\nPython 3.8.9 (default, Apr 14 2021, 18:54:59) [GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from things.models import Actor, RealmAccess, Thing\n>>> actor1, _ = Actor.objects.get_or_create(**{})\n>>> actor2, _ = Actor.objects.get_or_create(**{})\n>>>\n>>> r1 = RealmAccess.objects.create(name='ok')\n>>> r2 = RealmAccess.objects.create(name='ok2')\n>>>\n>>> actor1.realm_access.add(r1)\n>>>\n>>> Thing.objects.filter_by_realm_access_broken(actor1)\nSELECT \"things_thing\".\"id\", \"things_thing\".\"created\", \"things_thing\".\"updated\", \"things_thing\".\"create_by\", \"things_thing\".\"update_by\", \"things_thing\".\"date\", \"things_thing\".\"average\", \"things_thing\".\"data_points\", \"things_thing\".\"actor_id\", \"things_thing\".\"realms\", COUNT(\"things_actorrealmaccess\".\"realm_access_id\") AS \"actor__realm_access__count\" FROM \"things_thing\" INNER JOIN \"things_actor\" ON (\"things_thing\".\"actor_id\" = \"things_actor\".\"id\") LEFT OUTER JOIN \"things_actorrealmaccess\" ON (\"things_actor\".\"id\" = \"things_actorrealmaccess\".\"actor_id\") LEFT OUTER JOIN \"things_actorrealmaccess\" T5 ON (\"things_actor\".\"id\" = T5.\"actor_id\") GROUP BY \"things_thing\".\"id\", T5.\"realm_access_id\", (SELECT U0.\"id\", U0.\"created\", U0.\"updated\", U0.\"create_by\", U0.\"update_by\", U0.\"name\" FROM \"things_realmaccess\" U0 INNER JOIN \"things_actorrealmaccess\" U1 ON (U0.\"id\" = U1.\"realm_access_id\") WHERE U1.\"actor_id\" = 2) HAVING (T5.\"realm_access_id\" IN (SELECT U0.\"id\" FROM \"things_realmaccess\" U0 INNER JOIN \"things_actorrealmaccess\" U1 ON (U0.\"id\" = U1.\"realm_access_id\") WHERE U1.\"actor_id\" = 2) OR COUNT(\"things_actorrealmaccess\".\"realm_access_id\") = 0)\nTraceback (most recent call last):\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n    return self.cursor.execute(sql, params)\npsycopg2.errors.SyntaxError: subquery must return only one column\nLINE 1: ...OUP BY \"things_thing\".\"id\", T5.\"realm_access_id\", (SELECT U0...\n                                                             ^\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"<console>\", line 1, in <module>\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/models/query.py\", line 256, in __repr__\n    data = list(self[:REPR_OUTPUT_SIZE + 1])\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/models/query.py\", line 262, in __len__\n    self._fetch_all()\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/models/query.py\", line 1324, in _fetch_all\n    self._result_cache = list(self._iterable_class(self))\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/models/query.py\", line 51, in __iter__\n    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1169, in execute_sql\n    cursor.execute(sql, params)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 98, in execute\n    return super().execute(sql, params)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 66, in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 75, in _execute_with_wrappers\n    return executor(sql, params, many, context)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n    return self.cursor.execute(sql, params)\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/utils.py\", line 90, in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n  File \"/home/jmunsch/PycharmProjects/test-django/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n    return self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: subquery must return only one column\nLINE 1: ...OUP BY \"things_thing\".\"id\", T5.\"realm_access_id\", (SELECT U0...\n                                                             ^\n>>>\n```\n\nFile tar di un modello standard per riprodurre il problema  \nGrazie per i dettagli aggiuntivi. Ho allegato un esempio di test senza campi e modelli non necessari per riprodurre questo problema. Regressione in `35431298226165986ad07e91f9d3aca721ff38ec`.  \nTest di regressione.",
    "created_at": "2021-05-05T03:50:44Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"test_having_subquery_select (aggregation_regress.tests.AggregationTests)\"]",
    "PASS_TO_PASS": "[\"test_ticket_24748 (aggregation_regress.tests.SelfReferentialFKTests)\", \"test_existing_join_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_non_nullable_fk_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_ticket_21150 (aggregation_regress.tests.JoinPromotionTests)\", \"test_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_annotation (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_fexpr (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_on_relation (aggregation_regress.tests.AggregationTests)\", \"Regression test for #12822: DatabaseError: aggregates not allowed in\", \"Regression test for #10870:  Aggregates with joins ignore extra\", \"test_allow_distinct (aggregation_regress.tests.AggregationTests)\", \"test_annotate_and_join (aggregation_regress.tests.AggregationTests)\", \"test_annotate_distinct_aggregate (aggregation_regress.tests.AggregationTests)\", \"The base table's join isn't promoted to LOUTER. This could\", \"test_annotate_on_relation (aggregation_regress.tests.AggregationTests)\", \"Regression #18333 - Ensure annotated column name is properly quoted.\", \"Find ages that are shared by at least two authors.\", \"Regression test for #11916: Extra params + aggregation creates\", \"test_annotated_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_annotation (aggregation_regress.tests.AggregationTests)\", \"test_annotation_disjunction (aggregation_regress.tests.AggregationTests)\", \"test_annotation_with_value (aggregation_regress.tests.AggregationTests)\", \"test_boolean_conversion (aggregation_regress.tests.AggregationTests)\", \"test_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_conditional_aggregate_on_complex_condition (aggregation_regress.tests.AggregationTests)\", \"test_db_col_table (aggregation_regress.tests.AggregationTests)\", \"Filtering on an aggregate annotation with Decimal values should work.\", \"test_distinct_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_duplicate_alias (aggregation_regress.tests.AggregationTests)\", \"test_empty (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_count (aggregation_regress.tests.AggregationTests)\", \"test_f_expression_annotation (aggregation_regress.tests.AggregationTests)\", \"test_field_error (aggregation_regress.tests.AggregationTests)\", \"test_field_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_filtering_by_annotation_name (aggregation_regress.tests.AggregationTests)\", \"test_fk_attname_conflict (aggregation_regress.tests.AggregationTests)\", \"An F() object referring to related column works correctly in group by.\", \"test_having_group_by (aggregation_regress.tests.AggregationTests)\", \"test_m2m_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more_more (aggregation_regress.tests.AggregationTests)\", \"test_name_expressions (aggregation_regress.tests.AggregationTests)\", \"test_name_filters (aggregation_regress.tests.AggregationTests)\", \"test_negated_aggregation (aggregation_regress.tests.AggregationTests)\", \"test_none_call_before_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_pickle (aggregation_regress.tests.AggregationTests)\", \"test_quoting_aggregate_order_by (aggregation_regress.tests.AggregationTests)\", \"test_reverse_join_trimming (aggregation_regress.tests.AggregationTests)\", \"test_reverse_relation_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_sliced_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_stddev (aggregation_regress.tests.AggregationTests)\", \"test_ticket_11293 (aggregation_regress.tests.AggregationTests)\", \"Splitting a q object to parts for where/having doesn't alter\", \"test_values_annotate_values (aggregation_regress.tests.AggregationTests)\", \"Annotate *args ordering should be preserved in values_list results.\", \"test_values_queryset_non_conflict (aggregation_regress.tests.AggregationTests)\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15252",
    "base_commit": "361bb8f786f112ee275be136795c0b1ecefff928",
    "patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -96,8 +96,12 @@ def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False\n         (un)applied and in a second step run all the database operations.\n         \"\"\"\n         # The django_migrations table must be present to record applied\n-        # migrations.\n-        self.recorder.ensure_schema()\n+        # migrations, but don't create it if there are no migrations to apply.\n+        if plan == []:\n+            if not self.recorder.has_table():\n+                return self._create_project_state(with_applied_migrations=False)\n+        else:\n+            self.recorder.ensure_schema()\n \n         if plan is None:\n             plan = self.migration_plan(targets)\n",
    "test_patch": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -57,12 +57,12 @@ def test_custom_test_name_with_test_prefix(self):\n @mock.patch.object(connection, 'ensure_connection')\n @mock.patch.object(connection, 'prepare_database')\n @mock.patch('django.db.migrations.recorder.MigrationRecorder.has_table', return_value=False)\n-@mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n @mock.patch('django.core.management.commands.migrate.Command.sync_apps')\n class TestDbCreationTests(SimpleTestCase):\n     available_apps = ['backends.base.app_unmigrated']\n \n-    def test_migrate_test_setting_false(self, mocked_sync_apps, mocked_migrate, *mocked_objects):\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n+    def test_migrate_test_setting_false(self, mocked_migrate, mocked_sync_apps, *mocked_objects):\n         test_connection = get_connection_copy()\n         test_connection.settings_dict['TEST']['MIGRATE'] = False\n         creation = test_connection.creation_class(test_connection)\n@@ -86,7 +86,32 @@ def test_migrate_test_setting_false(self, mocked_sync_apps, mocked_migrate, *moc\n             with mock.patch.object(creation, '_destroy_test_db'):\n                 creation.destroy_test_db(old_database_name, verbosity=0)\n \n-    def test_migrate_test_setting_true(self, mocked_sync_apps, mocked_migrate, *mocked_objects):\n+    @mock.patch('django.db.migrations.executor.MigrationRecorder.ensure_schema')\n+    def test_migrate_test_setting_false_ensure_schema(\n+        self, mocked_ensure_schema, mocked_sync_apps, *mocked_objects,\n+    ):\n+        test_connection = get_connection_copy()\n+        test_connection.settings_dict['TEST']['MIGRATE'] = False\n+        creation = test_connection.creation_class(test_connection)\n+        if connection.vendor == 'oracle':\n+            # Don't close connection on Oracle.\n+            creation.connection.close = mock.Mock()\n+        old_database_name = test_connection.settings_dict['NAME']\n+        try:\n+            with mock.patch.object(creation, '_create_test_db'):\n+                creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n+            # The django_migrations table is not created.\n+            mocked_ensure_schema.assert_not_called()\n+            # App is synced.\n+            mocked_sync_apps.assert_called()\n+            mocked_args, _ = mocked_sync_apps.call_args\n+            self.assertEqual(mocked_args[1], {'app_unmigrated'})\n+        finally:\n+            with mock.patch.object(creation, '_destroy_test_db'):\n+                creation.destroy_test_db(old_database_name, verbosity=0)\n+\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n+    def test_migrate_test_setting_true(self, mocked_migrate, mocked_sync_apps, *mocked_objects):\n         test_connection = get_connection_copy()\n         test_connection.settings_dict['TEST']['MIGRATE'] = True\n         creation = test_connection.creation_class(test_connection)\n@@ -109,6 +134,7 @@ def test_migrate_test_setting_true(self, mocked_sync_apps, mocked_migrate, *mock\n                 creation.destroy_test_db(old_database_name, verbosity=0)\n \n     @mock.patch.dict(os.environ, {'RUNNING_DJANGOS_TEST_SUITE': ''})\n+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')\n     @mock.patch.object(BaseDatabaseCreation, 'mark_expected_failures_and_skips')\n     def test_mark_expected_failures_and_skips_call(self, mark_expected_failures_and_skips, *mocked_objects):\n         \"\"\"\ndiff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -759,6 +759,17 @@ def apply(self, project_state, schema_editor, collect_sql=False):\n             False,\n         )\n \n+    @mock.patch.object(MigrationRecorder, 'has_table', return_value=False)\n+    def test_migrate_skips_schema_creation(self, mocked_has_table):\n+        \"\"\"\n+        The django_migrations table is not created if there are no migrations\n+        to record.\n+        \"\"\"\n+        executor = MigrationExecutor(connection)\n+        # 0 queries, since the query for has_table is being mocked.\n+        with self.assertNumQueries(0):\n+            executor.migrate([], plan=[])\n+\n \n class FakeLoader:\n     def __init__(self, graph, applied):\n",
    "problem_statement": "MigrationRecorder non rispetta le regole `db_router allow_migrate`\nDescrizione\n\nCiao,\nabbiamo una configurazione multi-db. Abbiamo una connessione per il progetto Django e diverse connessioni che comunicano con altri database per ottenere informazioni (ad esempio modelli con `managed = False`). Django dovrebbe creare tabelle solo nella prima connessione, mai in nessuna delle altre connessioni. Abbiamo un router semplice che fa quanto segue:\n```python\nclass Router(object):\n    def allow_migrate(self, db, model):\n        if db == 'default':\n            return True\n        return False\n```\nComportamento attuale\nEseguiamo i nostri test funzionali e il comando `migrate` viene chiamato per ogni connessione quando vengono creati i database di test (vedi `django/test/runner.py`, `setup_databases`, riga 300 circa, che chiama `django/db/backends/creation.py`, `create_test_db`, riga 377 circa)\nQuando viene eseguito `migrate`, cerca di applicare le nostre migrazioni, che cercano di registrare che una migrazione è stata applicata (vedi `django/db/migrations/executor.py`, `apply_migration`, che ha diverse chiamate a `self.recorder.record_applied`).\nLa prima cosa che fa `record_applied` è una chiamata a `self.ensure_schema()` (vedi `django/db/migrations/recorder.py`, `record_applied`, riga 66 circa).\n`ensure_schema` controlla se il modello `Migration` è presente nelle tabelle della connessione. Se non trova la tabella, cerca di crearla.\nCredo che questo sia un comportamento errato quando è stato fornito un `db_router`. Se si utilizza il router sopra, mi aspetterei che la tabella non venga creata in nessuna connessione diversa dalla connessione 'default'. Guardando gli altri metodi su `MigrationRecorder`, mi aspetterei che ci siano problemi simili con `applied_migrations` e `record_unapplied`.",
    "hints_text": "Non credo che tu abbia implementato correttamente il tuo router, ma dovrei controllare il codice del router per vedere se viene chiamato più volte (num_dbs*num_models) per esserne sicuro. Questo è il modo in cui implementiamo i nostri router per allow_migrate:\n\n```python\ndef allow_migrate(self, db, model):\n    if db == 'other':\n        return model._meta.app_label == 'legacy_app'  # consenti la migrazione per i nuovi modelli Django implementati nel database legacy\n    elif model._meta.app_label == 'legacy_app':  # non consentire la migrazione per i modelli legacy su qualsiasi altro database\n        return False\n    return None  # questo router non è responsabile\n```\n\nQuindi, non sono sicuro se ci sia un bug o meno (lascerò che qualcun altro più esperto risponda), ma questo è ciò che funziona per noi.\n\n#22583 è in qualche modo correlato. Si occupa dell'impossibilità di saltare le operazioni RunSQL/RunPython su un determinato database.\n\n@jarshwah: Non penso che sia il router. Principalmente perché il router non viene chiamato a questo punto. E questo, secondo me, è il problema.\n\n@akaariai: Concordo che ci siano somiglianze. Sicuramente dovrei essere in grado di gestire le connessioni su cui eseguo effettivamente le migrazioni. Sembra che sia questo lo scopo del router del database. Pensavo che qualcosa del genere avrebbe risolto il nostro problema:\n\n```python\nfrom django.db import router\n\n...\n\ndef ensure_schema(self):\n    \"\"\"\n    Assicura che la tabella esista e abbia lo schema corretto.\n    \"\"\"\n    # Se la tabella esiste, va bene - non abbiamo mai modificato il suo schema\n    # nel codice.\n    if self.Migration._meta.db_table in self.connection.introspection.get_table_list(self.connection.cursor()):\n        return\n    # Crea la tabella\n    # Modifica di seguito, simile a come funziona allowed_to_migrate in django/db/migrations/operations/base.py\n    if router.allow_migrate(self.connection, self.Migration):\n        with self.connection.schema_editor() as editor:\n            editor.create_model(self.Migration)\n```\n\nMa questo significa che è necessario apportare modifiche a applied_migrations, record_applied e record_unapplied, in modo che non tenti di scrivere in una tabella inesistente. Per noi non è un problema urgente, poiché abbiamo i permessi appropriati per quelle connessioni che non sono la nostra connessione principale. Ma ho una preoccupazione per qualsiasi momento in cui utilizziamo una connessione veramente di sola lettura, dove non abbiamo il permesso di CREATE TABLE. Perché questo codice, così com'è, si bloccherà in questa situazione. Ho testato con una connessione di sola lettura nella nostra configurazione del database e ho ottenuto un errore di permessi insufficienti.\n\nGrazie,\nDylan\n\nQuesto è un problema, ma tieni presente che migrate deve essere eseguito separatamente per ogni alias del database, quindi non accadrà a meno che tu non esegua esplicitamente migrate su un database che sai non dovrebbe avere migrazioni. Penso che la migliore correzione sarebbe far sì che le migrazioni si rifiutino di eseguire del tutto e si interrompano se il modello di migrazione non è consentito da creare sul database di destinazione.\n\nCapisco cosa intendi riguardo alla necessità di eseguire migrate per ogni database. Ho notato questo con il runner dei test di Django, dove sta cercando di eseguire una migrazione contro ogni alias di connessione che abbiamo. Quindi potrebbe essere un problema con il runner dei test tanto quanto con le migrazioni. Questo porta a un **ProgrammingError** dove non riesce a trovare tabelle che non dovrebbe controllare in primo luogo.\n\nGrazie,\nDylan\n\nMi sono imbattuto in questo problema. Con un router scritto correttamente, mi aspettavo che le migrazioni di ogni app venissero eseguite nel database giusto semplicemente usando:\n\n```bash\nmanage.py migrate\n```\n\nPotrebbe essere questo il comportamento? Invece, presume che stia usando il database predefinito, OK, no, ma ok :-)... e non segue la regola allow_migrate e crea nel database predefinito le tabelle che dovrebbero vivere esclusivamente in un altro (NON OK!). Quindi, per ora, il mio workaround è usare uno script shell dove l'app e il database sono specificati:\n\n```bash\n./manage.py migrate inapppurchase --database=iap\n./manage.py migrate myapp --database=default\n```\n\ndperetti: Proprio come syncdb, migrate viene eseguito solo su un database alla volta, quindi devi eseguirlo individualmente per ogni database, come suggerisci. Questo è per design.\n\nfroomzy: Sì, è probabile che sia un problema del runner dei test, che sta facendo questo tipo di migrate-on-everything. Penso che la correzione suggerita di rifiutare di migrare i database dove allow_migrate sul modello di migrazione restituisce False funzionerà ancora, purché generi un errore che possiamo catturare nel runner dei test.\n\nRispondendo a andrewgodwin:\n\ndperetti: Proprio come syncdb, migrate viene eseguito solo su un database alla volta, quindi devi eseguirlo individualmente per ogni database, come suggerisci. Questo è per design.\n\nLa domanda è: è il miglior design? Quando eseguo migrate, non voglio sapere come è configurato il router. Voglio solo migrare l'app. Se il router distribuisce le tabelle di un'app su database diversi, allora voglio che migrate operi su quelli. In altre parole, penso che avrebbe senso rendere migrate agnostico rispetto al database.\n\nUn altro problema laterale: non possiamo semplicemente eseguire `manage.py migrate someapp` se `someapp` è un'app \"django <1.7\" senza migrazioni: il vecchio comportamento di syncdb non viene applicato quando viene specificata un'applicazione. Quindi, se voglio sincronizzare le vecchie app, devo semplicemente eseguire `manage.py migrate`, senza argomenti... il che creerà tabelle non desiderate quando abbiamo più database.\n\nCiao ragazzi, mi chiedevo se ci fosse qualche possibilità che questo venga incluso in 1.8? O presto dopo?\n\nGrazie,\nDylan\n\nNon mi è chiaro cosa comporti esattamente la correzione di questo problema. Comunque, non sembra che qualcuno ci stia lavorando, quindi non c'è una scadenza per la sua risoluzione.\n\nVolevo intervenire qui per ampliare la portata del bug, poiché ne sono stato recentemente colpito in un contesto diverso. Il problema più grande non è solo che il framework cerca di creare la tabella delle migrazioni dove non è necessaria, ma che segna come applicate migrazioni che in realtà non lo sono. Questo mette il database in uno stato inconsistente, almeno per quanto riguarda le migrazioni. È un'inconsistenza innocua per la specifica configurazione utilizzata in quel momento, ma getta il seme per grandi problemi in futuro. Ad esempio, se in seguito decidi di cambiare il tuo schema di routing, o (come è successo nel mio caso) se hai più progetti con impostazioni diverse che utilizzano la stessa app sullo stesso database.\n\nIn termini di soluzione, ciò che sembra semplice al mio occhio non addestrato è che il framework di migrazione non registri semplicemente le migrazioni come applicate se non le ha applicate (e come corollario, non dovrebbe cercare di creare la tabella di migrazione su un database se non deve registrare alcuna migrazione lì). La correzione suggerita sopra (\"far sì che le migrazioni si rifiutino di eseguire del tutto e si interrompano se il modello di migrazione non è consentito da creare sul database di destinazione\") non affronta il problema più ampio.\n\nLasciate che modifichi il mio ultimo commento: penso che far sì che migrate si blocchi in questa situazione risolverebbe in effetti il problema di avere una tabella delle migrazioni inconsistente, che è la cosa più importante. La mia domanda è: poiché allow_migrate() opera a livello di modello e il comando migrate opera a livello di app, questo non renderebbe impossibile migrare alcuni modelli di un'app ma non altri?\n\nPosso confermare le scoperte di marfire.\n\n1. Ad esempio, anche con questo router applicato:\n\n```python\nclass TestRouter(object):\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        return False\n```\n\nE poi eseguendo:\n\n```bash\nmigrate --database=replica\n```\n\nTutte le migrazioni delle app e dei modelli vengono applicate a questo database replica, mentre secondo il router non dovrebbe accadere nulla.\n\n2. Dalla documentazione non è chiaro se sia possibile isolare determinati modelli da determinati database, o se l'isolamento può essere fatto solo a livello di app. Dalla descrizione nella documentazione, sembra possibile utilizzare l'argomento model_name per questo, ma dal modo in cui Django memorizza le sue migrazioni, non vedo come ciò potrebbe funzionare.\n\nSolo per confermare ulteriormente: ho lottato con questo problema per un paio di giorni. Ho più database e più app. Quando eseguo i test, il router allow_migrate funziona correttamente per controllare quali migrazioni possono essere applicate a quale database/app. La parte effettiva della migrazione funziona bene, ma quando arriva il momento di scrivere effettivamente la cronologia delle migrazioni, sembra avere solo un concetto del database predefinito. Quando esegue ensure_schema, si aspetta che le tabelle esistano sul DB predefinito quando in realtà esistono solo per determinate altre app/database. Questo porta a un **ProgrammingError** dove non riesce a trovare tabelle che non dovrebbe controllare in primo luogo.\n\nPotete dare un'occhiata a http://stackoverflow.com/questions/40893868/using-redshift-as-an-additional-django-database?noredirect=1#comment69004673_40893868, che fornisce un caso d'uso decente per questo bug.\n\nDalla versione 3.1, puoi impostare 'TEST': {'MIGRATE': False} per evitare di eseguire le migrazioni su una determinata connessione del database, quindi ciò risolve il problema del runner dei test. Tuttavia, anche se lo fai, le app vengono comunque sincronizzate (vedi correzione a #32012), Django finisce per chiamare migrate per fare la sincronizzazione, e questo causerà query in MigrationRecorder.ensure_schema() che potrebbero creare tabelle (o fallire con errori di permesso, vedi #27141).\n\nHo intenzione di aprire una PR per fare circa questo dal commento:13: non dovrebbe cercare di creare la tabella di migrazione su un database se non deve registrare alcuna migrazione lì.",
    "created_at": "2021-12-28T15:51:06Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_migrate_test_setting_false_ensure_schema (backends.base.test_creation.TestDbCreationTests)\", \"The django_migrations table is not created if there are no migrations\"]",
    "PASS_TO_PASS": "[\"test_mark_expected_failures_and_skips (backends.base.test_creation.TestMarkTests)\", \"test_custom_test_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_custom_test_name_with_test_prefix (backends.base.test_creation.TestDbSignatureTests)\", \"test_default_name (backends.base.test_creation.TestDbSignatureTests)\", \"If the current state satisfies the given target, do nothing.\", \"Minimize unnecessary rollbacks in connected apps.\", \"Minimize rollbacks when target has multiple in-app children.\", \"mark_expected_failures_and_skips() isn't called unless\", \"test_migrate_test_setting_false (backends.base.test_creation.TestDbCreationTests)\", \"test_migrate_test_setting_true (backends.base.test_creation.TestDbCreationTests)\", \"test_circular_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_circular_reference_with_natural_key (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_self_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_serialize_db_to_string_base_manager (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests)\", \"Applying all replaced migrations marks replacement as applied (#24628).\", \"An atomic operation is properly rolled back inside a non-atomic\", \"Regression test for #22325 - references to a custom user model defined in the\", \"executor.detect_soft_applied() detects ManyToManyField tables from an\", \"Re-planning a full migration of a fully-migrated set doesn't\", \"test_migrate_backward_to_squashed_migration (migrations.test_executor.ExecutorTests)\", \"A new squash migration will be marked as applied even if all its\", \"test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests)\", \"Migrations are applied and recorded atomically.\", \"Migrations are not recorded if deferred SQL application fails.\", \"Although the MigrationExecutor interfaces allows for mixed migration\", \"Applying a non-atomic migration works as expected.\", \"#24129 - Tests callback process\", \"Tests running a simple set of migrations.\", \"Tests running a squashed migration from zero (should ignore what it replaces)\", \"Tests detection of initial migrations already having been applied.\", \"#26647 - Unrelated applied migrations should be part of the final\", \"#24123 - All models of apps being unapplied which are\", \"#24123 - All models of apps already applied which are\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14155",
    "base_commit": "2f13c476abe4ba787b6cb71131818341911f43cc",
    "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -59,9 +59,16 @@ def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+        if isinstance(self.func, functools.partial):\n+            func = repr(self.func)\n+        else:\n+            func = self._func_path\n+        return (\n+            'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '\n+            'app_names=%r, namespaces=%r, route=%r)' % (\n+                func, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         )\n \n \n",
    "test_patch": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1141,10 +1141,30 @@ def test_repr(self):\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n-            \"args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], \"\n-            \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n+            \"args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], \"\n+            \"namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$')\",\n         )\n \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n",
    "problem_statement": "ResolverMatch.__repr__() non gestisce correttamente `functools.partial()`.\nDescrizione\n\n\t\t(ultima modifica di Nick Pope)\n\nQuando una funzione parziale viene passata come vista, `__repr__` mostra l'argomento `func` come `functools.partial`, il che non è molto utile, soprattutto perché non rivela la funzione sottostante o gli argomenti forniti.\nPoiché una funzione parziale ha anche argomenti forniti in anticipo, dobbiamo gestirli in modo speciale in modo che siano accessibili in `__repr__`.\nMi sembra che possiamo semplicemente unwrappare gli oggetti `functools.partial` in `ResolverMatch.__init__()`.",
    "hints_text": null,
    "created_at": "2021-03-19T15:44:25Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"test_repr (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_resolver_match_on_request (urlpatterns_reverse.tests.ResolverMatchTests)\"]",
    "PASS_TO_PASS": "[\"test_include_2_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_2_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_4_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_urls (urlpatterns_reverse.tests.IncludeTests)\", \"URLResolver should raise an exception when no urlpatterns exist.\", \"test_invalid_regex (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_noncallable_view (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_attributeerror_not_hidden (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_non_string_value (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_not_callable (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_parent_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_string_without_dot (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_loading (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_callable_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_named_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_invalid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_invalid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_no_illegal_imports (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_url (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_view_name (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_view_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_reverse_by_path_nested (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_resolver_match_on_request_before_resolution (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_urlpattern_resolve (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_illegal_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_illegal_kwargs_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_mixing_args_and_kwargs (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_no_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_non_urlsafe_prefix_with_args (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_patterns_reported (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_braces (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_format_char (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_parenthesis (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_reverse_none (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_script_name_escaping (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_urlpattern_reverse (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_view_not_found_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_build_absolute_uri (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_inserting_reverse_lazy_into_string (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_redirect_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_user_permission_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"Names deployed via dynamic URL objects that require namespaces can't\", \"A default application namespace can be used for lookup.\", \"A default application namespace is sensitive to the current app.\", \"An application namespace without a default is sensitive to the current\", \"Namespaces can be applied to include()'d urlpatterns that set an\", \"Dynamic URL objects can return a (pattern, app_name) 2-tuple, and\", \"Namespace defaults to app_name when including a (pattern, app_name)\", \"current_app shouldn't be used unless it matches the whole path.\", \"Namespaces can be installed anywhere in the URL pattern tree.\", \"Namespaces can be embedded.\", \"Dynamic URL objects can be found using a namespace.\", \"Namespaces can be applied to include()'d urlpatterns.\", \"Using include() with namespaces when there is a regex variable in front\", \"Namespace prefixes can capture variables.\", \"A nested current_app should be split in individual namespaces (#24904).\", \"Namespaces can be nested.\", \"Nonexistent namespaces raise errors.\", \"Normal lookups work as expected.\", \"Normal lookups work on names included from other patterns.\", \"test_special_chars_namespace (urlpatterns_reverse.tests.NamespaceTests)\", \"The list of URLs that come back from a Resolver404 exception contains\", \"test_namespaced_view_detail (urlpatterns_reverse.tests.ResolverTests)\", \"A Resolver404 is raised if resolving doesn't meet the basic\", \"URLResolver._populate() can be called concurrently, but not more\", \"Test repr of URLResolver, especially when urlconf_name is a list\", \"test_resolver_reverse (urlpatterns_reverse.tests.ResolverTests)\", \"URL pattern name arguments don't need to be unique. The last registered\", \"Verifies lazy object returned by reverse_lazy is coerced to\", \"test_view_detail_as_method (urlpatterns_reverse.tests.ResolverTests)\", \"Test reversing an URL from the *overridden* URLconf from inside\", \"Test reversing an URL from the *default* URLconf from inside\", \"test_urlconf (urlpatterns_reverse.tests.RequestURLconfTests)\", \"The URLconf is reset after each request.\", \"test_urlconf_overridden (urlpatterns_reverse.tests.RequestURLconfTests)\", \"Overriding request.urlconf with None will fall back to the default\", \"test_no_handler_exception (urlpatterns_reverse.tests.NoRootUrlConfTests)\", \"If the urls.py doesn't specify handlers, the defaults are used\", \"test_lazy_in_settings (urlpatterns_reverse.tests.ReverseLazySettingsTest)\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13964",
    "base_commit": "f39634ff229887bf7790c069d0c411b38494ca38",
    "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -933,7 +933,7 @@ def _prepare_related_fields_for_save(self, operation_name):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) in field.empty_values:\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n",
    "test_patch": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -68,6 +68,10 @@ class Parent(models.Model):\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n class Child(models.Model):\n     name = models.CharField(max_length=20)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n@@ -77,6 +81,10 @@ class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n+\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \ndiff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -7,9 +7,9 @@\n from django.utils.translation import gettext_lazy\n \n from .models import (\n-    Article, Category, Child, ChildNullableParent, City, Country, District,\n-    First, Parent, Record, Relation, Reporter, School, Student, Third,\n-    ToFieldChild,\n+    Article, Category, Child, ChildNullableParent, ChildStringPrimaryKeyParent,\n+    City, Country, District, First, Parent, ParentStringPrimaryKey, Record,\n+    Relation, Reporter, School, Student, Third, ToFieldChild,\n )\n \n \n@@ -549,6 +549,16 @@ def test_save_nullable_fk_after_parent_with_to_field(self):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n     def test_fk_to_bigautofield(self):\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n",
    "problem_statement": "Salvare l'oggetto genitore dopo aver impostato il figlio porta alla perdita di dati per i genitori con chiave primaria non numerica.\nDescrizione\n\n\t\t(ultima modifica di Charlie DeTar)\n\nDato un modello con una relazione di chiave esterna a un altro modello che ha un CharField non automatico come chiave primaria:\n```python\nclass Product(models.Model):\n    sku = models.CharField(primary_key=True, max_length=50)\n\nclass Order(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n```\nSe la relazione viene inizializzata sul genitore con un'istanza vuota che non specifica ancora la sua chiave primaria, e la chiave primaria viene successivamente definita, il genitore non \"vede\" il cambiamento della chiave primaria:\n```python\nwith transaction.atomic():\n    order = Order()\n    order.product = Product()\n    order.product.sku = \"foo\"\n    order.product.save()\n    order.save()\n    assert Order.objects.filter(product_id=\"\").exists()  # Riesce, ma non dovrebbe\n    assert Order.objects.filter(product=order.product).exists()  # Fallisce\n```\nInvece di `product_id` essere popolato con `product.sku`, viene impostato su stringa vuota. Il vincolo di chiave esterna che imporrebbe l'esistenza di un prodotto con `sku=\"\"` viene rinviato fino al commit della transazione. La transazione fallisce correttamente al commit con una `ForeignKeyViolation` a causa della non esistenza di un prodotto con stringa vuota come chiave primaria.\n\nD'altra parte, se l'istanza correlata non salvata viene inizializzata con la sua chiave primaria prima dell'assegnazione al genitore, viene persistita correttamente:\n```python\nwith transaction.atomic():\n    order = Order()\n    order.product = Product(sku=\"foo\")\n    order.product.save()\n    order.save()\n    assert Order.objects.filter(product=order.product).exists()  # riesce\n```\nIl commit della transazione riesce anche.\n\nQuesto potrebbe avere a che fare con il modo in cui il campo `Order.product_id` viene gestito all'assegnazione, insieme a qualcosa relativo alla gestione del recupero di chiavi primarie automatiche vs non automatiche dall'istanza correlata.",
    "hints_text": "Grazie per questa segnalazione. `product_id` è una stringa vuota in `_prepare_related_fields_for_save()`, per questo motivo il `pk` dell'oggetto correlato non viene utilizzato. Potremmo utilizzare `empty_values`:\n\n```diff\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 822aad080d..8e7a8e3ae7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -933,7 +933,7 @@ class Model(metaclass=ModelBase):\n \"%s() prohibited to prevent data loss due to unsaved \"\n \"related object '%s'.\" % (operation_name, field.name)\n )\n- elif getattr(self, field.attname) is None:\n+ elif getattr(self, field.attname) in field.empty_values:\n # Use pk from related object if it has been saved after\n # an assignment.\n setattr(self, field.attname, obj.pk)\n```\n\nMa non sono sicuro. Correlato a #28147.",
    "created_at": "2021-02-02T17:07:43Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"test_save_fk_after_parent_with_non_numeric_pk_set_on_child (many_to_one.tests.ManyToOneTests)\"]",
    "PASS_TO_PASS": "[\"test_add (many_to_one.tests.ManyToOneTests)\", \"test_add_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_add_remove_set_by_pk_raises (many_to_one.tests.ManyToOneTests)\", \"test_add_then_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_assign (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_none (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_value (many_to_one.tests.ManyToOneTests)\", \"test_cached_foreign_key_with_to_field_not_cleared_by_save (many_to_one.tests.ManyToOneTests)\", \"Model.save() invalidates stale ForeignKey relations after a primary key\", \"test_clear_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_create (many_to_one.tests.ManyToOneTests)\", \"test_create_relation_with_gettext_lazy (many_to_one.tests.ManyToOneTests)\", \"test_deepcopy_and_circular_references (many_to_one.tests.ManyToOneTests)\", \"test_delete (many_to_one.tests.ManyToOneTests)\", \"test_explicit_fk (many_to_one.tests.ManyToOneTests)\", \"test_fk_assignment_and_related_object_cache (many_to_one.tests.ManyToOneTests)\", \"test_fk_instantiation_outside_model (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_bigautofield (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_smallautofield (many_to_one.tests.ManyToOneTests)\", \"test_get (many_to_one.tests.ManyToOneTests)\", \"test_hasattr_related_object (many_to_one.tests.ManyToOneTests)\", \"test_manager_class_caching (many_to_one.tests.ManyToOneTests)\", \"test_multiple_foreignkeys (many_to_one.tests.ManyToOneTests)\", \"test_related_object (many_to_one.tests.ManyToOneTests)\", \"test_relation_unsaved (many_to_one.tests.ManyToOneTests)\", \"test_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_reverse_assignment_deprecation (many_to_one.tests.ManyToOneTests)\", \"test_reverse_foreign_key_instance_to_field_caching (many_to_one.tests.ManyToOneTests)\", \"test_reverse_selects (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent_with_to_field (many_to_one.tests.ManyToOneTests)\", \"test_select_related (many_to_one.tests.ManyToOneTests)\", \"test_selects (many_to_one.tests.ManyToOneTests)\", \"test_set (many_to_one.tests.ManyToOneTests)\", \"test_set_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_values_list_exception (many_to_one.tests.ManyToOneTests)\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pylint-dev/pylint",
    "instance_id": "pylint-dev__pylint-6528",
    "base_commit": "273a8b25620467c1e5686aa8d2a1dbb8c02c78d0",
    "patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -46,6 +46,20 @@ def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> b\n     return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n \n \n+def _is_ignored_file(\n+    element: str,\n+    ignore_list: list[str],\n+    ignore_list_re: list[Pattern[str]],\n+    ignore_list_paths_re: list[Pattern[str]],\n+) -> bool:\n+    basename = os.path.basename(element)\n+    return (\n+        basename in ignore_list\n+        or _is_in_ignore_list_re(basename, ignore_list_re)\n+        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+    )\n+\n+\n def expand_modules(\n     files_or_modules: Sequence[str],\n     ignore_list: list[str],\n@@ -61,10 +75,8 @@ def expand_modules(\n \n     for something in files_or_modules:\n         basename = os.path.basename(something)\n-        if (\n-            basename in ignore_list\n-            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)\n-            or _is_in_ignore_list_re(something, ignore_list_paths_re)\n+        if _is_ignored_file(\n+            something, ignore_list, ignore_list_re, ignore_list_paths_re\n         ):\n             continue\n         module_path = get_python_path(something)\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -31,7 +31,7 @@\n )\n from pylint.lint.base_options import _make_linter_options\n from pylint.lint.caching import load_results, save_results\n-from pylint.lint.expand_modules import expand_modules\n+from pylint.lint.expand_modules import _is_ignored_file, expand_modules\n from pylint.lint.message_state_handler import _MessageStateHandler\n from pylint.lint.parallel import check_parallel\n from pylint.lint.report_functions import (\n@@ -564,8 +564,7 @@ def initialize(self) -> None:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n@@ -579,6 +578,16 @@ def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+\n+                    if _is_ignored_file(\n+                        root,\n+                        self.config.ignore,\n+                        self.config.ignore_patterns,\n+                        self.config.ignore_paths,\n+                    ):\n+                        skip_subtrees.append(root)\n+                        continue\n+\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n",
    "test_patch": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,6 +864,49 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"failing.py\"),\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore-patterns\", \"failing.*\"),\n+        (\"--ignore-patterns\", \"ignored_*\"),\n+        (\"--ignore-paths\", \".*directory/ignored.*\"),\n+        (\"--ignore-paths\", \".*ignored.*/failing.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    run = Run(\n+        [\n+            \"--recursive\",\n+            \"y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(REGRTEST_DATA_DIR, \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(REGRTEST_DATA_DIR, \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(REGRTEST_DATA_DIR, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(REGRTEST_DATA_DIR, *regrtest_data_module))\n+    assert module in linted_file_paths\n+\n+\n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\ndiff --git a/tests/regrtest_data/directory/ignored_subdirectory/failing.py b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1228,17 +1228,91 @@ def test_max_inferred_for_complicated_class_hierarchy() -> None:\n         assert not ex.value.code % 2\n \n     def test_regression_recursive(self):\n+        \"\"\"Tests if error is raised when linter is executed over directory not using --recursive=y\"\"\"\n         self._test_output(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=n\"],\n             expected_output=\"No such file or directory\",\n         )\n \n     def test_recursive(self):\n+        \"\"\"Tests if running linter over directory using --recursive=y\"\"\"\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n         )\n \n+    def test_ignore_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_pattern_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-parameter parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-path parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n@@ -1249,7 +1323,7 @@ def test_recursive_current_dir(self):\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n",
    "problem_statement": "Pylint non rispetta le esclusioni in modalità `--recursive=y`\n### Descrizione del bug\n\nPylint non rispetta le impostazioni `--ignore`, `--ignore-paths` o `--ignore-patterns` quando viene eseguito in modalità ricorsiva. Questo contraddice la documentazione e compromette seriamente l'utilità della modalità ricorsiva.\n\n### Configurazione\n\n_Nessuna risposta_\n\n### Comando utilizzato\n\n```shell\n### .a/foo.py\n# import re\n\n### bar.py\n# import re\n\npylint --recursive=y .\npylint --recursive=y --ignore=.a .\npylint --recursive=y --ignore-paths=.a .\npylint --recursive=y --ignore-patterns=\"^\\.a\" .\n```\n\n### Output di Pylint\n\nTutti questi comandi producono lo stesso output:\n\n```\n************* Module bar\nbar.py:1:0: C0104: Disallowed name \"bar\" (disallowed-name)\nbar.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nbar.py:1:0: W0611: Unused import re (unused-import)\n************* Module foo\n.a/foo.py:1:0: C0104: Disallowed name \"foo\" (disallowed-name)\n.a/foo.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n.a/foo.py:1:0: W0611: Unused import re (unused-import)\n```\n\n### Comportamento atteso\n\n`foo.py` dovrebbe essere ignorato da tutti i comandi sopra riportati, poiché si trova in una directory ignorata (anche il primo comando senza impostazioni di ignorazione dovrebbe saltarlo, poiché il valore predefinito di `ignore-patterns` è `\"^\\.\"`.\n\nPer riferimento, la documentazione per le varie impostazioni di ignorazione da `pylint --help`:\n\n```\n    --ignore=<file>[,<file>...]\n                        Files or directories to be skipped. They should be\n                        base names, not paths. [current: CVS]\n    --ignore-patterns=<pattern>[,<pattern>...]\n                        Files or directories matching the regex patterns are\n                        skipped. The regex matches against base names, not\n                        paths. The default value ignores emacs file locks\n                        [current: ^\\.#]\n    --ignore-paths=<pattern>[,<pattern>...]\n                        Add files or directories matching the regex patterns\n                        to the ignore-list. The regex matches against paths\n                        and can be in Posix or Windows format. [current: none]\n```\n\n### Versione di Pylint\n\n```shell\npylint 2.13.7\npython 3.9.12\n```\n\n### OS / Ambiente\n\n_Nessuna risposta_\n\n### Dipendenze aggiuntive\n\n_Nessuna risposta_",
    "hints_text": "Supongo que los caminos ignorados deben filtrarse aquí:\r\nhttps://github.com/PyCQA/pylint/blob/0220a39f6d4dddd1bf8f2f6d83e11db58a093fbe/pylint/lint/pylinter.py#L676",
    "created_at": "2022-05-06T21:03:37Z",
    "version": "2.14",
    "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive\"]",
    "PASS_TO_PASS": "[\"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_custom_should_analyze_file\", \"tests/lint/unittest_lint.py::test_multiprocessing[1]\", \"tests/lint/unittest_lint.py::test_multiprocessing[2]\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\", \"tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace\", \"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntaxerror\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-except-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory_with_pythonpath\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-tests/regrtest_data/unused_variable.py:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-tests/regrtest_data/unused_variable.py(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_max_inferred_for_complicated_class_hierarchy\", \"tests/test_self.py::TestRunTC::test_regression_recursive\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_regression_recursive_current_dir\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
    "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-14531",
    "base_commit": "205da797006360fc629110937e39a19c9561313e",
    "patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -86,7 +86,7 @@ def _print_Or(self, expr):\n         return self.stringify(expr.args, \" | \", PRECEDENCE[\"BitwiseOr\"])\n \n     def _print_AppliedPredicate(self, expr):\n-        return '%s(%s)' % (expr.func, expr.arg)\n+        return '%s(%s)' % (self._print(expr.func), self._print(expr.arg))\n \n     def _print_Basic(self, expr):\n         l = [self._print(o) for o in expr.args]\n@@ -141,7 +141,7 @@ def _print_Exp1(self, expr):\n         return 'E'\n \n     def _print_ExprCondPair(self, expr):\n-        return '(%s, %s)' % (expr.expr, expr.cond)\n+        return '(%s, %s)' % (self._print(expr.expr), self._print(expr.cond))\n \n     def _print_FiniteSet(self, s):\n         s = sorted(s, key=default_sort_key)\n@@ -204,10 +204,10 @@ def _print_Inverse(self, I):\n     def _print_Lambda(self, obj):\n         args, expr = obj.args\n         if len(args) == 1:\n-            return \"Lambda(%s, %s)\" % (args.args[0], expr)\n+            return \"Lambda(%s, %s)\" % (self._print(args.args[0]), self._print(expr))\n         else:\n             arg_string = \", \".join(self._print(arg) for arg in args)\n-            return \"Lambda((%s), %s)\" % (arg_string, expr)\n+            return \"Lambda((%s), %s)\" % (arg_string, self._print(expr))\n \n     def _print_LatticeOp(self, expr):\n         args = sorted(expr.args, key=default_sort_key)\n@@ -216,9 +216,10 @@ def _print_LatticeOp(self, expr):\n     def _print_Limit(self, expr):\n         e, z, z0, dir = expr.args\n         if str(dir) == \"+\":\n-            return \"Limit(%s, %s, %s)\" % (e, z, z0)\n+            return \"Limit(%s, %s, %s)\" % tuple(map(self._print, (e, z, z0)))\n         else:\n-            return \"Limit(%s, %s, %s, dir='%s')\" % (e, z, z0, dir)\n+            return \"Limit(%s, %s, %s, dir='%s')\" % tuple(map(self._print,\n+                                                            (e, z, z0, dir)))\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n@@ -237,7 +238,7 @@ def _print_MatrixBase(self, expr):\n \n     def _print_MatrixElement(self, expr):\n         return self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) \\\n-            + '[%s, %s]' % (expr.i, expr.j)\n+            + '[%s, %s]' % (self._print(expr.i), self._print(expr.j))\n \n     def _print_MatrixSlice(self, expr):\n         def strslice(x):\n@@ -341,7 +342,7 @@ def _print_NegativeInfinity(self, expr):\n         return '-oo'\n \n     def _print_Normal(self, expr):\n-        return \"Normal(%s, %s)\" % (expr.mu, expr.sigma)\n+        return \"Normal(%s, %s)\" % (self._print(expr.mu), self._print(expr.sigma))\n \n     def _print_Order(self, expr):\n         if all(p is S.Zero for p in expr.point) or not len(expr.variables):\n@@ -375,10 +376,10 @@ def _print_Permutation(self, expr):\n             s = expr.support()\n             if not s:\n                 if expr.size < 5:\n-                    return 'Permutation(%s)' % str(expr.array_form)\n-                return 'Permutation([], size=%s)' % expr.size\n-            trim = str(expr.array_form[:s[-1] + 1]) + ', size=%s' % expr.size\n-            use = full = str(expr.array_form)\n+                    return 'Permutation(%s)' % self._print(expr.array_form)\n+                return 'Permutation([], size=%s)' % self._print(expr.size)\n+            trim = self._print(expr.array_form[:s[-1] + 1]) + ', size=%s' % self._print(expr.size)\n+            use = full = self._print(expr.array_form)\n             if len(trim) < len(full):\n                 use = trim\n             return 'Permutation(%s)' % use\n@@ -399,7 +400,7 @@ def _print_TensAdd(self, expr):\n         return expr._print()\n \n     def _print_PermutationGroup(self, expr):\n-        p = ['    %s' % str(a) for a in expr.args]\n+        p = ['    %s' % self._print(a) for a in expr.args]\n         return 'PermutationGroup([\\n%s])' % ',\\n'.join(p)\n \n     def _print_PDF(self, expr):\n@@ -412,11 +413,13 @@ def _print_Pi(self, expr):\n \n     def _print_PolyRing(self, ring):\n         return \"Polynomial ring in %s over %s with %s order\" % \\\n-            (\", \".join(map(self._print, ring.symbols)), ring.domain, ring.order)\n+            (\", \".join(map(self._print, ring.symbols)),\n+            self._print(ring.domain), self._print(ring.order))\n \n     def _print_FracField(self, field):\n         return \"Rational function field in %s over %s with %s order\" % \\\n-            (\", \".join(map(self._print, field.symbols)), field.domain, field.order)\n+            (\", \".join(map(self._print, field.symbols)),\n+            self._print(field.domain), self._print(field.order))\n \n     def _print_FreeGroupElement(self, elm):\n         return elm.__str__()\n@@ -630,7 +633,8 @@ def _print_Relational(self, expr):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs),\n+                                   self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n@@ -722,7 +726,7 @@ def _print_Transpose(self, T):\n         return \"%s.T\" % self.parenthesize(T.arg, PRECEDENCE[\"Pow\"])\n \n     def _print_Uniform(self, expr):\n-        return \"Uniform(%s, %s)\" % (expr.a, expr.b)\n+        return \"Uniform(%s, %s)\" % (self._print(expr.a), self._print(expr.b))\n \n     def _print_Union(self, expr):\n         return 'Union(%s)' %(', '.join([self._print(a) for a in expr.args]))\n",
    "test_patch": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,12 +80,14 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n     assert python(Lt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x < y\"\n-    assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"]\n \n \n def test_python_functions():\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -490,7 +490,11 @@ def test_Rational():\n     assert str(2**Rational(1, 10**10)) == \"2**(1/10000000000)\"\n \n     assert sstr(Rational(2, 3), sympy_integers=True) == \"S(2)/3\"\n-    assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n+    x = Symbol(\"x\")\n+    assert sstr(x**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n+    assert sstr(Eq(x, Rational(2, 3)), sympy_integers=True) == \"Eq(x, S(2)/3)\"\n+    assert sstr(Limit(x, x, Rational(7, 2)), sympy_integers=True) == \\\n+        \"Limit(x, x, S(7)/2)\"\n \n \n def test_Float():\n",
    "problem_statement": "Le impostazioni di StrPrinter non vengono rispettate da alcune sottoespressioni\nAd esempio, \r\n```\r\n>>> sstr(x + S(1)/2, sympy_integers=True)\r\n'x + S(1)/2'\r\n>>> sstr(Eq(x, S(1)/2), sympy_integers=True)\r\n'Eq(x, 1/2)'\r\n```\r\n\r\nIl primo output è corretto, il secondo no: l'impostazione è stata ignorata. Un altro esempio:\r\n```\r\n>>> sstr(Limit(x, x, S(1)/2), sympy_integers=True)\r\n'Limit(x, x, 1/2)'\r\n```\r\ninvece del previsto `Limit(x, x, S(1)/2)`. \r\n\r\nQuesto influisce anche sulla generazione del codice:\r\n```\r\n>>> python(Eq(x, y))\r\n'e = Eq(x, y)'\r\n```\r\ninvece del previsto `x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)`.  (Stranamente, questo comportamento è affermato da un test.)\r\n\r\nUna correzione è in arrivo.",
    "hints_text": null,
    "created_at": "2018-03-18T18:15:33Z",
    "version": "1.1",
    "FAIL_TO_PASS": "[\"test_python_relational\", \"test_Rational\"]",
    "PASS_TO_PASS": "[\"test_python_basic\", \"test_python_keyword_symbol_name_escaping\", \"test_python_keyword_function_name_escaping\", \"test_python_functions\", \"test_python_derivatives\", \"test_python_integrals\", \"test_python_matrix\", \"test_python_limits\", \"test_printmethod\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_Mul\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_Pow\", \"test_sqrt\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixElement_printing\"]",
    "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-14539",
    "base_commit": "c0a24c1dc957a3b565294213f435fefb2ec99714",
    "patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1449,7 +1449,7 @@ def _diff(self):\n                 arrb.dtype, np.floating\n             ):\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n+            elif \"P\" in col.format or \"Q\" in col.format:\n                 diffs = (\n                     [\n                         idx\n",
    "test_patch": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -406,16 +406,17 @@ def test_identical_tables(self):\n         c8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n         c9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n         c10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n+        c11 = Column(\"K\", format=\"QJ(2)\", array=[[0, 1], [2, 3]])\n \n-        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]\n+        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]\n \n         ta = BinTableHDU.from_columns(columns)\n         tb = BinTableHDU.from_columns([c.copy() for c in columns])\n \n         diff = TableDataDiff(ta.data, tb.data)\n         assert diff.identical\n-        assert len(diff.common_columns) == 10\n-        assert diff.common_column_names == set(\"abcdefghij\")\n+        assert len(diff.common_columns) == 11\n+        assert diff.common_column_names == set(\"abcdefghijk\")\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n \n@@ -549,6 +550,7 @@ def test_different_table_data(self):\n         ca8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n         ca9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n         ca10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n+        ca11 = Column(\"K\", format=\"QJ(2)\", array=[[0, 1], [2, 3]])\n \n         cb1 = Column(\"A\", format=\"L\", array=[False, False])\n         cb2 = Column(\"B\", format=\"X\", array=[[0], [0]])\n@@ -560,12 +562,13 @@ def test_different_table_data(self):\n         cb8 = Column(\"H\", format=\"C\", array=[1.0 + 1.0j, 2.0 + 3.0j])\n         cb9 = Column(\"I\", format=\"M\", array=[5.0 + 5.0j, 6.0 + 7.0j])\n         cb10 = Column(\"J\", format=\"PI(2)\", array=[[1, 2], [3, 4]])\n+        cb11 = Column(\"K\", format=\"QJ(2)\", array=[[1, 2], [3, 4]])\n \n         ta = BinTableHDU.from_columns(\n-            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10]\n+            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10, ca11]\n         )\n         tb = BinTableHDU.from_columns(\n-            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10]\n+            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10, cb11]\n         )\n \n         diff = TableDataDiff(ta.data, tb.data, numdiffs=20)\n@@ -591,14 +594,20 @@ def test_different_table_data(self):\n         assert diff.diff_values[12][0] == (\"J\", 1)\n         assert (diff.diff_values[12][1][0] == [2, 3]).all()\n         assert (diff.diff_values[12][1][1] == [3, 4]).all()\n+        assert diff.diff_values[13][0] == (\"K\", 0)\n+        assert (diff.diff_values[13][1][0] == [0, 1]).all()\n+        assert (diff.diff_values[13][1][1] == [1, 2]).all()\n+        assert diff.diff_values[14][0] == (\"K\", 1)\n+        assert (diff.diff_values[14][1][0] == [2, 3]).all()\n+        assert (diff.diff_values[14][1][1] == [3, 4]).all()\n \n-        assert diff.diff_total == 13\n-        assert diff.diff_ratio == 0.65\n+        assert diff.diff_total == 15\n+        assert np.isclose(diff.diff_ratio, 0.682, atol=1e-3, rtol=0)\n \n         report = diff.report()\n         assert \"Column A data differs in row 0:\\n    a> True\\n    b> False\" in report\n         assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n-        assert \"13 different table data element(s) found (65.00% different)\" in report\n+        assert \"15 different table data element(s) found (68.18% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n     def test_identical_files_basic(self):\n",
    "problem_statement": "`io.fits.FITSDiff` kan soms verschillen rapporteren tussen identieke bestanden\n### Beschrijving\n\nIn sommige scenario's kan `io.fits.FITSDiff` verschillen rapporteren tussen identieke bestanden, zelfs bij het vergelijken van hetzelfde bestand met zichzelf. Dit kan worden veroorzaakt door onjuiste verwerking van VLAs (variabele-lengte arrays).\n\n### Verwacht gedrag\n\n`io.fits.FITSDiff` rapporteert alleen verschillen in bestanden als deze bestaan. Het vergelijken van een bestand met zichzelf mag nooit een verschil opleveren.\n\n### Hoe te reproduceren\n\n```python\nfrom astropy.io import fits\ncol = fits.Column('a', format='QD', array=[[0], [0, 0]])\nhdu = fits.BinTableHDU.from_columns([col])\nhdu.writeto('diffbug.fits', overwrite=True)\n\nprint(fits.FITSDiff('diffbug.fits', 'diffbug.fits').identical)\nfits.printdiff('diffbug.fits', 'diffbug.fits')\n```\nPrints uit:\n```\nFalse\n fitsdiff: 5.2.1\n a: diffbug.fits\n b: diffbug.fits\n Maximum number of different data values to be reported: 10\n Relative tolerance: 0.0, Absolute tolerance: 0.0\nExtension HDU 1:\n   Data contains differences:\n     Column a data differs in row 0:\n     1 different table data element(s) found (50.00% different).\n```\n\nIk vermoed dat de verwerking van VLAs de schuldige is, aangezien ik de bug niet kon reproduceren zonder ten minste één VLA-kolom te gebruiken.\n\n### Versies\n\nWindows-10-10.0.19044-SP0\r\nPython 3.10.10 (tags/v3.10.10:aad5f6a, Feb  7 2023, 17:20:36) [MSC v.1929 64 bit (AMD64)]\r\nastropy 5.2.1\r\nNumpy 1.24.2\r\npyerfa 2.0.0.1\r\nScipy 1.10.0\r\nMatplotlib 3.6.3",
    "hints_text": "Sembra che a causa dell'uso di `Q`, solo `P` venga gestito nel codice diff. Questo:\r\n```\r\n--- astropy/io/fits/diff.py\r\n+++ astropy/io/fits/diff.py\r\n@@ -1449,7 +1449,7 @@ class TableDataDiff(_BaseDiff):\r\n                 arrb.dtype, np.floating\r\n             ):\r\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\r\n-            elif \"P\" in col.format:\r\n+            elif \"P\" in col.format or \"Q\" in col.format:\r\n                 diffs = (\r\n                     [\r\n                         idx\r\n```\r\nsembra funzionare, ma avrebbe bisogno di alcuni test ecc. Vuoi lavorare su una correzione?  \nNon sono particolarmente familiare con `FITSDiff`, preferirei non gestire la PR.",
    "created_at": "2023-03-16T18:45:19Z",
    "version": "5.1",
    "FAIL_TO_PASS": "[\"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_tables\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_table_data\"]",
    "PASS_TO_PASS": "[\"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_headers\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_slightly_different_headers\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_common_keywords\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_keyword_count\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_keywords\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_keyword_values\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_keyword_comments\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_keyword_values_with_duplicate\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_asymmetric_duplicate_keywords\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_floating_point_rtol\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_floating_point_atol\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_blanks\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_blank_cards[HeaderDiff]\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_blank_cards[HDUDiff]\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_blank_cards[FITSDiff]\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_hdus\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_keyword_values\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_keyword_comments\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_trivial_identical_images\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_within_relative_tolerance\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_within_absolute_tolerance\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_within_rtol_and_atol\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_not_identical_within_rtol_and_atol\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_comp_image_hdus\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_dimensions\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_pixels\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_diff_empty_tables\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_ignore_table_fields\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_table_field_names\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_table_field_counts\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_different_table_rows\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_identical_files_basic\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_partially_identical_files1\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_partially_identical_files2\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_partially_identical_files3\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_diff_nans\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_file_output_from_path_string\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_file_output_overwrite_safety\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_file_output_overwrite_success\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_rawdatadiff_nodiff\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_rawdatadiff_dimsdiff\", \"astropy/io/fits/tests/test_diff.py::TestDiff::test_rawdatadiff_bytesdiff\", \"astropy/io/fits/tests/test_diff.py::test_fitsdiff_hdu_name\", \"astropy/io/fits/tests/test_diff.py::test_fitsdiff_no_hdu_name\", \"astropy/io/fits/tests/test_diff.py::test_fitsdiff_with_names\", \"astropy/io/fits/tests/test_diff.py::test_rawdatadiff_diff_with_rtol\"]",
    "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "astropy/astropy",
    "instance_id": "astropy__astropy-14182",
    "base_commit": "a5917978be39d13cd90b517e1de4e7a539ffaa48",
    "patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -27,7 +27,6 @@ def get_fixedwidth_params(self, line):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n     end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n@@ -39,12 +38,29 @@ class RST(FixedWidth):\n \n     Example::\n \n-        ==== ===== ======\n-        Col1  Col2  Col3\n-        ==== ===== ======\n-          1    2.3  Hello\n-          2    4.5  Worlds\n-        ==== ===== ======\n+      >>> from astropy.table import QTable\n+      >>> import astropy.units as u\n+      >>> import sys\n+      >>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\")\n+      ===== ========\n+       wave response\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n+\n+    Like other fixed-width formats, when writing a table you can provide ``header_rows``\n+    to specify a list of table rows to output as the header.  For example::\n+\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])\n+      ===== ========\n+       wave response\n+         nm       ct\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n \n     Currently there is no support for reading tables which utilize continuation lines,\n     or for ones which define column spans through the use of an additional\n@@ -57,10 +73,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        idx = len(self.header.header_rows)\n+        lines = [lines[idx]] + lines + [lines[idx]]\n         return lines\n+\n+    def read(self, table):\n+        self.data.start_line = 2 + len(self.header.header_rows)\n+        return super().read(table)\n",
    "test_patch": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -2,7 +2,11 @@\n \n from io import StringIO\n \n+import numpy as np\n+\n+import astropy.units as u\n from astropy.io import ascii\n+from astropy.table import QTable\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -185,3 +189,27 @@ def test_write_normal():\n ==== ========= ==== ====\n \"\"\",\n     )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
    "problem_statement": "Per favore supporta le righe di intestazione nell'output RestructuredText\n### Descrizione\n\nSarebbe fantastico se funzionasse quanto segue:\n\n```Python\n>>> from astropy.table import QTable\n>>> import astropy.units as u\n>>> import sys\n>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\")\n===== ========\n wave response\n===== ========\n350.0      0.7\n950.0      1.2\n===== ========\n>>> tbl.write(sys.stdout,  format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n|  wave | response |\n|    nm |       ct |\n| 350.0 |      0.7 |\n| 950.0 |      1.2 |\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3/dist-packages/astropy/table/connect.py\", line 129, in __call__\n    self.registry.write(instance, *args, **kwargs)\n  File \"/usr/lib/python3/dist-packages/astropy/io/registry/core.py\", line 369, in write\n    return writer(data, *args, **kwargs)\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/connect.py\", line 26, in io_write\n    return write(table, filename, **kwargs)\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 856, in write\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 800, in get_writer\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/core.py\", line 1719, in _get_writer\n    writer = Writer(**writer_kwargs)\nTypeError: RST.__init__() got an unexpected keyword argument 'header_rows'\n```\n\n### Contesto aggiuntivo\n\nL'output RestructuredText è un ottimo modo per riempire la documentazione generata automaticamente con contenuti, quindi avere questa flessibilità rende la vita più facile `:-)`",
    "hints_text": null,
    "created_at": "2022-12-16T11:13:37Z",
    "version": "5.1",
    "FAIL_TO_PASS": "[\"astropy/io/ascii/tests/test_rst.py::test_rst_with_header_rows\"]",
    "PASS_TO_PASS": "[\"astropy/io/ascii/tests/test_rst.py::test_read_normal\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_names\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_names_include\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_exclude\", \"astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column\", \"astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column_header\", \"astropy/io/ascii/tests/test_rst.py::test_read_right_indented_table\", \"astropy/io/ascii/tests/test_rst.py::test_trailing_spaces_in_row_definition\", \"astropy/io/ascii/tests/test_rst.py::test_write_normal\"]",
    "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "scikit-learn/scikit-learn",
    "instance_id": "scikit-learn__scikit-learn-14053",
    "base_commit": "6ab8c86c383dd847a1be7103ad115f174fe23ffd",
    "patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,7 +890,8 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED\n+                          else None for i in tree_.feature]\n     else:\n         feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n \n",
    "test_patch": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,21 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg.fit(X_single, y_mo)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- first <= 0.0\n+    |   |--- value: [-1.0, -1.0]\n+    |--- first >  0.0\n+    |   |--- value: [1.0, 1.0]\n+    \"\"\").lstrip()\n+    assert export_text(reg, decimals=1,\n+                       feature_names=['first']) == expected_report\n+    assert export_text(reg, decimals=1, show_weights=True,\n+                       feature_names=['first']) == expected_report\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
    "problem_statement": "IndexError: list index out of range in export_text quando l'albero ha una sola caratteristica\n<!--\r\nSe il tuo problema è una domanda sull'utilizzo, inviala qui invece:\r\n- StackOverflow con il tag scikit-learn: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nPer ulteriori informazioni, vedi Domande degli Utenti: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Istruzioni per la Segnalazione di un Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Descrizione\r\n`export_text` restituisce `IndexError` quando c'è una singola caratteristica.\r\n\r\n#### Passaggi/Codice per Riprodurre\r\n```python\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nfrom sklearn.tree.export import export_text\r\nfrom sklearn.datasets import load_iris\r\n\r\nX, y = load_iris(return_X_y=True)\r\nX = X[:, 0].reshape(-1, 1)\r\n\r\ntree = DecisionTreeClassifier()\r\ntree.fit(X, y)\r\ntree_text = export_text(tree, feature_names=['sepal_length'])\r\nprint(tree_text)\r\n\r\n```\r\n\r\n#### Risultati Attuali\r\n```\r\nIndexError: list index out of range\r\n```\r\n\r\n\r\n#### Versioni\r\n```\r\nCould not locate executable g77\r\nCould not locate executable f77\r\nCould not locate executable ifort\r\nCould not locate executable ifl\r\nCould not locate executable f90\r\nCould not locate executable DF\r\nCould not locate executable efl\r\nCould not locate executable gfortran\r\nCould not locate executable f95\r\nCould not locate executable g95\r\nCould not locate executable efort\r\nCould not locate executable efc\r\nCould not locate executable flang\r\ndon't know how to compile Fortran code on platform 'nt'\r\n\r\nSystem:\r\n    python: 3.7.3 (default, Apr 24 2019, 15:29:51) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: C:\\Users\\liqia\\Anaconda3\\python.exe\r\n   machine: Windows-10-10.0.17763-SP0\r\n\r\nBLAS:\r\n    macros: \r\n  lib_dirs: \r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.1\r\nsetuptools: 41.0.0\r\n   sklearn: 0.21.1\r\n     numpy: 1.16.2\r\n     scipy: 1.2.1\r\n    Cython: 0.29.7\r\n    pandas: 0.24.2\r\nC:\\Users\\liqia\\Anaconda3\\lib\\site-packages\\numpy\\distutils\\system_info.py:638: UserWarning: \r\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\r\n    Directories to search for the libraries can be specified in the\r\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\r\n    the ATLAS environment variable.\r\n  self.calc_info()\r\nC:\\Users\\liqia\\Anaconda3\\lib\\site-packages\\numpy\\distutils\\system_info.py:638: UserWarning: \r\n    Blas (http://www.netlib.org/blas/) libraries not found.\r\n    Directories to search for the libraries can be specified in the\r\n    numpy/distutils/site.cfg file (section [blas]) or by setting\r\n    the BLAS environment variable.\r\n  self.calc_info()\r\nC:\\Users\\liqia\\Anaconda3\\lib\\site-packages\\numpy\\distutils\\system_info.py:638: UserWarning: \r\n    Blas (http://www.netlib.org/blas/) sources not found.\r\n    Directories to search for the sources can be specified in the\r\n    numpy/distutils/site.cfg file (section [blas_src]) or by setting\r\n    the BLAS_SRC environment variable.\r\n  self.calc_info()\r\n```\r\n\r\n<!-- Thanks for contributing! -->",
    "hints_text": "Grazie per la segnalazione. Un patch è benvenuto.\n@jnothman Ovviamente, `feature_names` dovrebbe avere la stessa lunghezza del numero di caratteristiche nel dataset, che in questo problema segnalato, `feature_names` dovrebbe essere di lunghezza 4.\n\nSperi di risolvere questo bug aggiungendo una condizione nello statement `if feature_names`, come `if feature_names and len(feature_names)==decision_tree.n_features_`, o hai altre idee? Posso occuparmi di questo problema dopo aver capito come vuoi risolverlo. Grazie\nQui viene utilizzata solo una caratteristica di Iris. Non ho ancora investigato il bug in dettaglio.\n@fdas3213 infatti viene utilizzata solo una caratteristica poiché ho selezionato solo la prima colonna in X: `X[:, 0].reshape(-1, 1)`. Ho anche provato a utilizzare due caratteristiche: `X[:, 0:2].reshape(-1, 1)` e poi ho passato una lista di due elementi a `feature_names`. Nessuna eccezione è stata sollevata. Questo problema si verifica solo quando si ha una singola caratteristica.\n\n@StevenLi-DS Grazie per il feedback. Proverò questo su alcuni altri dataset e caratteristiche.\nÈ così strano che quando chiamo `export_text` senza aggiungere l'argomento `feature_names`, come `tree_text = export_tree(tree)`, funziona correttamente, e `export_text` stamperà i nomi delle caratteristiche come `feature_0` come indicato in export.py. Tuttavia, quando accedo a `tree.tree_.feature`, ottengo un array con valori `0` e `-2`, come `array([0, 0, -2, 0, -2, ...])`; non dovrebbe questo array contenere solo un valore unico poiché il dataset X passato a `DecisionTreeClassifier()` contiene solo una colonna?\n-2 indica un nodo foglia, che non si divide su una caratteristica\n\nPoiché `feature_names` è una lista di un solo elemento, l'accesso a questa lista utilizzando `0` e `-2` ha causato l'errore. Forse si dovrebbe considerare la rimozione di `-2` da `tree_.feature` in modo che `tree_.feature` contenga solo `0`?\n`export_tree` non dovrebbe mai accedere al nome della caratteristica per una foglia\n\nEsattamente, ma alla riga 893, `feature_names = [feature_names[i] for i in tree_.feature]`, dove \n`tree_.feature = array([ 0,  0, -2,  0, -2,  0, -2,  0, -2,  0, -2,  0, -2, -2,  0,  0,  0,\n       -2,  0, -2, -2,  0, -2,  0, -2,  0, -2, -2,  0,  0,  0, -2,  0,  0,\n        0, -2, -2, -2,  0, -2,  0,  0, -2, -2, -2, -2, -2], dtype=int64)`. Quindi è ovvio che sta accedendo a -2 (nodo foglia), e questo è il motivo per cui si verifica questo bug?\n\nIl che significa che il problema non è nell'indice, ma nel flusso di controllo\nche permette che quella dichiarazione venga eseguita.",
    "created_at": "2019-06-09T15:36:55Z",
    "version": "0.22",
    "FAIL_TO_PASS": "[\"sklearn/tree/tests/test_export.py::test_export_text\"]",
    "PASS_TO_PASS": "[\"sklearn/tree/tests/test_export.py::test_graphviz_toy\", \"sklearn/tree/tests/test_export.py::test_graphviz_errors\", \"sklearn/tree/tests/test_export.py::test_friedman_mse_in_graphviz\", \"sklearn/tree/tests/test_export.py::test_precision\", \"sklearn/tree/tests/test_export.py::test_export_text_errors\"]",
    "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-3677",
    "base_commit": "ef6e6a7b86f8479b9a1fecf15ad5b88a2326b31e",
    "patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3604,6 +3604,7 @@ def merge(\n             If any variables conflict (see ``compat``).\n         \"\"\"\n         _check_inplace(inplace)\n+        other = other.to_dataset() if isinstance(other, xr.DataArray) else other\n         merge_result = dataset_merge_method(\n             self,\n             other,\n",
    "test_patch": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -3,6 +3,7 @@\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -253,3 +254,9 @@ def test_merge_no_conflicts(self):\n         with pytest.raises(xr.MergeError):\n             ds3 = xr.Dataset({\"a\": (\"y\", [2, 3]), \"y\": [1, 2]})\n             ds1.merge(ds3, compat=\"no_conflicts\")\n+\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n",
    "problem_statement": "Unione di dataArray in dataset utilizzando il metodo del dataset non riesce\nMentre è possibile unire un dataset e un oggetto dataarray utilizzando la funzione `merge()` di livello superiore, se si prova a fare la stessa cosa con il metodo `ds.merge()` non riesce.\n\n```python\nimport xarray as xr\n\nds = xr.Dataset({'a': 0})\nda = xr.DataArray(1, name='b')\n\nexpected = xr.merge([ds, da])  # funziona correttamente\nprint(expected)\n\nds.merge(da)  # non riesce\n```\n\nOutput:\n```\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    a        int64 0\n    b        int64 1\n\nTraceback (most recent call last):\n  File \"mwe.py\", line 6, in <module>\n    actual = ds.merge(da)\n  File \"/home/tegn500/Documents/Work/Code/xarray/xarray/core/dataset.py\", line 3591, in merge\n    fill_value=fill_value,\n  File \"/home/tegn500/Documents/Work/Code/xarray/xarray/core/merge.py\", line 835, in dataset_merge_method\n    objs, compat, join, priority_arg=priority_arg, fill_value=fill_value\n  File \"/home/tegn500/Documents/Work/Code/xarray/xarray/core/merge.py\", line 548, in merge_core\n    coerced = coerce_pandas_values(objects)\n  File \"/home/tegn500/Documents/Work/Code/xarray/xarray/core/merge.py\", line 394, in coerce_pandas_values\n    for k, v in obj.items():\n  File \"/home/tegn500/Documents/Work/Code/xarray/xarray/core/common.py\", line 233, in __getattr__\n    \"{!r} object has no attribute {!r}\".format(type(self).__name__, name)\nAttributeError: 'DataArray' object has no attribute 'items'\n```",
    "hints_text": null,
    "created_at": "2020-01-09T16:07:14Z",
    "version": "0.12",
    "FAIL_TO_PASS": "[\"xarray/tests/test_merge.py::TestMergeMethod::test_merge_dataarray\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_merge.py::TestMergeInternals::test_broadcast_dimension_size\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_arrays\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_datasets\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dataarray_unnamed\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dicts_simple\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dicts_dims\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_alignment_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_wrong_input_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_single_var\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_multi_var\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_preserve_attrs\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_broadcast\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_broadcast_equals\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_compat\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_auto_align\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[fill_value0]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[2]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[2.0]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_no_conflicts\"]",
    "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-8593",
    "base_commit": "07983a5a8704ad91ae855218ecbda1c8598200ca",
    "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -25,8 +25,8 @@\n from sphinx.deprecation import (RemovedInSphinx40Warning, RemovedInSphinx50Warning,\n                                 RemovedInSphinx60Warning)\n from sphinx.environment import BuildEnvironment\n-from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_module_members,\n-                                         get_object_members, import_module, import_object)\n+from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_object_members,\n+                                         import_module, import_object)\n from sphinx.ext.autodoc.mock import mock\n from sphinx.locale import _, __\n from sphinx.pycode import ModuleAnalyzer, PycodeError\n@@ -1043,30 +1043,54 @@ def add_directive_header(self, sig: str) -> None:\n         if self.options.deprecated:\n             self.add_line('   :deprecated:', sourcename)\n \n+    def get_module_members(self) -> Dict[str, ObjectMember]:\n+        \"\"\"Get members of target module.\"\"\"\n+        if self.analyzer:\n+            attr_docs = self.analyzer.attr_docs\n+        else:\n+            attr_docs = {}\n+\n+        members = {}  # type: Dict[str, ObjectMember]\n+        for name in dir(self.object):\n+            try:\n+                value = safe_getattr(self.object, name, None)\n+                docstring = attr_docs.get(('', name), [])\n+                members[name] = ObjectMember(name, value, docstring=\"\\n\".join(docstring))\n+            except AttributeError:\n+                continue\n+\n+        # annotation only member (ex. attr: int)\n+        try:\n+            for name in inspect.getannotations(self.object):\n+                if name not in members:\n+                    docstring = attr_docs.get(('', name), [])\n+                    members[name] = ObjectMember(name, INSTANCEATTR,\n+                                                 docstring=\"\\n\".join(docstring))\n+        except AttributeError:\n+            pass\n+\n+        return members\n+\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n         if want_all:\n-            members = get_module_members(self.object)\n             if not self.__all__:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n-                return True, members\n+                return True, list(members.values())\n             else:\n-                ret = []\n-                for name, value in members:\n-                    if name in self.__all__:\n-                        ret.append(ObjectMember(name, value))\n-                    else:\n-                        ret.append(ObjectMember(name, value, skipped=True))\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n \n-                return False, ret\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n             for name in memberlist:\n-                try:\n-                    value = safe_getattr(self.object, name)\n-                    ret.append(ObjectMember(name, value))\n-                except AttributeError:\n+                if name in members:\n+                    ret.append(members[name])\n+                else:\n                     logger.warning(__('missing attribute mentioned in :members: option: '\n                                       'module %s, attribute %s') %\n                                    (safe_getattr(self.object, '__name__', '???'), name),\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -13,7 +13,8 @@\n import warnings\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n-from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias\n+from sphinx.deprecation import (RemovedInSphinx40Warning, RemovedInSphinx50Warning,\n+                                deprecated_alias)\n from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import logging\n from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,\n@@ -141,6 +142,9 @@ def get_module_members(module: Any) -> List[Tuple[str, Any]]:\n     \"\"\"Get members of target module.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n+    warnings.warn('sphinx.ext.autodoc.importer.get_module_members() is deprecated.',\n+                  RemovedInSphinx50Warning)\n+\n     members = {}  # type: Dict[str, Tuple[str, Any]]\n     for name in dir(module):\n         try:\n",
    "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -9,3 +9,7 @@ def _public_function(name):\n \n     :meta public:\n     \"\"\"\n+\n+\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\ndiff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -23,6 +23,13 @@ def test_private_field(app):\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n@@ -44,6 +51,20 @@ def test_private_field_and_private_members(app):\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: PRIVATE_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n@@ -66,13 +87,20 @@ def test_private_field_and_private_members(app):\n def test_private_members(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None,\n-               \"private-members\": \"_public_function\"}\n+               \"private-members\": \"_PUBLIC_CONSTANT,_public_function\"}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n         '',\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n",
    "problem_statement": "**Beschrijf het probleem**\nautodoc: `:meta public:` heeft geen effect op variabelen.\n\n**Om te reproduceren**\n\n```\n# example.py\n_foo = None  #: :meta public:\n```\n```\n# index.rst\n.. automodule:: example\n   :members:\n```\n\nIk verwacht dat `_foo` wordt weergegeven in het gebouwde document, maar dat gebeurt niet.\n\n**Verwachte gedrag**\n`_foo` zou moeten worden weergegeven in het gebouwde document.\n\n**Jouw project**\nNee\n\n**Schermafbeeldingen**\nNee\n\n**Omgevingsinformatie**\n- Besturingssysteem: Mac\n- Python-versie: 3.9.1\n- Sphinx-versie: HEAD van 3.x\n- Sphinx-extensies: sphinx.ext.autodoc\n- Extra tools: Nee\n\n**Aanvullende context**\nNee",
    "hints_text": null,
    "created_at": "2020-12-27T02:41:20Z",
    "version": "3.5",
    "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_private_members.py::test_private_field\", \"tests/test_ext_autodoc_private_members.py::test_private_members\"]",
    "PASS_TO_PASS": "[\"tests/test_ext_autodoc_private_members.py::test_private_field_and_private_members\"]",
    "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pytest-dev/pytest",
    "instance_id": "pytest-dev__pytest-7490",
    "base_commit": "7f7a36478abe7dd1fa993b115d22606aa0e35e88",
    "patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -231,17 +231,14 @@ def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n \n @hookimpl(tryfirst=True)\n def pytest_runtest_setup(item: Item) -> None:\n-    item._store[skipped_by_mark_key] = False\n-\n     skipped = evaluate_skip_marks(item)\n+    item._store[skipped_by_mark_key] = skipped is not None\n     if skipped:\n-        item._store[skipped_by_mark_key] = True\n         skip(skipped.reason)\n \n-    if not item.config.option.runxfail:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n-        if xfailed and not xfailed.run:\n-            xfail(\"[NOTRUN] \" + xfailed.reason)\n+    item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    if xfailed and not item.config.option.runxfail and not xfailed.run:\n+        xfail(\"[NOTRUN] \" + xfailed.reason)\n \n \n @hookimpl(hookwrapper=True)\n@@ -250,12 +247,16 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     if xfailed is None:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n \n-    if not item.config.option.runxfail:\n-        if xfailed and not xfailed.run:\n-            xfail(\"[NOTRUN] \" + xfailed.reason)\n+    if xfailed and not item.config.option.runxfail and not xfailed.run:\n+        xfail(\"[NOTRUN] \" + xfailed.reason)\n \n     yield\n \n+    # The test run may have added an xfail mark dynamically.\n+    xfailed = item._store.get(xfailed_key, None)\n+    if xfailed is None:\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+\n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n",
    "test_patch": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,7 @@\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -425,6 +426,33 @@ def test_this2(arg):\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     @pytest.mark.parametrize(\n         \"expected, actual, matchline\",\n         [\n",
    "problem_statement": "Pytest 6: Aggiunta dinamica del marker xfail in un test non ignora più il fallimento\n<!--\r\nGrazie per aver inviato un problema!\r\n\r\nEcco una rapida checklist di cosa fornire:\r\n-->\r\n\r\n## Descrizione\r\n\r\nCon pytest 5.x, possiamo aggiungere dinamicamente un xfail a un oggetto `request` del test utilizzando `request.node.add_marker(mark)` (vedi esempio sotto). Nella versione 5.x, questo trattava il test fallito come un test marcato staticamente con un `xfail`. Con la versione 6.0.0rc0, invece, solleva un'eccezione.\r\n\r\n## Versioni\r\n\r\n<details>\r\n\r\n```\r\n$ pip list\r\nPackage                       Version                         Location                                                      \r\n----------------------------- ------------------------------- --------------------------------------------------------------\r\na                             1.0                             \r\naioftp                        0.13.0                          \r\naiohttp                       3.6.2                           \r\nalabaster                     0.7.12                          \r\napipkg                        1.5                             \r\naplus                         0.11.0                          \r\nappdirs                       1.4.3                           \r\nappnope                       0.1.0                           \r\narrow                         0.15.7                          \r\naspy.yaml                     1.3.0                           \r\nastropy                       3.2.3                           \r\nasv                           0.4.1                           \r\nasync-timeout                 3.0.1                           \r\natomicwrites                  1.3.0                           \r\nattrs                         19.1.0                          \r\naws-sam-translator            1.15.1                          \r\naws-xray-sdk                  0.95                            \r\nBabel                         2.7.0                           \r\nbackcall                      0.1.0                           \r\nbinaryornot                   0.4.4                           \r\nblack                         19.10b0                         \r\nbleach                        3.1.0                           \r\nblurb                         1.0.7                           \r\nbokeh                         1.3.4                           \r\nboto                          2.49.0                          \r\nboto3                         1.7.84                          \r\nbotocore                      1.10.84                         \r\nbqplot                        0.12.12                         \r\nbranca                        0.3.1                           \r\ncachetools                    4.1.0                           \r\ncertifi                       2019.9.11                       \r\ncffi                          1.13.2                          \r\ncfgv                          2.0.1                           \r\ncfn-lint                      0.25.0                          \r\ncftime                        1.0.4.2                         \r\nchardet                       3.0.4                           \r\nClick                         7.0                             \r\nclick-plugins                 1.1.1                           \r\ncligj                         0.5.0                           \r\ncloudpickle                   1.2.2                           \r\ncolorama                      0.4.3                           \r\ncolorcet                      2.0.2                           \r\ncoloredlogs                   14.0                            \r\ncookiecutter                  1.7.2                           \r\ncookies                       2.2.1                           \r\ncoverage                      4.5.4                           \r\ncryptography                  2.8                             \r\ncycler                        0.10.0                          \r\nCython                        3.0a5                           \r\ncytoolz                       0.10.1                          \r\ndask                          2.4.0                           /Users/taugspurger/Envs/pandas-dev/lib/python3.7/site-packages\r\nDateTime                      4.3                             \r\ndecorator                     4.4.0                           \r\ndefusedxml                    0.6.0                           \r\nDeprecated                    1.2.7                           \r\ndistributed                   2.4.0                           \r\ndocker                        4.1.0                           \r\ndocutils                      0.15.2                          \r\necdsa                         0.14.1                          \r\nentrypoints                   0.3                             \r\net-xmlfile                    1.0.1                           \r\nexecnet                       1.7.1                           \r\nfastparquet                   0.3.3                           /Users/taugspurger/sandbox/fastparquet                        \r\nfeedparser                    5.2.1                           \r\nFiona                         1.8.8                           \r\nflake8                        3.7.9                           \r\nflake8-rst                    0.7.1                           \r\nfletcher                      0.3.1                           \r\nflit                          2.1.0                           \r\nflit-core                     2.1.0                           \r\nfsspec                        0.7.4                           \r\nfuture                        0.18.2                          \r\ngcsfs                         0.6.2                           \r\ngeopandas                     0.6.0+1.g95b8e1a.dirty          /Users/taugspurger/sandbox/geopandas                          \r\ngitdb2                        2.0.5                           \r\nGitPython                     3.0.2                           \r\ngoogle-auth                   1.16.1                          \r\ngoogle-auth-oauthlib          0.4.1                           \r\ngraphviz                      0.13                            \r\nh5py                          2.10.0                          \r\nHeapDict                      1.0.1                           \r\nholoviews                     1.12.6                          \r\nhumanfriendly                 8.1                             \r\nhunter                        3.1.3                           \r\nhvplot                        0.5.2                           \r\nhypothesis                    4.36.2                          \r\nidentify                      1.4.7                           \r\nidna                          2.8                             \r\nimagesize                     1.1.0                           \r\nimportlib-metadata            0.23                            \r\nimportlib-resources           1.0.2                           \r\niniconfig                     1.0.0                           \r\nintake                        0.5.3                           \r\nipydatawidgets                4.0.1                           \r\nipykernel                     5.1.2                           \r\nipyleaflet                    0.13.0                          \r\nipympl                        0.5.6                           \r\nipython                       7.11.1                          \r\nipython-genutils              0.2.0                           \r\nipyvolume                     0.5.2                           \r\nipyvue                        1.3.2                           \r\nipyvuetify                    1.4.0                           \r\nipywebrtc                     0.5.0                           \r\nipywidgets                    7.5.1                           \r\nisort                         4.3.21                          \r\njdcal                         1.4.1                           \r\njedi                          0.16.0                          \r\nJinja2                        2.11.2                          \r\njinja2-time                   0.2.0                           \r\njmespath                      0.9.4                           \r\njoblib                        0.14.1                          \r\njson5                         0.9.4                           \r\njsondiff                      1.1.1                           \r\njsonpatch                     1.24                            \r\njsonpickle                    1.2                             \r\njsonpointer                   2.0                             \r\njsonschema                    3.0.2                           \r\njupyter                       1.0.0                           \r\njupyter-client                5.3.3                           \r\njupyter-console               6.0.0                           \r\njupyter-core                  4.5.0                           \r\njupyterlab                    2.1.2                           \r\njupyterlab-server             1.1.4                           \r\nkiwisolver                    1.1.0                           \r\nline-profiler                 2.1.1                           \r\nllvmlite                      0.33.0                          \r\nlocket                        0.2.0                           /Users/taugspurger/sandbox/locket.py                          \r\nlxml                          4.5.0                           \r\nmanhole                       1.6.0                           \r\nMarkdown                      3.1.1                           \r\nMarkupSafe                    1.1.1                           \r\nmatplotlib                    3.2.2                           \r\nmccabe                        0.6.1                           \r\nmemory-profiler               0.55.0                          \r\nmistune                       0.8.4                           \r\nmock                          3.0.5                           \r\nmore-itertools                7.2.0                           \r\nmoto                          1.3.6                           \r\nmsgpack                       0.6.2                           \r\nmultidict                     4.5.2                           \r\nmunch                         2.3.2                           \r\nmypy                          0.730                           \r\nmypy-extensions               0.4.1                           \r\nnbconvert                     5.6.0                           \r\nnbformat                      4.4.0                           \r\nnbsphinx                      0.4.2                           \r\nnest-asyncio                  1.3.3                           \r\nnodeenv                       1.3.3                           \r\nnotebook                      6.0.1                           \r\nnumexpr                       2.7.1                           \r\nnumpy                         1.19.0                          \r\nnumpydoc                      1.0.0.dev0                      \r\noauthlib                      3.1.0                           \r\nodfpy                         1.4.0                           \r\nopenpyxl                      3.0.3                           \r\npackaging                     20.4                            \r\npandas                        1.1.0.dev0+1758.g035e1fe831     /Users/taugspurger/sandbox/pandas                             \r\npandas-sphinx-theme           0.0.1.dev0                      /Users/taugspurger/sandbox/pandas-sphinx-theme                \r\npandocfilters                 1.4.2                           \r\nparam                         1.9.2                           \r\nparfive                       1.0.0                           \r\nparso                         0.6.0                           \r\npartd                         1.0.0                           \r\npathspec                      0.8.0                           \r\npatsy                         0.5.1                           \r\npexpect                       4.7.0                           \r\npickleshare                   0.7.5                           \r\nPillow                        6.1.0                           \r\npip                           20.0.2                          \r\npluggy                        0.13.0                          \r\npoyo                          0.5.0                           \r\npre-commit                    1.18.3                          \r\nprogressbar2                  3.51.3                          \r\nprometheus-client             0.7.1                           \r\nprompt-toolkit                2.0.9                           \r\npsutil                        5.6.3                           \r\nptyprocess                    0.6.0                           \r\npy                            1.9.0                           \r\npyaml                         20.4.0                          \r\npyarrow                       0.16.0                          \r\npyasn1                        0.4.7                           \r\npyasn1-modules                0.2.8                           \r\npycodestyle                   2.5.0                           \r\npycparser                     2.19                            \r\npycryptodome                  3.9.8                           \r\npyct                          0.4.6                           \r\npydata-sphinx-theme           0.1.1                           \r\npydeps                        1.9.0                           \r\npyflakes                      2.1.1                           \r\nPyGithub                      1.44.1                          \r\nPygments                      2.4.2                           \r\nPyJWT                         1.7.1                           \r\npyparsing                     2.4.2                           \r\npyproj                        2.4.0                           \r\npyrsistent                    0.15.4                          \r\npytest                        5.4.3                           \r\npytest-asyncio                0.10.0                          \r\npytest-cov                    2.8.1                           \r\npytest-cover                  3.0.0                           \r\npytest-forked                 1.0.2                           \r\npytest-repeat                 0.8.0                           \r\npytest-xdist                  1.29.0                          \r\npython-boilerplate            0.1.0                           \r\npython-dateutil               2.8.0                           \r\npython-jose                   2.0.2                           \r\npython-jsonrpc-server         0.3.2                           \r\npython-language-server        0.31.4                          \r\npython-slugify                4.0.1                           \r\npython-utils                  2.4.0                           \r\npythreejs                     2.2.0                           \r\npytoml                        0.1.21                          \r\npytz                          2019.2                          \r\npyviz-comms                   0.7.2                           \r\nPyYAML                        5.1.2                           \r\npyzmq                         18.1.0                          \r\nqtconsole                     4.5.5                           \r\nregex                         2020.6.8                        \r\nrequests                      2.24.0                          \r\nrequests-oauthlib             1.3.0                           \r\nresponses                     0.10.6                          \r\nrsa                           4.0                             \r\nrstcheck                      3.3.1                           \r\ns3fs                          0.4.2                           \r\ns3transfer                    0.1.13                          \r\nscikit-learn                  0.22.2.post1                    \r\nscipy                         1.3.1                           \r\nseaborn                       0.9.0                           \r\nSend2Trash                    1.5.0                           \r\nsetuptools                    49.2.0                          \r\nShapely                       1.6.4.post2                     \r\nsix                           1.12.0                          \r\nsmmap2                        2.0.5                           \r\nsnakeviz                      2.0.1                           \r\nsnowballstemmer               1.9.1                           \r\nsortedcontainers              2.1.0                           \r\nsparse                        0.10.0                          \r\nSphinx                        3.1.1                           \r\nsphinxcontrib-applehelp       1.0.2                           \r\nsphinxcontrib-devhelp         1.0.2                           \r\nsphinxcontrib-htmlhelp        1.0.3                           \r\nsphinxcontrib-jsmath          1.0.1                           \r\nsphinxcontrib-qthelp          1.0.3                           \r\nsphinxcontrib-serializinghtml 1.1.4                           \r\nsphinxcontrib-websupport      1.1.2                           \r\nsphinxcontrib.youtube         0.1.2                           \r\nSQLAlchemy                    1.3.11                          \r\nsshpubkeys                    3.1.0                           \r\nstatsmodels                   0.10.2                          \r\nstdlib-list                   0.6.0                           \r\nsunpy                         1.1.dev518+gcad2d473f.d20191103 /Users/taugspurger/sandbox/sunpy                              \r\ntables                        3.6.1                           \r\ntabulate                      0.8.6                           \r\ntblib                         1.4.0                           \r\nterminado                     0.8.2                           \r\ntest                          1.0.0                           \r\ntestpath                      0.4.2                           \r\ntext-unidecode                1.3                             \r\nthrift                        0.13.0                          \r\ntoml                          0.10.0                          \r\ntoolz                         0.10.0                          \r\ntornado                       6.0.3                           \r\ntqdm                          4.37.0                          \r\ntraitlets                     4.3.2                           \r\ntraittypes                    0.2.1                           \r\ntyped-ast                     1.4.0                           \r\ntyping-extensions             3.7.4                           \r\nujson                         1.35                            \r\nurllib3                       1.25.5                          \r\nvaex                          3.0.0                           \r\nvaex-arrow                    0.5.1                           \r\nvaex-astro                    0.7.0                           \r\nvaex-core                     2.0.2                           \r\nvaex-hdf5                     0.6.0                           \r\nvaex-jupyter                  0.5.1.post0                     \r\nvaex-ml                       0.9.0                           \r\nvaex-server                   0.3.1                           \r\nvaex-viz                      0.4.0                           \r\nvirtualenv                    16.7.5                          \r\nwcwidth                       0.1.7                           \r\nwebencodings                  0.5.1                           \r\nwebsocket-client              0.56.0                          \r\nWerkzeug                      0.16.0                          \r\nwheel                         0.34.2                          \r\nwidgetsnbextension            3.5.1                           \r\nwrapt                         1.11.2                          \r\nxarray                        0.14.1+36.gb3d3b448             /Users/taugspurger/sandbox/xarray                             \r\nxlwt                          1.3.0                           \r\nxmltodict                     0.12.0                          \r\nyarl                          1.3.0                           \r\nzict                          1.0.0                           \r\nzipp                          0.6.0                           \r\nzope.interface                4.7.1                           \r\n```\r\n\r\n</details>\r\n\r\n- [ ] Versioni di pytest e sistema operativo\r\n\r\nPytest 6.0.1rc0 e MacOS 10.14.5\r\n\r\n```python\r\n# file: test_foo.py\r\nimport pytest\r\n\r\n\r\ndef test_xfail_test(request):\r\n    mark = pytest.mark.xfail(reason=\"xfail\")\r\n    request.node.add_marker(mark)\r\n    assert 0\r\n```\r\n\r\nCon 5.4.3\r\n\r\n```\r\n\r\n$ pytest -rsx test_foo.py\r\n=============================================================================== test session starts ================================================================================\r\nplatform darwin -- Python 3.7.6, pytest-5.4.3, py-1.9.0, pluggy-0.13.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/Users/taugspurger/sandbox/.hypothesis/examples')\r\nrootdir: /Users/taugspurger/sandbox\r\nplugins: xdist-1.29.0, hypothesis-4.36.2, forked-1.0.2, repeat-0.8.0, asyncio-0.10.0, cov-2.8.1\r\ncollected 1 item\r\n\r\ntest_foo.py x                                                                                                                                                                [100%]\r\n\r\n============================================================================= short test summary info ==============================================================================\r\nXFAIL test_foo.py::test_xfail_test\r\n  xfail\r\n================================================================================ 1 xfailed in 0.07s ================================================================================\r\n```\r\n\r\nCon 6.0.0rc0\r\n\r\n```\r\n$ pytest -rsx test_foo.py\r\n=============================================================================== test session starts ================================================================================\r\nplatform darwin -- Python 3.7.6, pytest-6.0.0rc1, py-1.9.0, pluggy-0.13.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/Users/taugspurger/sandbox/.hypothesis/examples')\r\nrootdir: /Users/taugspurger/sandbox\r\nplugins: xdist-1.29.0, hypothesis-4.36.2, forked-1.0.2, repeat-0.8.0, asyncio-0.10.0, cov-2.8.1\r\ncollected 1 item\r\n\r\ntest_foo.py F                                                                                                                                                                [100%]\r\n\r\n===================================================================================== FAILURES =====================================================================================\r\n_________________________________________________________________________________ test_xfail_test __________________________________________________________________________________\r\n\r\nrequest = <FixtureRequest for <Function test_xfail_test>>\r\n\r\n    def test_xfail_test(request):\r\n        mark = pytest.mark.xfail(reason=\"xfail\")\r\n        request.node.add_marker(mark)\r\n>       assert 0\r\nE       assert 0\r\n\r\ntest_foo.py:7: AssertionError\r\n```",
    "hints_text": "Grazie per aver testato la release candidate! Si tratta probabilmente di una regressione in c9737ae914891027da5f0bd39494dd51a3b3f19f, verrà corretta.",
    "created_at": "2020-07-13T22:20:10Z",
    "version": "6.0",
    "FAIL_TO_PASS": "[\"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict\"]",
    "PASS_TO_PASS": "[\"testing/test_skipping.py::test_importorskip\", \"testing/test_skipping.py::TestEvaluation::test_no_marker\", \"testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean\", \"testing/test_skipping.py::TestEvaluation::test_skipif_class\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed\", \"testing/test_skipping.py::TestXFail::test_xfail_using_platform\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict\", \"testing/test_skipping.py::TestXFail::test_xfail_run_anyway\", \"testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]\", \"testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]\", \"testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails\", \"testing/test_skipping.py::TestXFail::test_xfail_not_report_default\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run\", \"testing/test_skipping.py::TestXFail::test_xfail_xpass\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1\", \"testing/test_skipping.py::TestXFail::test_strict_sanity\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9\", \"testing/test_skipping.py::TestSkip::test_skip_class\", \"testing/test_skipping.py::TestSkip::test_skips_on_false_string\", \"testing/test_skipping.py::TestSkip::test_arg_as_reason\", \"testing/test_skipping.py::TestSkip::test_skip_no_reason\", \"testing/test_skipping.py::TestSkip::test_skip_with_reason\", \"testing/test_skipping.py::TestSkip::test_only_skips_marked_test\", \"testing/test_skipping.py::TestSkip::test_strict_and_skip\", \"testing/test_skipping.py::TestSkipif::test_skipif_conditional\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[\\\"hasattr(sys,\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,\", \"testing/test_skipping.py::TestSkipif::test_skipif_using_platform\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]\", \"testing/test_skipping.py::test_skip_not_report_default\", \"testing/test_skipping.py::test_skipif_class\", \"testing/test_skipping.py::test_skipped_reasons_functional\", \"testing/test_skipping.py::test_skipped_folding\", \"testing/test_skipping.py::test_reportchars\", \"testing/test_skipping.py::test_reportchars_error\", \"testing/test_skipping.py::test_reportchars_all\", \"testing/test_skipping.py::test_reportchars_all_error\", \"testing/test_skipping.py::test_errors_in_xfail_skip_expressions\", \"testing/test_skipping.py::test_xfail_skipif_with_globals\", \"testing/test_skipping.py::test_default_markers\", \"testing/test_skipping.py::test_xfail_test_setup_exception\", \"testing/test_skipping.py::test_imperativeskip_on_xfail_test\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason\", \"testing/test_skipping.py::TestBooleanCondition::test_xfail\", \"testing/test_skipping.py::test_xfail_item\", \"testing/test_skipping.py::test_module_level_skip_error\", \"testing/test_skipping.py::test_module_level_skip_with_allow_module_level\", \"testing/test_skipping.py::test_invalid_skip_keyword_parameter\", \"testing/test_skipping.py::test_mark_xfail_item\", \"testing/test_skipping.py::test_summary_list_after_errors\", \"testing/test_skipping.py::test_relpath_rootdir\"]",
    "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-18698",
    "base_commit": "3dff1b98a78f28c953ae2140b69356b8391e399c",
    "patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2,7 +2,8 @@\n \n from __future__ import print_function, division\n \n-from functools import wraps\n+from functools import wraps, reduce\n+from operator import mul\n \n from sympy.core import (\n     S, Basic, Expr, I, Integer, Add, Mul, Dummy, Tuple\n@@ -5905,10 +5906,7 @@ def _symbolic_factor_list(expr, opt, method):\n         if arg.is_Number:\n             coeff *= arg\n             continue\n-        if arg.is_Mul:\n-            args.extend(arg.args)\n-            continue\n-        if arg.is_Pow:\n+        elif arg.is_Pow:\n             base, exp = arg.args\n             if base.is_Number and exp.is_Number:\n                 coeff *= arg\n@@ -5949,6 +5947,9 @@ def _symbolic_factor_list(expr, opt, method):\n                         other.append((f, k))\n \n                 factors.append((_factors_product(other), exp))\n+    if method == 'sqf':\n+        factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)\n+                   for k in set(i for _, i in factors)]\n \n     return coeff, factors\n \n",
    "test_patch": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3273,7 +3273,7 @@ def test_to_rational_coeffs():\n def test_factor_terms():\n     # issue 7067\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n-    assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n+    assert sqf_list(x*(x + y)) == (1, [(x**2 + x*y, 1)])\n \n \n def test_as_list():\n@@ -3333,3 +3333,8 @@ def test_issue_17988():\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n",
    "problem_statement": "sqf e sqf_list non sono coerenti nell'output\nL'esempio sotto è errato nel senso che dovremmo avere (x**2 - 5*x + 6, 3) e non 2 fattori di molteplicità 3.\n\n```\n>  sqf_list(  (x**2 + 1)  * (x - 1)**2 * (x - 2)**3 * (x - 3)**3  )\n\n>  (1, [(x**2 + 1, 1), (x - 1, 2), (x - 3, 3), (x - 2, 3)])\n```\n\nmentre sotto è corretto --- un fattore di molteplicità 2\n\n```\n>  sqf_list( x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2 )\n\n>  (1, [(x - 2, 1), (x**2 - 1, 2)])\n```",
    "hints_text": "Suppongo che la risposta corretta possa essere sia la prima che la seconda. Ma dovremmo mantenerla coerente.\n\nQuesto [post su SO](https://stackoverflow.com/questions/57536689/sympys-sqf-and-sqf-list-give-different-results-once-i-use-poly-or-as-pol) evidenzia un altro problema:\r\n\r\n```python\r\n>>> v = (x1 + 2) ** 2 * (x2 + 4) ** 5\r\n>>> sqf(v)\r\n(x1 + 2)**2*(x2 + 4)**5\r\n>>> sqf(v.expand())\r\n(x1 + 2)**2  <-- dove è il fattore x2?\r\n```\nLa documentazione è incompleta. Le docstring per i metodi di basso livello in `sqfreetools` mostrano che sono solo per polinomi univariati, ma questo manca in `polytools`. Le docstring dovrebbero essere modificate.\r\n\r\nIl problema nell'OP è valido. Il metodo `Poly` funziona come previsto:\r\n```\r\n>>> Poly((x**2 + 1)*(x - 1)**2*(x - 2)**3*(x - 3)**3, x).sqf_list()\r\n(1, [(Poly(x**2 + 1, x, domain='ZZ'), 1), (Poly(x - 1, x, domain='ZZ'), 2), (Poly(x**2 - 5*x + 6, x, domain='ZZ'), 3)])\r\n```\r\nI due fattori di molteplicità 3 sono combinati come dovrebbero.\r\n\r\nLa funzione `sqf_list` non riesce a farlo.\r\n```\r\n>>> sqf_list((x**2 + 1)*(x - 1)**2*(x - 2)**3*(x - 3)**3, x)\r\n(1, [(x**2 + 1, 1), (x - 1, 2), (x - 3, 3), (x - 2, 3)])\r\n```\r\nDovrebbe scansionare l'elenco dei fattori generici e combinare i fattori della stessa molteplicità prima di restituire l'elenco.\r\nhttps://github.com/sympy/sympy/blob/e4259125f63727b76d0a0c4743ba1cd8d433d3ea/sympy/polys/polytools.py#L6218\nCiao, sono nuovo nella comunità sympy e vorrei contribuire al progetto. Vorrei chiedere a @akritas cosa c'è di sbagliato nell'avere 2 fattori di molteplicità 3? Inoltre, se il secondo problema (su SO) è ancora aperto, mi piacerebbe lavorarci, @jksuom puoi guidarmi da dove iniziare?\n\nInviato dal mio iPad\n\n> Il 15 dic 2019, alle 17:24, Akhil Rajput <notifications@github.com> ha scritto:\n> \n> ﻿\n> Ciao, sono nuovo nella comunità sympy e vorrei contribuire al progetto. Vorrei chiedere a @akritas cosa c'è di sbagliato nell'avere 2 fattori di molteplicità 3?\n> \nCiao,\n\nL'algoritmo square free dovrebbe estrarre tutti i fattori di _stesso_ grado e presentarli come un prodotto di data molteplicità (in questo caso un fattore con radici di molteplicità 3).\n> Inoltre, se il secondo problema (su SO) è ancora aperto, mi piacerebbe lavorarci, @jksuom puoi guidarmi da dove iniziare?\n> \n> —\n> Stai ricevendo questa email perché sei stato menzionato.\n> Rispondi direttamente a questa email, visualizzala su GitHub o disiscriviti.\n\nInizierei con le docstring. I metodi squarefree sono destinati a polinomi univariati. Il generatore dovrebbe essere fornito come parametro di input. Può essere omesso se non c'è pericolo di confusione (solo un simbolo nell'espressione). Altrimenti il risultato potrebbe essere indeterminato come mostrato nell'[esempio sopra](https://github.com/sympy/sympy/issues/8695#issuecomment-522278244).\n@jksuom, non sono ancora sicuro. C'è già un'opzione per passare i generatori come argomento a sqf_list(). La funzione dovrebbe trovare automaticamente i generatori presenti nell'espressione? Per favore guidami su cosa dovrei fare.\nSe c'è solo un simbolo nell'espressione, allora la funzione può trovare il generatore automaticamente. Altrimenti penso che esattamente un simbolo dovrebbe essere fornito come generatore.\r\n\r\nInoltre, vorrei cambiare le implementazioni di `sqf_list()` e funzioni correlate in modo che si basino sui metodi `Poly` corrispondenti. Quindi inizierebbero convertendo l'espressione di input in `p = Poly(f, *gens, **args)` e controllando che `p` abbia esattamente un generatore. Quindi verrebbero chiamati `p.sqf_list()` ecc.\nAllora cosa succederà in caso di più generatori? Solo per confermare, i generatori qui si riferiscono a simboli/variabili.\n> i generatori qui si riferiscono a simboli/variabili.\r\n\r\nSì.\r\n> Allora cosa succederà in caso di più generatori?\r\n\r\nPenso che potrebbe essere sollevato un ValueError. Sembra che attualmente venga restituito un certo tipo di risultato ma non c'è documentazione, e non conosco alcun uso ragionevole in cui la fattorizzazione ordinaria non sarebbe sufficiente.\n> Se c'è solo un simbolo nell'espressione, allora la funzione può trovare il generatore automaticamente. Altrimenti penso che esattamente un simbolo dovrebbe essere fornito come generatore.\r\n> \r\n> Inoltre, vorrei cambiare le implementazioni di `sqf_list()` e funzioni correlate in modo che si basino sui metodi `Poly` corrispondenti. Quindi inizierebbero convertendo l'espressione di input in `p = Poly(f, *gens, **args)` e controllando che `p` abbia esattamente un generatore. Quindi verrebbero chiamati `p.sqf_list()` ecc.\r\n\r\n@jksuom Nella funzione helper __symbolic_factor_list_ di sqf_list, l'espressione è già convertita in polinomio e poi viene chiamata la funzione _sqf_list_ corrispondente. Quindi, dovrei solo assicurarmi che il numero di generatori passati sia uno?\n> Dovrei solo assicurarmi che il numero di generatori passati sia uno?\r\n\r\nSe c'è esattamente un generatore passato, allora è possibile chiamare `_generic_factor_list` con gli argomenti dati. Tuttavia, è necessario post-elaborare il risultato. Nell'esempio sopra, restituisce\r\n\r\n    (1, [(x**2 + 1, 1), (x - 1, 2), (x - 3, 3), (x - 2, 3)])\r\n\r\nmentre `sqf_list` dovrebbe restituire solo un polinomio per ogni potenza. Quindi i due fattori triplici `x - 3` e `x - 2` dovrebbero essere combinati per dare un singolo `(x**2 - 5*x + 6, 3)`.\r\n\r\nÈ probabilmente bastante comune che non vengano forniti generatori, in particolare, quando l'espressione sembra un polinomio univariato. Questo dovrebbe essere accettabile ma è necessario più lavoro per trovare il numero di generatori. Penso che sia meglio convertire l'espressione in un oggetto `Poly` per vedere i generatori. Se ce n'è solo uno, allora il metodo `sqf_list` può essere chiamato, altrimenti dovrebbe essere sollevato un `ValueError`.\r\n\r\nÈ possibile che la seconda procedura sarà più efficiente anche se viene fornito un singolo generatore.\n@jksuom Ho creato una PR (#18307) per il problema. Non ho fatto nulla per il caso di più generatori poiché era ambiguo. Sarebbe fantastico se potessi revisionarla. Grazie.\n@jksuom cosa si può fare nel caso in cui l'espressione data sia una costante (senza generatori)? Ad esempio: `sqf_list(1)`. Non saremo in grado di costruire un polinomio e verrà sollevato un errore PolificationFailed.\nPenso che l'errore possa essere sollevato. È tipico di molte funzioni polinomiali che non funzionano con espressioni costanti.",
    "created_at": "2020-02-21T05:46:56Z",
    "version": "1.6",
    "FAIL_TO_PASS": "[\"test_factor_terms\"]",
    "PASS_TO_PASS": "[\"test_Poly_mixed_operations\", \"test_Poly_from_dict\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_from_expr\", \"test_Poly__new__\", \"test_Poly__args\", \"test_Poly__gens\", \"test_Poly_zero\", \"test_Poly_one\", \"test_Poly__unify\", \"test_Poly_free_symbols\", \"test_PurePoly_free_symbols\", \"test_Poly__eq__\", \"test_PurePoly__eq__\", \"test_PurePoly_Poly\", \"test_Poly_get_domain\", \"test_Poly_set_domain\", \"test_Poly_get_modulus\", \"test_Poly_set_modulus\", \"test_Poly_add_ground\", \"test_Poly_sub_ground\", \"test_Poly_mul_ground\", \"test_Poly_quo_ground\", \"test_Poly_exquo_ground\", \"test_Poly_abs\", \"test_Poly_neg\", \"test_Poly_add\", \"test_Poly_sub\", \"test_Poly_mul\", \"test_issue_13079\", \"test_Poly_sqr\", \"test_Poly_pow\", \"test_Poly_divmod\", \"test_Poly_eq_ne\", \"test_Poly_nonzero\", \"test_Poly_properties\", \"test_Poly_is_irreducible\", \"test_Poly_subs\", \"test_Poly_replace\", \"test_Poly_reorder\", \"test_Poly_ltrim\", \"test_Poly_has_only_gens\", \"test_Poly_to_ring\", \"test_Poly_to_field\", \"test_Poly_to_exact\", \"test_Poly_retract\", \"test_Poly_slice\", \"test_Poly_coeffs\", \"test_Poly_monoms\", \"test_Poly_terms\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_termwise\", \"test_Poly_length\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_lift\", \"test_Poly_deflate\", \"test_Poly_inject\", \"test_Poly_eject\", \"test_Poly_exclude\", \"test_Poly__gen_to_level\", \"test_Poly_degree\", \"test_Poly_degree_list\", \"test_Poly_total_degree\", \"test_Poly_homogenize\", \"test_Poly_homogeneous_order\", \"test_Poly_LC\", \"test_Poly_TC\", \"test_Poly_EC\", \"test_Poly_coeff\", \"test_Poly_nth\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_EM\", \"test_Poly_LT\", \"test_Poly_ET\", \"test_Poly_max_norm\", \"test_Poly_l1_norm\", \"test_Poly_clear_denoms\", \"test_Poly_rat_clear_denoms\", \"test_Poly_integrate\", \"test_Poly_diff\", \"test_issue_9585\", \"test_Poly_eval\", \"test_Poly___call__\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_div\", \"test_issue_7864\", \"test_gcdex\", \"test_revert\", \"test_subresultants\", \"test_resultant\", \"test_discriminant\", \"test_dispersion\", \"test_gcd_list\", \"test_lcm_list\", \"test_gcd\", \"test_gcd_numbers_vs_polys\", \"test_terms_gcd\", \"test_trunc\", \"test_monic\", \"test_content\", \"test_primitive\", \"test_compose\", \"test_shift\", \"test_transform\", \"test_sturm\", \"test_gff\", \"test_norm\", \"test_sqf_norm\", \"test_sqf\", \"test_factor\", \"test_factor_large\", \"test_factor_noeval\", \"test_intervals\", \"test_refine_root\", \"test_count_roots\", \"test_Poly_root\", \"test_real_roots\", \"test_all_roots\", \"test_nroots\", \"test_ground_roots\", \"test_nth_power_roots_poly\", \"test_torational_factor_list\", \"test_cancel\", \"test_reduced\", \"test_groebner\", \"test_fglm\", \"test_is_zero_dimensional\", \"test_GroebnerBasis\", \"test_poly\", \"test_keep_coeff\", \"test_poly_matching_consistency\", \"test_noncommutative\", \"test_to_rational_coeffs\", \"test_as_list\", \"test_issue_11198\", \"test_Poly_precision\", \"test_issue_12400\", \"test_issue_14364\", \"test_issue_15669\", \"test_issue_17988\", \"test_issue_18205\"]",
    "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-7233",
    "base_commit": "51d37d1be95547059251076b3fadaa317750aab3",
    "patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,7 +973,10 @@ def construct(\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = set(window_dim) & set(self.obj.coords)\n+        # should handle window_dim being unindexed\n+        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(\n+            self.obj.coords\n+        )\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n",
    "test_patch": "diff --git a/xarray/tests/test_coarsen.py b/xarray/tests/test_coarsen.py\n--- a/xarray/tests/test_coarsen.py\n+++ b/xarray/tests/test_coarsen.py\n@@ -250,71 +250,91 @@ def test_coarsen_da_reduce(da, window, name) -> None:\n     assert_allclose(actual, expected)\n \n \n-@pytest.mark.parametrize(\"dask\", [True, False])\n-def test_coarsen_construct(dask: bool) -> None:\n-\n-    ds = Dataset(\n-        {\n-            \"vart\": (\"time\", np.arange(48), {\"a\": \"b\"}),\n-            \"varx\": (\"x\", np.arange(10), {\"a\": \"b\"}),\n-            \"vartx\": ((\"x\", \"time\"), np.arange(480).reshape(10, 48), {\"a\": \"b\"}),\n-            \"vary\": (\"y\", np.arange(12)),\n-        },\n-        coords={\"time\": np.arange(48), \"y\": np.arange(12)},\n-        attrs={\"foo\": \"bar\"},\n-    )\n-\n-    if dask and has_dask:\n-        ds = ds.chunk({\"x\": 4, \"time\": 10})\n-\n-    expected = xr.Dataset(attrs={\"foo\": \"bar\"})\n-    expected[\"vart\"] = ((\"year\", \"month\"), ds.vart.data.reshape((-1, 12)), {\"a\": \"b\"})\n-    expected[\"varx\"] = ((\"x\", \"x_reshaped\"), ds.varx.data.reshape((-1, 5)), {\"a\": \"b\"})\n-    expected[\"vartx\"] = (\n-        (\"x\", \"x_reshaped\", \"year\", \"month\"),\n-        ds.vartx.data.reshape(2, 5, 4, 12),\n-        {\"a\": \"b\"},\n-    )\n-    expected[\"vary\"] = ds.vary\n-    expected.coords[\"time\"] = ((\"year\", \"month\"), ds.time.data.reshape((-1, 12)))\n-\n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+class TestCoarsenConstruct:\n+    @pytest.mark.parametrize(\"dask\", [True, False])\n+    def test_coarsen_construct(self, dask: bool) -> None:\n+\n+        ds = Dataset(\n+            {\n+                \"vart\": (\"time\", np.arange(48), {\"a\": \"b\"}),\n+                \"varx\": (\"x\", np.arange(10), {\"a\": \"b\"}),\n+                \"vartx\": ((\"x\", \"time\"), np.arange(480).reshape(10, 48), {\"a\": \"b\"}),\n+                \"vary\": (\"y\", np.arange(12)),\n+            },\n+            coords={\"time\": np.arange(48), \"y\": np.arange(12)},\n+            attrs={\"foo\": \"bar\"},\n         )\n-    assert_identical(actual, expected)\n \n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            time=(\"year\", \"month\"), x=(\"x\", \"x_reshaped\")\n-        )\n-    assert_identical(actual, expected)\n+        if dask and has_dask:\n+            ds = ds.chunk({\"x\": 4, \"time\": 10})\n \n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}, keep_attrs=False\n+        expected = xr.Dataset(attrs={\"foo\": \"bar\"})\n+        expected[\"vart\"] = (\n+            (\"year\", \"month\"),\n+            ds.vart.data.reshape((-1, 12)),\n+            {\"a\": \"b\"},\n         )\n-        for var in actual:\n-            assert actual[var].attrs == {}\n-        assert actual.attrs == {}\n-\n-    with raise_if_dask_computes():\n-        actual = ds.vartx.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+        expected[\"varx\"] = (\n+            (\"x\", \"x_reshaped\"),\n+            ds.varx.data.reshape((-1, 5)),\n+            {\"a\": \"b\"},\n         )\n-    assert_identical(actual, expected[\"vartx\"])\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(foo=\"bar\")\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12, x=2).construct(time=(\"year\", \"month\"))\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct()\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(time=\"bar\")\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(time=(\"bar\",))\n+        expected[\"vartx\"] = (\n+            (\"x\", \"x_reshaped\", \"year\", \"month\"),\n+            ds.vartx.data.reshape(2, 5, 4, 12),\n+            {\"a\": \"b\"},\n+        )\n+        expected[\"vary\"] = ds.vary\n+        expected.coords[\"time\"] = ((\"year\", \"month\"), ds.time.data.reshape((-1, 12)))\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+            )\n+        assert_identical(actual, expected)\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                time=(\"year\", \"month\"), x=(\"x\", \"x_reshaped\")\n+            )\n+        assert_identical(actual, expected)\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}, keep_attrs=False\n+            )\n+            for var in actual:\n+                assert actual[var].attrs == {}\n+            assert actual.attrs == {}\n+\n+        with raise_if_dask_computes():\n+            actual = ds.vartx.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+            )\n+        assert_identical(actual, expected[\"vartx\"])\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(foo=\"bar\")\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12, x=2).construct(time=(\"year\", \"month\"))\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct()\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(time=\"bar\")\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(time=(\"bar\",))\n+\n+    def test_coarsen_construct_keeps_all_coords(self):\n+        da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+        da = da.assign_coords(day=365 * da)\n+\n+        result = da.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+        assert list(da.coords) == list(result.coords)\n+\n+        ds = da.to_dataset(name=\"T\")\n+        result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+        assert list(da.coords) == list(result.coords)\n",
    "problem_statement": "`ds.Coarsen.construct` degrada les coordenades sense unitats a variables\n### Què ha passat?\n\n`ds.Coarsen.construct` degrada les coordenades sense unitats a variables\n\n### Què esperaves que passés?\n\nTotes les variables que eren coordenades abans de `coarsen.construct` haurien de romandre com a coordenades després.\n\n### Exemple EMCV\n\n```Python\nIn [3]: da = xr.DataArray(np.arange(24), dims=[\"time\"])\r\n   ...: da = da.assign_coords(day=365 * da)\r\n   ...: ds = da.to_dataset(name=\"T\")\r\n\r\nIn [4]: ds\r\nOut[4]: \r\n<xarray.Dataset>\r\nDimensions:  (time: 24)\r\nCoordinates:\r\n    day      (time) int64 0 365 730 1095 1460 1825 ... 6935 7300 7665 8030 8395\r\nDimensions without coordinates: time\r\nData variables:\r\n    T        (time) int64 0 1 2 3 4 5 6 7 8 9 ... 14 15 16 17 18 19 20 21 22 23\r\n\r\nIn [5]: ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\r\nOut[5]: \r\n<xarray.Dataset>\r\nDimensions:  (year: 2, month: 12)\r\nCoordinates:\r\n    day      (year, month) int64 0 365 730 1095 1460 ... 7300 7665 8030 8395\r\nDimensions without coordinates: year, month\r\nData variables:\r\n    T        (year, month) int64 0 1 2 3 4 5 6 7 8 ... 16 17 18 19 20 21 22 23\n```\n\n### Confirmació de l'EMCV\n\n- [X] Exemple mínim — l'exemple és tan concentrat com és raonablement possible per demostrar el problema subjacent a xarray.\n- [X] Exemple complet — l'exemple és autònom, incloent tots els dades i el text de qualsevol rastre de pila.\n- [X] Exemple verificable — l'exemple es pot copiar i enganxar a una consola IPython o a un [quadern Binder](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), retornant el resultat.\n- [X] Nou problema — una cerca a les Problemes de GitHub suggereix que això no és un duplicat.\n\n### Sortida de registre rellevant\n\n_Sense resposta_\n\n### Alguna altra cosa que necessitem saber?\n\n_Sense resposta_\n\n### Entorn\n\n`main`",
    "hints_text": null,
    "created_at": "2022-10-27T23:46:49Z",
    "version": "2022.09",
    "FAIL_TO_PASS": "[\"xarray/tests/test_coarsen.py::TestCoarsenConstruct::test_coarsen_construct_keeps_all_coords\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_coarsen.py::test_coarsen_absent_dims_error[1-numpy]\", \"xarray/tests/test_coarsen.py::test_coarsen_absent_dims_error[1-dask]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-numpy-trim-left-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-numpy-trim-left-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-numpy-pad-right-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-numpy-pad-right-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-dask-trim-left-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-dask-trim-left-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-dask-pad-right-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_dataset[1-dask-pad-right-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_coords[1-numpy-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_coords[1-numpy-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_coords[1-dask-True]\", \"xarray/tests/test_coarsen.py::test_coarsen_coords[1-dask-False]\", \"xarray/tests/test_coarsen.py::test_coarsen_coords_cftime\", \"xarray/tests/test_coarsen.py::test_coarsen_keep_attrs[reduce-argument0]\", \"xarray/tests/test_coarsen.py::test_coarsen_keep_attrs[mean-argument1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-sum-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-mean-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-std-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-var-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-min-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-max-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[numpy-median-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-sum-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-mean-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-std-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-var-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-min-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-max-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-1-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_reduce[dask-median-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_keep_attrs[reduce-argument0]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_keep_attrs[mean-argument1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-sum-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-mean-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-std-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[numpy-max-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-sum-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-std-4-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-1-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-2-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-2-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-3-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-3-2]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-4-1]\", \"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-max-4-2]\", \"xarray/tests/test_coarsen.py::TestCoarsenConstruct::test_coarsen_construct[True]\", \"xarray/tests/test_coarsen.py::TestCoarsenConstruct::test_coarsen_construct[False]\"]",
    "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-16032",
    "base_commit": "0c3981eb5094419fe200eb46c71b5376a2266166",
    "patch": "diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -93,7 +93,6 @@ def get_prep_lookup(self):\n             elif not getattr(self.rhs, \"has_select_fields\", True) and not getattr(\n                 self.lhs.field.target_field, \"primary_key\", False\n             ):\n-                self.rhs.clear_select_clause()\n                 if (\n                     getattr(self.lhs.output_field, \"primary_key\", False)\n                     and self.lhs.output_field.model == self.rhs.model\n@@ -105,7 +104,7 @@ def get_prep_lookup(self):\n                     target_field = self.lhs.field.name\n                 else:\n                     target_field = self.lhs.field.target_field.name\n-                self.rhs.add_fields([target_field], True)\n+                self.rhs.set_values([target_field])\n         return super().get_prep_lookup()\n \n     def as_sql(self, compiler, connection):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -198,6 +198,7 @@ class Query(BaseExpression):\n     select_for_update_of = ()\n     select_for_no_key_update = False\n     select_related = False\n+    has_select_fields = False\n     # Arbitrary limit for select_related to prevents infinite recursion.\n     max_depth = 5\n     # Holds the selects defined by a call to values() or values_list()\n@@ -263,12 +264,6 @@ def output_field(self):\n         elif len(self.annotation_select) == 1:\n             return next(iter(self.annotation_select.values())).output_field\n \n-    @property\n-    def has_select_fields(self):\n-        return bool(\n-            self.select or self.annotation_select_mask or self.extra_select_mask\n-        )\n-\n     @cached_property\n     def base_table(self):\n         for alias in self.alias_map:\n@@ -2384,6 +2379,7 @@ def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        self.has_select_fields = True\n \n         if fields:\n             field_names = []\n",
    "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,34 @@ def test_annotation_filter_with_subquery(self):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
    "problem_statement": "__in non pulisce i campi selezionati sul lato destro quando QuerySet.alias() viene utilizzato dopo annotate().\nDescrizione\n\nEcco un caso di test per riprodurre il bug, puoi aggiungerlo in tests/annotations/tests.py:\n```python\ndef test_annotation_and_alias_filter_in_subquery(self):\n    long_books_qs = (\n        Book.objects.filter(\n            pages__gt=400,\n        )\n        .annotate(book_annotate=Value(1))\n        .alias(book_alias=Value(1))\n    )\n    publisher_books_qs = (\n        Publisher.objects.filter(\n            book__in=long_books_qs\n        )\n        .values(\"name\")\n    )\n    self.assertCountEqual(\n        publisher_books_qs,\n        [\n            {'name': 'Apress'},\n            {'name': 'Sams'},\n            {'name': 'Prentice Hall'},\n            {'name': 'Morgan Kaufmann'}\n        ]\n    )\n```\nDovresti ottenere questo errore:\n```\ndjango.db.utils.OperationalError: sub-select returns 10 columns - expected 1\n```",
    "hints_text": "Questo è un comportamento documentato e previsto.\nUtilizzare `.alias` o `.annotate` funziona come previsto senza usare `.values` per limitare a 1 colonna. Perché è così? Ma utilizzare entrambi non sembra funzionare.\n\nRisposta a Gabriel Muj: Utilizzare `.alias` o `.annotate` funziona come previsto senza usare `.values` per limitare a 1 colonna. Perché è così? Ma utilizzare entrambi non sembra funzionare. Abbiamo una semplificazione nella ricerca `__in` che limita automaticamente i campi selezionati alla **chiave primaria** quando la Query è sul lato destro e i campi selezionati non sono definiti. Sembra che non funzionino bene quando `.annotate()` e `.alias()` sono mescolati. Accettato provvisoriamente per l'indagine.\n\nChe la ricerca `In` imposti un lato destro della Query a `.values('pk')` o meno è basato su `rhs.has_select_fields` (​source). Questa proprietà dinamica è basata su `self.select` o `self.annotation_select_mask`, quindi sospetto che ci possa essere una logica errata in `Query.add_annotation` (​source) dall'introduzione di `QuerySet.alias` in `f4ac167119e8897c398527c392ed117326496652`. La riga `self.set_annotation_mask(set(self.annotation_select).difference({alias}))` sembra essere ciò che causa il problema qui. Se `annotate` e `alias` sono usati, allora `annotation_select_mask` verrà materializzato come una maschera è necessaria per tenere traccia di quali voci nelle annotazioni devono essere selezionate e così via (non necessario se si usa solo `alias` o `annotate` poiché il primo non richiede alcuna selezione e il secondo seleziona tutte le annotazioni). La logica `add_annotation` su cui si basa l'implementazione di `QuerySet.alias` non è sbagliata di per sé, ma si appoggia alla logica di mascheramento delle annotazioni su cui si basava solo `Query.set_values` in precedenza e ora capita di rompere le euristiche in `Query.has_select_fields`. La soluzione corretta è probabilmente sostituire `Query.has_select_fields` con un attributo di classe che predefinisce a `False` e avere `set_values` che lo imposta a `True` e assicurarsi che `Query.clone` trasporti l'attributo. Questo sembra un'opzione più duratura in quanto evita di cercare di guardare all'interno per determinare se è stata eseguita una chiamata a `values`. Gabriel, dato che hai già scritto un test di regressione, saresti interessato a inviare una patch che adotti l'approccio proposto sopra?\n\nCiao, sono nuovo al contributo di Django, ho provato a implementare la soluzione proposta da Simon, sostituendo `Query.has_select_fields` con un attributo `has_select_fields` con valore predefinito `False` e avendo `set_values` che lo imposta a `True`, ma ora sono bloccato nel trasportare l'attributo a `Query.clone`, posso avere un po' più di spiegazione per lo stesso? Modifica: Sostituire `Query_has_select_fields` con l'attributo e avere `set_values` che lo imposta a `True` passa i test per le annotazioni ma dà 2 Fallimenti sui test complessivi (query). I fallimenti sono: FALLITO: test_in_subquery (queries.tests.ToFieldTests) AssertionError: Elementi nel secondo insieme ma non nel primo: <Eaten: apple at lunch> FALLITO: test_nested_in_subquery (queries.tests.ToFieldTests) AssertionError: Sequenze diverse: <QuerySet []> != [<ReportComment: ReportComment object (1)>] La seconda sequenza contiene 1 elemento aggiuntivo. Primo elemento extra 0: <ReportComment: ReportComment object (1)>\n\nSe sei ancora in difficoltà con la parte di clonazione della patch, significa fondamentalmente che `Query.clone` deve assegnare `obj.has_select_fields = True` se `self.has_select_fields`. Questo non dovrebbe essere necessario poiché è un attributo di superficie e viene già trasportato. I test stanno fallendo perché `RelatedIn` ha bisogno di aggiustamenti per assicurarsi che passi attraverso `Query.set_values` invece di chiamare `clear_select_clause` e `add_fields` `django/db/models/fields/related_lookups.py` diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py index 1a845a1f7f..afea09b5a9 100644  \n```python\ndef get_prep_lookup(self):\n    ...\n    elif not getattr(self.rhs, \"has_select_fields\", True) and not getattr(\n        self.lhs.field.target_field, \"primary_key\", False\n    ):\n        self.rhs.clear_select_clause()\n    if (\n        getattr(self.lhs.output_field, \"primary_key\", False)\n        and self.lhs.output_field.model == self.rhs.model\n    ):\n        ...\n    def get_prep_lookup(self):\n        ...\n        target_field = self.lhs.field.target_field.name\n        self.rhs.set_values([target_field])\n        return super().get_prep_lookup()\n```\nGrazie, ha funzionato! Apro una PR.",
    "created_at": "2022-09-06T09:54:57Z",
    "version": "4.2",
    "FAIL_TO_PASS": "[\"test_annotation_and_alias_filter_in_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_and_alias_filter_related_in_subquery (annotations.tests.NonAggregateAnnotationTestCase)\"]",
    "PASS_TO_PASS": "[\"test_aggregate_alias (annotations.tests.AliasTests)\", \"test_alias_after_annotation (annotations.tests.AliasTests)\", \"test_alias_annotate_with_aggregation (annotations.tests.AliasTests)\", \"test_alias_annotation_expression (annotations.tests.AliasTests)\", \"test_alias_default_alias_expression (annotations.tests.AliasTests)\", \"test_alias_sql_injection (annotations.tests.AliasTests)\", \"test_basic_alias (annotations.tests.AliasTests)\", \"test_basic_alias_annotation (annotations.tests.AliasTests)\", \"test_basic_alias_f_annotation (annotations.tests.AliasTests)\", \"test_basic_alias_f_transform_annotation (annotations.tests.AliasTests)\", \"test_dates_alias (annotations.tests.AliasTests)\", \"test_datetimes_alias (annotations.tests.AliasTests)\", \"test_defer_only_alias (annotations.tests.AliasTests)\", \"test_filter_alias_agg_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_f (annotations.tests.AliasTests)\", \"test_joined_alias_annotation (annotations.tests.AliasTests)\", \"test_order_by_alias (annotations.tests.AliasTests)\", \"test_order_by_alias_aggregate (annotations.tests.AliasTests)\", \"test_overwrite_alias_with_annotation (annotations.tests.AliasTests)\", \"test_overwrite_annotation_with_alias (annotations.tests.AliasTests)\", \"test_update_with_alias (annotations.tests.AliasTests)\", \"test_values_alias (annotations.tests.AliasTests)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_aggregate_over_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_alias_forbidden_chars (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_alias_sql_injection (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_subquery_and_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_subquery_outerref_transform (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_transforms (annotations.tests.NonAggregateAnnotationTestCase)\", \"Columns are aligned in the correct order for resolve_columns. This test\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_transform_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"Deferred attributes can be referenced by an annotation,\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_queryset_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_full_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_grouping_by_q_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_transformed_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"Fields on an inherited model can be referenced by an\", \"Annotating None onto a model round-trips\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_q_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"Annotations can reference fields in a values clause,\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
    "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13658",
    "base_commit": "0773837e15bb632afffb6848a58c59a791008fa1",
    "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,12 @@ def execute(self):\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False,\n+        )\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n",
    "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -17,7 +17,7 @@\n from django import conf, get_version\n from django.conf import settings\n from django.core.management import (\n-    BaseCommand, CommandError, call_command, color,\n+    BaseCommand, CommandError, call_command, color, execute_from_command_line,\n )\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n@@ -31,6 +31,7 @@\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1867,6 +1868,20 @@ def _test(self, args, option_b=\"'2'\"):\n         )\n \n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+\n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n",
    "problem_statement": "ManagementUtility istanzia CommandParser senza passare l'argomento prog già calcolato\nDescrizione\n\nManagementUtility si impegna a analizzare il nome del programma da argv che gli viene passato invece che da sys.argv:\n\tdef __init__(self, argv=None):\n\t\tself.argv = argv or sys.argv[:]\n\t\tself.prog_name = os.path.basename(self.argv[0])\n\t\tif self.prog_name == '__main__.py':\n\t\t\tself.prog_name = 'python -m django'\nMa poi, quando deve analizzare --pythonpath e --settings, utilizza il nome del programma da sys.argv:\n\t\tparser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\nSopra \"%(prog)s\" si riferisce a sys.argv[0]. Invece, dovrebbe fare riferimento a self.prog_name. Questo può essere corretto come segue:\n\t\tparser = CommandParser(\n\t\t\tprog=self.prog_name,\n\t\t\tusage='%(prog)s subcommand [options] [args]',\n\t\t\tadd_help=False,\n\t\t\tallow_abbrev=False)\nSono conscio che execute_from_command_line è un'API privata, ma sarebbe davvero comodo per me se funzionasse correttamente nel mio strano ambiente incorporato dove sys.argv[0] è in modo errato None. Se passare il mio argv a execute_from_command_line evitasse tutte le eccezioni successive, non avrei bisogno di modificare sys.argv[0] globalmente come sto facendo nel frattempo.",
    "hints_text": "Accettato in via provvisoria, sembra valido ma non sono riuscito a riprodurre il messaggio non valido (nemmeno simulando `sys.argv`), quindi un test di regressione è fondamentale.",
    "created_at": "2020-11-09T20:50:28Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_program_name_from_argv (admin_scripts.tests.ExecuteFromCommandLine)\"]",
    "PASS_TO_PASS": "[\"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_no_database (admin_scripts.tests.ManageRunserver)\", \"test_readonly_database (admin_scripts.tests.ManageRunserver)\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_precedence (admin_scripts.tests.Discovery)\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings)\", \"Regression for #20509\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"test_commands_with_invalid_settings (admin_scripts.tests.DjangoAdminNoSettings)\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"test_importable_name (admin_scripts.tests.StartApp)\", \"test_importable_target_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"test_invalid_target_name (admin_scripts.tests.StartApp)\", \"test_overlaying_app (admin_scripts.tests.StartApp)\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"test_warning_does_not_halt (admin_scripts.tests.ManageCheck)\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"Runs without error and emits settings diff.\", \"test_custom_default (admin_scripts.tests.DiffSettings)\", \"test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)\", \"test_settings_configured (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"test_custom_project_destination_missing (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to render custom files\", \"test_importable_project_name (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"test_base_run_from_argv (admin_scripts.tests.CommandTypes)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"test_force_color_command_init (admin_scripts.tests.CommandTypes)\", \"test_force_color_execute (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes)\", \"test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes)\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)\", \"test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "matplotlib/matplotlib",
    "instance_id": "matplotlib__matplotlib-22865",
    "base_commit": "c6c7ec1978c22ae2c704555a873d0ec6e1e2eaa8",
    "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,12 @@ def _add_solids(self, X, Y, C):\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            start_idx = 0 if self._extend_lower() else 1\n+            end_idx = len(X) if self._extend_upper() else -1\n+            self.dividers.set_segments(np.dstack([X, Y])[start_idx:end_idx])\n+        else:\n+            self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n",
    "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,30 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+    ])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n+\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
    "problem_statement": "[Bug]: Colorbar con drawedges=True e extend='both' non disegna i bordi alle estremità\n### Riepilogo del bug\n\nQuando si crea una colorbar di matplotlib, è possibile impostare drawedges su True, che separa i colori della colorbar con linee nere. Tuttavia, quando la colorbar viene estesa utilizzando extend='both', le linee nere alle estremità non vengono visualizzate.\n\n### Codice per la riproduzione\n\n```python\nimport matplotlib as mpl\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt  \r\nfrom matplotlib.colors import from_levels_and_colors\r\n\r\nmy_cmap = mpl.cm.viridis\r\nbounds = np.arange(10)\r\nnb_colors = len(bounds) + 1\r\ncolors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\r\nmy_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\r\n\r\nplt.figure(figsize=(5, 1))\r\nax = plt.subplot(111)\r\ncbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\r\nplt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)\r\nplt.show()\n```\n\n### Risultato effettivo\n\n![image](https://user-images.githubusercontent.com/34058459/164254401-7516988d-1efb-4887-a631-de9a68357685.png)\n\n### Risultato atteso\n\n![image](https://user-images.githubusercontent.com/34058459/164254881-92c167b7-aa13-4972-9955-48221b38b866.png)\n\n### Informazioni aggiuntive\n\n_Nessuna risposta_\n\n### Sistema operativo\n\n_Nessuna risposta_\n\n### Versione di Matplotlib\n\n3.5.1\n\n### Backend di Matplotlib\n\n_Nessuna risposta_\n\n### Versione di Python\n\n_Nessuna risposta_\n\n### Versione di Jupyter\n\n_Nessuna risposta_\n\n### Installazione\n\n_Nessuna risposta_",
    "hints_text": null,
    "created_at": "2022-04-20T15:15:11Z",
    "version": "3.5",
    "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[both-1-res0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[min-0-res1]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[max-0-res2]\"]",
    "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_false\", \"lib/matplotlib/tests/test_colorbar.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\", \"lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[neither--1-res3]\", \"lib/matplotlib/tests/test_colorbar.py::test_negative_boundarynorm\", \"lib/matplotlib/tests/test_colorbar.py::test_boundaries[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_no_warning_rcparams_grid_true\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_set_formatter_locator\", \"lib/matplotlib/tests/test_colorbar.py::test_offset_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_title_text_loc\"]",
    "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "scikit-learn/scikit-learn",
    "instance_id": "scikit-learn__scikit-learn-11578",
    "base_commit": "dd69361a0d9c6ccde0d2353b00b86e0e7541a3e3",
    "patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -922,7 +922,7 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         check_input=False, max_squared_sum=max_squared_sum,\n         sample_weight=sample_weight)\n \n-    log_reg = LogisticRegression(fit_intercept=fit_intercept)\n+    log_reg = LogisticRegression(multi_class=multi_class)\n \n     # The score method of Logistic Regression has a classes_ attribute.\n     if multi_class == 'ovr':\n",
    "test_patch": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -6,6 +6,7 @@\n \n from sklearn.datasets import load_iris, make_classification\n from sklearn.metrics import log_loss\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.model_selection import StratifiedKFold\n from sklearn.preprocessing import LabelEncoder\n from sklearn.utils import compute_class_weight\n@@ -29,7 +30,7 @@\n     logistic_regression_path, LogisticRegressionCV,\n     _logistic_loss_and_grad, _logistic_grad_hess,\n     _multinomial_grad_hess, _logistic_loss,\n-)\n+    _log_reg_scoring_path)\n \n X = [[-1, 0], [0, 1], [1, 1]]\n X_sp = sp.csr_matrix(X)\n@@ -492,6 +493,39 @@ def test_logistic_cv():\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          # no need to test for micro averaging because it\n+                          # is the same as accuracy for f1, precision,\n+                          # and recall (see https://github.com/\n+                          # scikit-learn/scikit-learn/pull/\n+                          # 11578#discussion_r203250062)\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n+\n+\n def test_multinomial_logistic_regression_string_inputs():\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n",
    "problem_statement": "Per i classificatori probabilistici come `neg_log_loss` che utilizzano `.predict_proba()`, LogisticRegressionCV(multi_class='multinomial') utilizza OvR per calcolare i punteggi\nDescrizione:\n\nPer i classificatori probabilistici come `neg_log_loss` che utilizzano `.predict_proba()` per ottenere stime di probabilità da un classificatore, le previsioni utilizzate per generare i punteggi per `LogisticRegression(multi_class='multinomial')` non sembrano essere le stesse previsioni generate dal metodo `.predict_proba()` di `LogisticRegressionCV(multi_class='multinomial')`. Il primo utilizza una singola funzione logistica e normalizza (approccio one-vs-rest, OvR), mentre il secondo utilizza la funzione softmax (approccio multinomial).\n\nQuesto sembra essere dovuto al fatto che l'istanza `LogisticRegression()` fornita alla funzione di punteggio alla riga 955 di logistic.py all'interno della funzione helper `_log_reg_scoring_path()`,\n(https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L955)\n`scores.append(scoring(log_reg, X_test, y_test))`,\nviene inizializzata,\n(https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L922)\n`log_reg = LogisticRegression(fit_intercept=fit_intercept)`,\nsenza un argomento multi_class, e quindi prende il valore predefinito, che è `multi_class='ovr'`.\n\nSembra che modificare la riga 922 in modo che l'istanza `LogisticRegression()` fornita alla funzione di punteggio alla riga 955 erediti l'opzione `multi_class` specificata in `LogisticRegressionCV()` sarebbe una soluzione, ma non sono un programmatore e apprezzerei qualche consiglio da esperti! Allo stesso modo, non so se questo problema esiste per altri classificatori/regressori, poiché ho lavorato solo con la Regressione Logistica.\n\nEsempio minimo:\n\n```py\nimport numpy as np\nfrom sklearn import preprocessing, linear_model, utils\n\ndef ovr_approach(decision_function):\n    \n    probs = 1. / (1. + np.exp(-decision_function))\n    probs = probs / probs.sum(axis=1).reshape((probs.shape[0], -1))\n    \n    return probs\n\ndef score_from_probs(probs, y_bin):\n    \n    return (y_bin*np.log(probs)).sum(axis=1).mean()\n    \n    \nnp.random.seed(seed=1234)\n\nsamples  = 200\nfeatures = 5\nfolds    = 10\n\n# Usa un classificatore \"probabilistico\"\nscorer = 'neg_log_loss'\n\nx = np.random.random(size=(samples, features))\ny = np.random.choice(['a', 'b', 'c'], size=samples)\n\ntest  = np.random.choice(range(samples), size=int(samples/float(folds)), replace=False)\ntrain = [idx for idx in range(samples) if idx not in test]\n\n# Binarizza le etichette per y[test]\nlb = preprocessing.label.LabelBinarizer()\nlb.fit(y[test])\ny_bin = lb.transform(y[test])\n\n# Cosa ci dà _log_reg_scoring_path per il punteggio?\ncoefs, _, scores, _ = linear_model.logistic._log_reg_scoring_path(x, y, train, test, fit_intercept=True, scoring=scorer, multi_class='multinomial')\n\n# Scegli un singolo C da esaminare, per semplicità\nc_index = 0\ncoefs = coefs[c_index]\nscores = scores[c_index]\n\n# Inizializza un'istanza LogisticRegression(), come in \n# https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L922\nexisting_log_reg = linear_model.LogisticRegression(fit_intercept=True)\nexisting_log_reg.coef_      = coefs[:, :-1]\nexisting_log_reg.intercept_ = coefs[:, -1]\n\nexisting_dec_fn = existing_log_reg.decision_function(x[test])\n\nexisting_probs_builtin = existing_log_reg.predict_proba(x[test])\n\n# Approccio OvR\nexisting_probs_ovr = ovr_approach(existing_dec_fn)\n\n# Approccio multinomial\nexisting_probs_multi = utils.extmath.softmax(existing_dec_fn)\n\n# Se inizializziamo la nostra istanza LogisticRegression(), con multi_class='multinomial'\nnew_log_reg = linear_model.LogisticRegression(fit_intercept=True, multi_class='multinomial')\nnew_log_reg.coef_      = coefs[:, :-1]\nnew_log_reg.intercept_ = coefs[:, -1]\n\nnew_dec_fn = new_log_reg.decision_function(x[test])\n\nnew_probs_builtin = new_log_reg.predict_proba(x[test])\n\n# Approccio OvR\nnew_probs_ovr = ovr_approach(new_dec_fn)\n\n# Approccio multinomial\nnew_probs_multi = utils.extmath.softmax(new_dec_fn)\n\nprint 'punteggio restituito da _log_reg_scoring_path'\nprint scores\n# -1.10566998\n\nprint 'funzione di decisione OvR LR == funzione di decisione multinomial LR?'\nprint (existing_dec_fn == new_dec_fn).all()\n# True\n\nprint 'punteggio calcolato tramite metodo OvR (qualsiasi funzione di decisione)'\nprint score_from_probs(existing_probs_ovr, y_bin)\n# -1.10566997908\n\nprint 'punteggio calcolato tramite metodo multinomial (qualsiasi funzione di decisione)'\nprint score_from_probs(existing_probs_multi, y_bin)\n# -1.11426297223\n\nprint 'probabilità previste da existing_log_reg.predict_proba() == probabilità generate tramite approccio OvR?'\nprint (existing_probs_builtin == existing_probs_ovr).all()\n# True\n\nprint 'probabilità previste da existing_log_reg.predict_proba() == probabilità generate tramite approccio multinomial?'\nprint (existing_probs_builtin == existing_probs_multi).any()\n# False\n\nprint 'probabilità previste da new_log_reg.predict_proba() == probabilità generate tramite approccio OvR?'\nprint (new_probs_builtin == new_probs_ovr).all()\n# False\n\nprint 'probabilità previste da new_log_reg.predict_proba() == probabilità generate tramite approccio multinomial?'\nprint (new_probs_builtin == new_probs_multi).any()\n# True\n\n# Quindi, anche se multi_class='multinomial' è stato specificato in _log_reg_scoring_path(), \n# il punteggio restituito è stato calcolato tramite OvR, non multinomial.\n# Possiamo vedere che log_reg.predict_proba() restituisce le probabilità previste da OvR,\n# non le probabilità previste da multinomial.\n```\n\nVersioni:\nLinux-4.4.0-72-generic-x86_64-with-Ubuntu-14.04-trusty\nPython 2.7.6\nNumPy 1.12.0\nSciPy 0.18.1\nScikit-learn 0.18.1\n\n[WIP] corretto bug in _log_reg_scoring_path\n<!--\nGrazie per aver contribuito con una pull request! Assicurati di aver dato un'occhiata alle linee guida per i contributi: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#Contributing-Pull-Requests\n-->\n#### Problema di riferimento\n<!-- Esempio: Fixes #1234 -->\nFixes #8720 \n\n#### Cosa implementa/risolve questo? Spiega le tue modifiche.\nNel metodo _log_reg_scoring_path, il costruttore di LogisticRegression accettava solo fit_intercept come argomento, il che causava il bug spiegato nel problema sopra.\nCome suggerito da @njiles, aggiungendo multi_class come argomento quando si crea l'oggetto logistic regression, si risolve il problema per il caso multi_class.\nDopo di ciò, sembra che altri parametri simili debbano essere passati come argomenti al costruttore di logistic regression.\nInoltre, è stato modificato il valore predefinito di intercept_scaling in float\n\n#### Altri commenti?\nTestato sul codice fornito nel problema da @njiles con vari argomenti su `linear_model.logistic._log_reg_scoring_path` e `linear_model.LogisticRegression`, sembra ok.\nProbabilmente necessita di ulteriori test.\n\n<!--\nSi prega di essere consapevoli che siamo un gruppo di volontari, quindi la pazienza è\nnecessaria; l'assistenza nella gestione di altri problemi è molto apprezzata. Valutiamo\ntutti i contributi degli utenti, non importa quanto siano minimi. Se siamo lenti a\nrivedere, o la pull request necessita di benchmark, aggiustamenti,\nconvincimenti, ecc. o più probabilmente i revisori sono semplicemente occupati. In entrambi\ni casi, chiediamo la vostra comprensione durante il processo di revisione.\nPer ulteriori informazioni, consulta la nostra FAQ su questo argomento:\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\n\nGrazie per il tuo contributo!\n-->",
    "hints_text": "Sì, sembra un bug. Grazie per la segnalazione. Una correzione e un test sono i benvenuti.\n> Sembra che modificare la riga 922 in questo modo:\r\n> log_reg = LogisticRegression(fit_intercept=fit_intercept, multi_class=multi_class)\r\n> in modo che l'istanza di LogisticRegression() fornita alla funzione di scoring alla riga 955 erediti l'opzione multi_class specificata in LogisticRegressionCV() potrebbe essere una soluzione, ma non sono un programmatore e apprezzerei il parere di un esperto!\r\n\r\nSembra buono\nSì, pensavo di aver risposto a questo. Una pull request è molto benvenuta.\n\nIl 12 aprile 2017 alle 03:13, Tom Dupré la Tour <notifications@github.com>\nha scritto:\n\n> Sembra che modificare la riga 922 in questo modo:\n> log_reg = LogisticRegression(fit_intercept=fit_intercept,\n> multi_class=multi_class)\n> in modo che l'istanza di LogisticRegression() fornita alla funzione di scoring\n> alla riga 955 erediti l'opzione multi_class specificata in\n> LogisticRegressionCV() potrebbe essere una soluzione, ma non sono un programmatore e\n> apprezzerei il parere di un esperto!\n>\n> Sembra buono\n>\n> —\n> Stai ricevendo questa email perché hai commentato.\n> Rispondi direttamente a questa email, visualizzala su GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/8720#issuecomment-293333053>,\n> o disattiva le notifiche per questo thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz62ZEqTnYubanTrD-Xl7Elc40WtAsks5ru7TKgaJpZM4M2uJS>\n> .\n>\n\nVorrei indagare su questo. Per favore fai\n_log_reg_scoring_path: https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L771\r\nHa un sacco di parametri che possono essere passati al costruttore di regressione logistica come \"penalty\", \"dual\", \"multi_class\", ecc., ma al costruttore viene passato solo fit_intercept su https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L922.\r\n\r\nCostruttore di LogisticRegression:\r\n```python\r\ndef __init__(self, penalty='l2', dual=False, tol=1e-4, C=1.0,\r\n                 fit_intercept=True, intercept_scaling=1, class_weight=None,\r\n                 random_state=None, solver='liblinear', max_iter=100,\r\n                 multi_class='ovr', verbose=0, warm_start=False, n_jobs=1)\r\n```\r\n\r\nMetodo _log_reg_scoring_path:\r\n```python\r\ndef _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\r\n                          scoring=None, fit_intercept=False,\r\n                          max_iter=100, tol=1e-4, class_weight=None,\r\n                          verbose=0, solver='lbfgs', penalty='l2',\r\n                          dual=False, intercept_scaling=1.,\r\n                          multi_class='ovr', random_state=None,\r\n                          max_squared_sum=None, sample_weight=None)\r\n```\r\n\r\nSi può vedere che hanno parametri simili con valori predefiniti uguali: penalty, dual, tol, intercept_scaling, class_weight, random_state, max_iter, multi_class, verbose;\r\ne due parametri con valori predefiniti diversi: solver, fit_intercept.\r\n\r\nCome suggerito da @njiles, aggiungere multi_class come argomento quando si crea l'oggetto di regressione logistica, risolve il problema per il caso multi_class.\r\nDopo di ciò, sembra che i parametri dalla lista sopra dovrebbero essere passati come argomenti al costruttore di regressione logistica.\r\nDopo aver cercato con modelli e schermato il codice, non ho trovato bug simili in altri file. Per favore invia una PR idealmente con un test per il comportamento corretto di ogni parametro.\n\nIl 19 apr 2017 8:39 am, \"Shyngys Zhiyenbek\" <notifications@github.com>\nha scritto:\n\n> _log_reg_scoring_path: https://github.com/scikit-learn/scikit-learn/blob/\n> master/sklearn/linear_model/logistic.py#L771\n> Ha un sacco di parametri che possono essere passati al costruttore di regressione logistica\n> come \"penalty\", \"dual\", \"multi_class\", ecc., ma al costruttore viene passato solo\n> fit_intercept su https://github.com/scikit-\n> learn/scikit-learn/blob/master/sklearn/linear_model/logistic.py#L922.\n>\n> Costruttore di LogisticRegression:\n> ```python\n> def __init__(self, penalty='l2', dual=False, tol=1e-4, C=1.0,\n> fit_intercept=True, intercept_scaling=1, class_weight=None,\n> random_state=None, solver='liblinear', max_iter=100, multi_class='ovr',\n> verbose=0, warm_start=False, n_jobs=1)\n> ```\n>\n> Metodo _log_reg_scoring_path:\n> ```python\n> def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n> scoring=None, fit_intercept=False, max_iter=100, tol=1e-4,\n> class_weight=None, verbose=0, solver='lbfgs', penalty='l2', dual=False,\n> intercept_scaling=1., multi_class='ovr', random_state=None,\n> max_squared_sum=None, sample_weight=None)\n> ```\n>\n> Si può vedere che hanno parametri simili con valori predefiniti\n> uguali: penalty, dual, tol, intercept_scaling, class_weight, random_state,\n> max_iter, multi_class, verbose;\n> e due parametri con valori predefiniti diversi: solver, fit_intercept.\n>\n> Come suggerito da @njiles <https://github.com/njiles>, aggiungere multi_class come\n> argomento quando si crea l'oggetto di regressione logistica, risolve il problema per\n> il caso multi_class.\n> Dopo di ciò, sembra che i parametri dalla lista sopra dovrebbero essere passati\n> come argomenti al costruttore di regressione logistica.\n> Dopo aver cercato con modelli, non ho trovato bug simili in altri file.\n>\n> —\n> Stai ricevendo questa email perché hai commentato.\n> Rispondi direttamente a questa email, visualizzala su GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/8720#issuecomment-295004842>,\n> o disattiva le notifiche per questo thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz677KSfKhFyvk7HMpAwlTosVNJp6Zks5rxTuWgaJpZM4M2uJS>\n> .\n>\n\nVorrei occuparmi di questo durante lo sprint\r\n\r\nLeggendo il codice, se ho capito correttamente, `_log_reg_scoring_path` trova i coeffs/intercept per ogni valore di `C` in `Cs`, chiamando l'helper `logistic_regression_path`, e poi crea un'istanza vuota di LogisticRegression usata solo per lo scoring. Questa istanza imposta `coeffs_` e `intercept_` trovati prima e poi chiama la funzione di scoring desiderata. Quindi ho la sensazione che debba solo ereditare dai parametri che influenzano lo scoring.\r\n\r\nLo scoring infatti potrebbe chiamare `predict`,  `predict_proba_lr`, `predict_proba`, `predict_log_proba` e/o `decision_function`, e in queste funzioni l'unica variabile influenzata dagli argomenti di `LogisticRegression` è `self.multi_class` (in `predict_proba`), come suggerito nella discussione.\r\n`self.intercept_` è anche talvolta usato ma viene impostato manualmente in queste righe\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/46913adf0757d1a6cae3fff0210a973e9d995bac/sklearn/linear_model/logistic.py#L948-L953\r\n\r\nquindi penso che non sia nemmeno necessario impostare il flag `fit_intercept` nell'istanza vuota di `LogisticRegression`. Quindi, solo l'argomento `multi_class` dovrebbe essere impostato poiché non vengono usati. Quindi, riguardo al commento di @aqua4, non sarebbe necessario ereditare tutti i parametri.\r\n\r\nPer riassumere, se questo è corretto, come suggerito da @njiles dovrei ereditare dall'argomento `multi_class` nella chiamata `LogisticRegression`. E come suggerito sopra, potrei anche eliminare l'impostazione di `fit_intercept` poiché l'intercept viene impostato manualmente più avanti nel codice, quindi questo parametro è inutile.\r\n\r\nQuesto alla fine si tradurrebbe nel sostituire questa riga:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/46913adf0757d1a6cae3fff0210a973e9d995bac/sklearn/linear_model/logistic.py#L925\r\n\r\ncon questa:\r\n```python\r\nlog_reg = LogisticRegression(multi_class=multi_class)\r\n```\r\n\r\nSto pensando ai test ora ma spero che questi primi elementi siano già corretti\r\n\r\nStai continuando con questa correzione? I fallimenti dei test devono essere affrontati e dovrebbe essere aggiunto un test di non regressione.\n@jnothman Sì, scusa per il lungo periodo di inattività, completerò questo con i test, presto!",
    "created_at": "2018-07-16T23:21:56Z",
    "version": "0.20",
    "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[neg_log_loss-multiclass_agg_list3]\"]",
    "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_logistic.py::test_predict_2_classes\", \"sklearn/linear_model/tests/test_logistic.py::test_error\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_mock_scorer\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_score_does_not_warn_by_default\", \"sklearn/linear_model/tests/test_logistic.py::test_lr_liblinear_warning\", \"sklearn/linear_model/tests/test_logistic.py::test_predict_3_classes\", \"sklearn/linear_model/tests/test_logistic.py::test_predict_iris\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegression]\", \"sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegressionCV]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary_probabilities\", \"sklearn/linear_model/tests/test_logistic.py::test_sparsify\", \"sklearn/linear_model/tests/test_logistic.py::test_inconsistent_input\", \"sklearn/linear_model/tests/test_logistic.py::test_write_parameters\", \"sklearn/linear_model/tests/test_logistic.py::test_nan\", \"sklearn/linear_model/tests/test_logistic.py::test_consistency_path\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_convergence_fail\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_dual_random_state\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_loss_and_grad\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_grad_hess\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[accuracy-multiclass_agg_list0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[precision-multiclass_agg_list1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[recall-multiclass_agg_list4]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_logistic_regression_string_inputs\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_intercept_logistic_helper\", \"sklearn/linear_model/tests/test_logistic.py::test_ovr_multinomial_iris\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers_multiclass\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regressioncv_class_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_sample_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_class_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multinomial\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_grad_hess\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_decision_function_zero\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_logregcv_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_saga_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling_zero\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_l1\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_l1_sparse_data\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_cv_penalty\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_predict_proba_multinomial\", \"sklearn/linear_model/tests/test_logistic.py::test_max_iter\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[liblinear]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_saga_vs_liblinear\", \"sklearn/linear_model/tests/test_logistic.py::test_dtype_match\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start_converge_LR\"]",
    "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-12754",
    "base_commit": "18759b2209ff556aed7f20d83cbf23e3d234e41c",
    "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -563,6 +563,16 @@ def generate_created_models(self):\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    # Depend on the removal of base fields if the new model has\n+                    # a field with the same name.\n+                    old_base_model_state = self.from_state.models.get((base_app_label, base_name))\n+                    new_base_model_state = self.to_state.models.get((base_app_label, base_name))\n+                    if old_base_model_state and new_base_model_state:\n+                        removed_base_fields = set(old_base_model_state.fields).difference(\n+                            new_base_model_state.fields,\n+                        ).intersection(model_state.fields)\n+                        for removed_base_field in removed_base_fields:\n+                            dependencies.append((base_app_label, base_name, removed_base_field, False))\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\n",
    "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2454,3 +2454,28 @@ def test_mti_inheritance_model_removal(self):\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n         self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n",
    "problem_statement": "FieldError al migrare un campo a una nuova sottoclasse di modello.\nDescrizione\n\nAnalogamente a #21890. Se si crea una sottoclasse di modello e si sposta un campo su di essa nello stesso passaggio, `makemigrations` funziona, ma `migrate` fallisce con `django.core.exceptions.FieldError: Il campo locale 'title' nella classe 'Book' entra in conflitto con un campo dello stesso nome dalla classe base 'Readable'.\nAd esempio, prendi questo modello:\n```python\nfrom django.db import models\nclass Readable(models.Model):\n    title = models.CharField(max_length=200)\n```\nE modificalo in questo modo:\n```python\nfrom django.db import models\nclass Readable(models.Model):\n    pass\nclass Book(Readable):\n    title = models.CharField(max_length=200)\n```\nLa migrazione genera `CreateModel` per `Book`, poi `RemoveField` per `Readable.title`. Tuttavia, eseguirla produce l'errore.\nInvertire l'ordine delle operazioni di migrazione risolve il problema. Il rilevatore automatico dovrebbe essere in grado di utilizzare questo ordine.",
    "hints_text": "Accettato in via provvisoria per un'indagine futura. Non sono sicuro che sia fattibile, perché rilevare le modifiche relative alle basi dei modelli è complicato. Inoltre, con tale modifica si perdono dati, quindi a mio parere è preferibile gestire manualmente.\nForse `makemigrations` potrebbe fornire informazioni sui dati persi e lasciare all'utente la decisione di applicare o meno le migrazioni?\nForse `makemigrations` potrebbe fornire informazioni sui dati persi e lasciare all'utente la decisione di applicare o meno le migrazioni? Sì, o potrebbe almeno rilevare che la migrazione generata non può essere applicata senza modifiche manuali per controllare la perdita di dati e mostrare un avviso/messaggio in merito.\nQuesto sarebbe fattibile per un principiante come me? Molto apprezzato! Dovrei semplicemente visualizzare un messaggio o un avviso come \"la migrazione non può essere applicata a meno che non vengano apportate alcune modifiche manuali\" ogni volta che si verifica? Oppure dovrei dare all'utente una sorta di opzione sì/no in modo che possa scegliere di eseguire `makemigration` o meno? Oppure è appropriato consentire al rilevatore automatico di utilizzare l'ordine inverso quando si incontra una situazione del genere? O penso che potrebbe essere più appropriato: potremmo dover consentire al rilevatore automatico di utilizzare l'ordine inverso o corretto (che non genera un errore) quando si incontra una situazione del genere, nonché visualizzare un messaggio o un avviso lungo il percorso, poiché il messaggio potrebbe educare le persone che vogliono intraprendere un'azione del genere.\nPenso che dovrebbe essere fattibile insegnare al rilevatore automatico a generare queste operazioni nell'ordine corretto. Penso che il miglior approccio sarebbe quello di regolare `check_dependency` per tener conto di questo caso. Ciò che sta accadendo ora è che il rilevamento dei modelli creati viene eseguito prima di quello dei modelli rimossi, quindi mentre entrambe le operazioni dipendono dal modello `Readable`. È possibile che `generate_created_models` debba essere regolato per aggiungere una dipendenza sulla rimozione del campo di tutte le sue basi per assicurarsi che l'ordine sia invertito. Penso che la rappresentazione della dipendenza corretta sia `(base_app_label, base_model_name, field_name, False)` per tutti i campi in tutte le basi in ​https://github.com/django/django/blob/6fbce45b0376f0ec8f3bf244f4f1f8d62c201f58/django/db/migrations/autodetector.py#L561-L565. Qualcosa che la soluzione deve considerare è quando un campo viene rimosso da una base mentre due sottoclassi vengono aggiunte nella stessa esecuzione con questo campo (ad esempio, una classe extra `Magazine(Readable): title = models.CharField(max_length=200)` verrebbe aggiunta all'esempio del reporter). In questo caso, deve essere generata una singola `RemoveField` e non più di una.\nRisposta a Simon Charette: Penso che dovrebbe essere fattibile insegnare al rilevatore automatico a generare queste operazioni nell'ordine corretto. Penso che il miglior approccio sarebbe quello di regolare `check_dependency` per tener conto di questo caso. Non riesco a capire come regolare `check_dependency` potrebbe aiutare a risolvere questo problema. Supponendo che io scorra tutti i campi presenti nel modello base, controlli se sono presenti nel modello ereditato e, se ci sono campi del genere, aggiunga `base_app_label, base_name, field_name, False` alle dipendenze, come farebbe la regolazione di `check_dependency` a riordinare le migrazioni? Grazie Sanskar\nRisposta a Sanskar Jaiswal: Risposta a Simon Charette: Penso che dovrebbe essere fattibile insegnare al rilevatore automatico a generare queste operazioni nell'ordine corretto. Penso che il miglior approccio sarebbe quello di regolare `check_dependency` per tener conto di questo caso. Non riesco a capire come regolare `check_dependency` potrebbe aiutare a risolvere questo problema. Supponendo che io scorra tutti i campi presenti nel modello base, controlli se sono presenti nel modello ereditato e, se ci sono campi del genere, aggiunga `base_app_label, base_name, field_name, False` alle dipendenze, come farebbe la regolazione di `check_dependency` a riordinare le migrazioni? Grazie Sanskar Ciao Sanskar, sto ancora lavorando su questo problema. Mi dispiace di non aver pubblicato i miei progressi qui! Potrebbe volerci più tempo per risolverlo, dato che sono un principiante, quindi devo leggere il codice. Poiché si tratta di un compito scolastico, potresti lavorare su altri problemi o sarebbe meglio se potessimo risolverlo insieme in modo che entrambi otteniamo crediti per questo? Questo è molto importante per me, poiché il compito scolastico richiede di contribuire effettivamente al progetto e ho dedicato un bel po' di tempo a leggere e testare il codice. Molto apprezzato! E penso che le operazioni per te non siano state scambiate, forse perché non hai aggiunto una dipendenza del campo rimosso per tutte le sue basi? E regolare `check_dependency` sembra inutile, dato che gestisce già tutto bene dai miei test. Sono riuscito a scambiare le operazioni quando ho aggiunto una dipendenza manuale sulla rimozione del campo di tutte le sue basi in `generate_created_models`. Se non ti dispiace, come posso sapere che è il campo che stiamo cercando di rimuovere? Sto leggendo il codice attualmente, ma lascerò comunque questa domanda \"stupida\" qui, nel caso in cui non lo trovi in tempo. Inoltre, in termini di possibili `RemoveField` duplicati, non sono riuscito a generare più `RemoveField` per `title`, quindi suppongo che questo sia già gestito da qualche parte nel codice?\nCiao Nan, Sono felice che tu abbia trovato la soluzione. Per favore, continua a lavorare su questo, spero che tu ottenga un buon voto per il tuo compito. A mio parere, potremmo controllare che questo sia il campo che stiamo cercando di rimuovere dalla classe base scorrendo tutti i campi e controllando se quel campo è presente anche in una sottoclasse. Poiché ciò non è consentito, sai che questo è il campo che vuoi rimuovere. Saluti, Sanskar\nRisposta a Sanskar Jaiswal: Ciao Nan, Sono felice che tu abbia trovato la soluzione. Per favore, continua a lavorare su questo, spero che tu ottenga un buon voto per il tuo compito. A mio parere, potremmo controllare che questo sia il campo che stiamo cercando di rimuovere dalla classe base scorrendo tutti i campi e controllando se quel campo è presente anche in una sottoclasse. Poiché ciò non è consentito, sai che questo è il campo che vuoi rimuovere. Saluti, Sanskar Grazie mille per il tuo consiglio! Non riesco ancora a capire come trovare il campo `title` nella classe base `readable`. Sono riuscito a trovare il campo `title` da una sottoclasse `Book` usando `model_state.fields`. E ho provato `model_state = self.to_state.models[base_app_label, base_model_name]` per trovare i campi di `readable`, ma c'è solo un campo rimasto, che è il campo `id` autogenerato. Non capisco perché il campo `title` sia scomparso. Sono sicuro di aver sbagliato qualcosa. Ma mi chiedo se ci siano altri modi per recuperare tutti i campi dalla classe base, che in questo caso è `readable`. Molto apprezzato! Saluti, Nan\nE ho provato `model_state = self.to_state.models[base_app_label, base_model_name]` per trovare i campi di `readable`, ma c'è solo un campo rimasto, che è il campo `id` autogenerato. Non capisco perché il campo `title` sia scomparso. Sono sicuro di aver sbagliato qualcosa. Ma mi chiedo se ci siano altri modi per recuperare tutti i campi dalla classe base, che in questo caso è `readable`. Molto apprezzato! Poiché rimuoviamo `title` da `Readable`, non appare in `self.to_state.models[base_app_label, base_model_name]`. Fare questo ti dà i campi del nostro modello più recente, in cui `Readable` è solo un modello vuoto con un `AutoField` come \"id autogenerato\". Per ottenere i campi previsti di `Readable`, devi usare `self.from_state.models[base_app_label, base_model_name]` poiché `from_state` si riferisce allo stato precedente, in questo caso, solo un modello `Readable` con un `CharField` chiamato `title` (e l'id, ovviamente).\nRisposta a Sanskar Jaiswal: E ho provato `model_state = self.to_state.models[base_app_label, base_model_name]` per trovare i campi di `readable`, ma c'è solo un campo rimasto, che è il campo `id` autogenerato. Non capisco perché il campo `title` sia scomparso. Sono sicuro di aver sbagliato qualcosa. Ma mi chiedo se ci siano altri modi per recuperare tutti i campi dalla classe base, che in questo caso è `readable`. Molto apprezzato! Poiché rimuoviamo `title` da `Readable`, non appare in `self.to_state.models[base_app_label, base_model_name]`. Fare questo ti dà i campi del nostro modello più recente, in cui `Readable` è solo un modello vuoto con un `AutoField` come \"id autogenerato\". Per ottenere i campi previsti di `Readable`, devi usare `self.from_state.models[base_app_label, base_model_name]` poiché `from_state` si riferisce allo stato precedente, in questo caso, solo un modello `Readable` con un `CharField` chiamato `title` (e l'id, ovviamente). Ciao Sanskar, Grazie! Suppongo di dover fare un lavoro migliore nella lettura del codice :). Proverò oggi, dato che ho un colloquio di lavoro tra poche ore! Molto apprezzato! Ti terrò aggiornato!\nCiao a tutti, Stavo guardando questo caso di test ​https://github.com/django/django/blob/6fbce45b0376f0ec8f3bf244f4f1f8d62c201f58/tests/model_inheritance/test_abstract_inheritance.py#L160-L173. Questo caso sembra coprire il caso per questo problema, ma il problema è che `python manage.py migrate` genera un errore che vogliamo gestire. Oppure non c'è bisogno di scrivere un caso di test per questo, dato che vogliamo solo cambiare il comportamento? Se abbiamo bisogno di casi di test, come dovrei procedere per scrivere il test unitario? Molto apprezzato! E sto ancora cercando di regolare le dipendenze...\nNan Liu, questo test non copre il problema, perché non è correlato alle migrazioni. Qui abbiamo modelli inline, quindi le migrazioni non sono coinvolte, non fallisce. Nuovi test dovrebbero essere aggiunti in `tests/migrations`, puoi trovare lì test simili.\nRisposta a felixxm: Nan Liu, questo test non copre il problema, perché non è correlato alle migrazioni. Qui abbiamo modelli inline, quindi le migrazioni non sono coinvolte, non fallisce. Nuovi test dovrebbero essere aggiunti in `tests/migrations`, puoi trovare lì test simili. Non sono sicuro se dovrei mettere i test in `test_autoencoder` o `test_operations` poiché il problema è correlato alla regolazione dell'autoencoder e allo scambio delle operazioni. La mia intuizione mi dice che dovrei aggiungere alcuni test in `test_autoencoder.py`. Quando faccio test locali, due migrazioni separate (una per creare `Readable` con i campi `title` e `name`, la seconda per rimuovere i campi da `Readable` e aggiungere questi due campi nei modelli ereditati come `Book`, `Magazine`), risolveranno il problema. Ma se faccio `self.get_change([Readable], [Readable_with_no_fields, Book, Magazine])`, il caso di test mi dice che i modelli vengono creati prima che i campi base vengano rimossi, il che è diverso da ciò che ho nei test locali secondo il messaggio della console. Migrazioni per 'test': `test/migrations/0002_auto_20200418_1007.py` - Rimuovi il campo `name` da `readable` - Rimuovi il campo `title` da `readable` - Crea il modello `Book` - Crea il modello `Magazine` In questo caso, dovrebbe essere `[\"RemoveField\", \"RemoveField\", \"CreateModel\", \"CreateModel\"]`, ma attualmente è `[\"CreateModel\", \"CreateModel\", \"RemoveField\", \"RemoveField\"]`. Come posso creare una migrazione per `Readable` prima e poi creare la seconda per i modelli aggiornati? Poiché il problema è che la prima migrazione deve essere associata alla seconda.\nCiao @nanliu Credo che il test per questo dovrebbe essere in `test_autodetector.py`. I test lì non creano migrazioni complete. Fanno asserzioni sulle operazioni di output. Controlla il test che ho scritto per un ticket simile in ​https://github.com/django/django/pull/12313/files#diff-c11e6432df7086eda3dfb9ab8e5b2839 , e quelli intorno a quello. Impostano gli stati del modello prima e dopo, chiedono al rilevatore automatico di trovare le operazioni tramite `get_changes()`, quindi fanno asserzioni sulle operazioni. Gli stati del modello \"prima\" descrivono lo stato dei modelli prima della modifica, che verrebbe estratto dalla cronologia delle migrazioni - in questo caso dove esiste solo `Readable`. Gli stati \"dopo\" descrivono lo stato attuale del modello, che verrebbe estratto dalle definizioni dei modelli delle app - in questo caso, `Readable` senza campi e `Book` con il campo `title`. Quando scrivi un test, per favore prova a usare gli stati del modello predefiniti per ridurre l'uso della memoria. Spero che questo ti aiuti a scrivere un test. Una volta che c'è un test fallito, dovrebbe essere più facile trovare la correzione.\nRisposta a Adam (Chainz) Johnson: Ciao @nanliu Credo che il test per questo dovrebbe essere in `test_autodetector.py`. I test lì non creano migrazioni complete. Fanno asserzioni sulle operazioni di output. Controlla il test che ho scritto per un ticket simile in ​https://github.com/django/django/pull/12313/files#diff-c11e6432df7086eda3dfb9ab8e5b2839 , e quelli intorno a quello. Impostano gli stati del modello prima e dopo, chiedono al rilevatore automatico di trovare le operazioni tramite `get_changes()`, quindi fanno asserzioni sulle operazioni. Gli stati del modello \"prima\" descrivono lo stato dei modelli prima della modifica, che verrebbe estratto dalla cronologia delle migrazioni - in questo caso dove esiste solo `Readable`. Gli stati \"dopo\" descrivono lo stato attuale del modello, che verrebbe estratto dalle definizioni dei modelli delle app - in questo caso, `Readable` senza campi e `Book` con il campo `title`. Quando scrivi un test, per favore prova a usare gli stati del modello predefiniti per ridurre l'uso della memoria. Spero che questo ti aiuti a scrivere un test. Una volta che c'è un test fallito, dovrebbe essere più facile trovare la correzione. Ciao Adam, Dopo aver trascorso ore e ore su questo, ho scoperto che le tuple di parole chiave `(app_label_name, name)` devono essere in minuscolo quando le accediamo usando `self.from_state.models` e `self.from_state.models`...\nMi chiedo quando le persone guarderanno la pull request? dato che se viene accettata, potrei guadagnare alcuni crediti extra per la mia classe! molto apprezzato!!\nNan Liu, per favore non chiudere i ticket che non sono risolti. Prima dobbiamo avere, rivedere e unire la patch.\nRisposta a felixxm: Nan Liu, per favore non chiudere i ticket che non sono risolti. Prima dobbiamo avere, rivedere e unire la patch. felixxm, scusami. Mi dispiace\n​PR",
    "created_at": "2020-04-19T10:59:30Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_add_model_with_field_removed_from_base_model (migrations.test_autodetector.AutodetectorTests)\"]",
    "PASS_TO_PASS": "[\"test_add_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"test_add_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"test_add_model_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_non_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for removing db_table in model's options.\", \"test_alter_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_oneoff_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_with_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_without_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_fk_before_model_deletion (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_model_managers (migrations.test_autodetector.AutodetectorTests)\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"Bases of other models come first.\", \"test_circular_dependency_mixed_addcreate (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable2 (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable_self (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_concrete_field_changed_to_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"test_create_with_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_custom_deconstructible (migrations.test_autodetector.AutodetectorTests)\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"test_deconstruct_type (migrations.test_autodetector.AutodetectorTests)\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_empty_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_first_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Having a ForeignKey automatically adds a dependency.\", \"test_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_ordering (migrations.test_autodetector.AutodetectorTests)\", \"Tests unique_together and field removal detection & ordering\", \"test_foreign_key_removed_before_target_model (migrations.test_autodetector.AutodetectorTests)\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_keep_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_last_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_m2m_w_through_multistep_remove (migrations.test_autodetector.AutodetectorTests)\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_changed_to_concrete_field (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model_2 (migrations.test_autodetector.AutodetectorTests)\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"test_nested_deconstructible_objects (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new models.\", \"test_non_circular_foreignkey_dependency_removal (migrations.test_autodetector.AutodetectorTests)\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_pk_fk_included (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"test_proxy_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_remove_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"test_remove_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_m2m_through_model (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models.\", \"test_rename_model_case (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_reverse_relation_dependencies (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_fks_in_different_position (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_renamed_rel_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_replace_string_with_foreignkey (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency_with_unique_together_and_indexes (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_no_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Setting order_with_respect_to adds a field.\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"test_trim_apps (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with managed models.\", \"test_unmanaged_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-13647",
    "base_commit": "67e3c956083d0128a621f65ee86a7dacd4f9f19f",
    "patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n",
    "test_patch": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -200,6 +200,14 @@ def test_col_insert():\n         l = [0, 0, 0]\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n+    # issue 13643\n+    assert eye_Shaping(6).col_insert(3, Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])) == \\\n+           Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                   [0, 1, 0, 2, 2, 0, 0, 0],\n+                   [0, 0, 1, 2, 2, 0, 0, 0],\n+                   [0, 0, 0, 2, 2, 1, 0, 0],\n+                   [0, 0, 0, 2, 2, 0, 1, 0],\n+                   [0, 0, 0, 2, 2, 0, 0, 1]])\n \n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n",
    "problem_statement": "Matrix.col_insert() non sembra più funzionare correttamente.\nEsempio:\n\n```\nIn [28]: import sympy as sm\n\nIn [29]: M = sm.eye(6)\n\nIn [30]: M\nOut[30]: \n⎡1  0  0  0  0  0⎤\n⎢                ⎥\n⎢0  1  0  0  0  0⎥\n⎢                ⎥\n⎢0  0  1  0  0  0⎥\n⎢                ⎥\n⎢0  0  0  1  0  0⎥\n⎢                ⎥\n⎢0  0  0  0  1  0⎥\n⎢                ⎥\n⎣0  0  0  0  0  1⎦\n\nIn [31]: V = 2 * sm.ones(6, 2)\n\nIn [32]: V\nOut[32]: \n⎡2  2⎤\n⎢    ⎥\n⎢2  2⎥\n⎢    ⎥\n⎢2  2⎥\n⎢    ⎥\n⎢2  2⎥\n⎢    ⎥\n⎢2  2⎥\n⎢    ⎥\n⎣2  2⎦\n\nIn [33]: M.col_insert(3, V)\nOut[33]: \n⎡1  0  0  2  2  1  0  0⎤\n⎢                      ⎥\n⎢0  1  0  2  2  0  1  0⎥\n⎢                      ⎥\n⎢0  0  1  2  2  0  0  1⎥\n⎢                      ⎥\n⎢0  0  0  2  2  0  0  0⎥\n⎢                      ⎥\n⎢0  0  0  2  2  0  0  0⎥\n⎢                      ⎥\n⎣0  0  0  2  2  0  0  0⎦\nIn [34]: sm.__version__\nOut[34]: '1.1.1'\n```\n\nLa matrice identità 3 x 3 a destra delle colonne di due è spostata dalle ultime tre righe alle prime tre righe.\n\n@siefkenj Pensi che questo sia legato al tuo refactor della matrice?",
    "hints_text": "Sembra che `pos` non dovrebbe essere [qui](https://github.com/sympy/sympy/blob/master/sympy/matrices/common.py#L89).",
    "created_at": "2017-11-28T21:22:51Z",
    "version": "1.1",
    "FAIL_TO_PASS": "[\"test_col_insert\"]",
    "PASS_TO_PASS": "[\"test__MinimalMatrix\", \"test_vec\", \"test_tolist\", \"test_row_col_del\", \"test_get_diag_blocks1\", \"test_get_diag_blocks2\", \"test_shape\", \"test_reshape\", \"test_row_col\", \"test_row_join\", \"test_col_join\", \"test_row_insert\", \"test_extract\", \"test_hstack\", \"test_vstack\", \"test_atoms\", \"test_free_symbols\", \"test_has\", \"test_is_anti_symmetric\", \"test_diagonal_symmetrical\", \"test_is_hermitian\", \"test_is_Identity\", \"test_is_symbolic\", \"test_is_upper\", \"test_is_lower\", \"test_is_square\", \"test_is_symmetric\", \"test_is_hessenberg\", \"test_is_zero\", \"test_values\", \"test_applyfunc\", \"test_adjoint\", \"test_as_real_imag\", \"test_conjugate\", \"test_doit\", \"test_evalf\", \"test_expand\", \"test_replace\", \"test_replace_map\", \"test_simplify\", \"test_subs\", \"test_trace\", \"test_xreplace\", \"test_permute\", \"test_abs\", \"test_add\", \"test_multiplication\", \"test_power\", \"test_neg\", \"test_sub\", \"test_div\", \"test_det\", \"test_adjugate\", \"test_cofactor_and_minors\", \"test_charpoly\", \"test_row_op\", \"test_col_op\", \"test_is_echelon\", \"test_echelon_form\", \"test_rref\", \"test_eye\", \"test_ones\", \"test_zeros\", \"test_diag\", \"test_jordan_block\", \"test_columnspace\", \"test_rowspace\", \"test_nullspace\", \"test_eigenvals\", \"test_eigenvects\", \"test_left_eigenvects\", \"test_diagonalize\", \"test_is_diagonalizable\", \"test_jordan_form\", \"test_singular_values\", \"test_integrate\"]",
    "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14122",
    "base_commit": "bc04941bf811d1ea2c79fb7fc20457ed2c7e3410",
    "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -125,11 +125,12 @@ def get_group_by(self, select, order_by):\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n-            # Skip References to the select clause, as all expressions in the\n-            # select clause are already part of the group by.\n-            if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+        if not self._meta_ordering:\n+            for expr, (sql, params, is_ref) in order_by:\n+                # Skip references to the SELECT clause, as all expressions in\n+                # the SELECT clause are already part of the GROUP BY.\n+                if not is_ref:\n+                    expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n",
    "test_patch": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,7 +2,7 @@\n from operator import attrgetter\n \n from django.db.models import (\n-    CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n+    CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n from django.test import TestCase\n@@ -484,3 +484,12 @@ def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n         self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n",
    "problem_statement": "I campi Meta.ordering non devono essere inclusi nella clausola GROUP BY\n\nDescrizione\n\nQuesto continua il ticket (chiuso) [1].\nCredo che non sia stato corretto correttamente nel commit [0ddb4ebf].\nMentre il commit [0ddb4ebf] rimuove ORDER BY quando viene utilizzato Meta.ordering, continua a popolare GROUP BY con i campi Meta.ordering, portando quindi a un'aggregazione errata.\nÈ stato aggiunto un PR con un caso di test in [2].\n[1] https://code.djangoproject.com/ticket/14357\n[2] ​​https://github.com/django/django/pull/14122",
    "hints_text": null,
    "created_at": "2021-03-13T19:57:16Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"test_default_ordering_does_not_affect_group_by (ordering.tests.OrderingTests)\"]",
    "PASS_TO_PASS": "[\"By default, Article.objects.all() orders by pub_date descending, then\", \"F expressions can be used in Meta.ordering.\", \"Override ordering with order_by, which is in the same format as the\", \"Ordering can be based on fields included from an 'extra' clause\", \"If the extra clause uses an SQL keyword for a name, it will be\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_constant_value (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\", \"A column may only be included once (the first occurrence) so we check\", \"ordering by a foreign key by its attribute name prevents the query\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"Only the last order_by has any effect (since they each override any\", \"'pk' works as an ordering option in Meta.\", \"test_order_by_ptr_field_with_default_ordering_by_expression (ordering.tests.OrderingTests)\", \"test_order_by_self_referential_fk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"Use '?' to order randomly.\", \"An ordering referencing a model with an ordering referencing a model\", \"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\", \"Ordering can be reversed using the reverse() method on a queryset.\", \"Use the 'stop' part of slicing notation to limit the results.\", \"Use the 'stop' and 'start' parts of slicing notation to offset the\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-24443",
    "base_commit": "809c53c077485ca48a206cee78340389cb83b7f1",
    "patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -308,42 +308,31 @@ def homomorphism(domain, codomain, gens, images=(), check=True):\n     return GroupHomomorphism(domain, codomain, images)\n \n def _check_homomorphism(domain, codomain, images):\n-    if hasattr(domain, 'relators'):\n-        rels = domain.relators\n-    else:\n-        gens = domain.presentation().generators\n-        rels = domain.presentation().relators\n+    \"\"\"\n+    Check that a given mapping of generators to images defines a homomorphism.\n+\n+    Parameters\n+    ==========\n+    domain : PermutationGroup, FpGroup, FreeGroup\n+    codomain : PermutationGroup, FpGroup, FreeGroup\n+    images : dict\n+        The set of keys must be equal to domain.generators.\n+        The values must be elements of the codomain.\n+\n+    \"\"\"\n+    pres = domain if hasattr(domain, 'relators') else domain.presentation()\n+    rels = pres.relators\n+    gens = pres.generators\n+    symbols = [g.ext_rep[0] for g in gens]\n+    symbols_to_domain_generators = dict(zip(symbols, domain.generators))\n     identity = codomain.identity\n \n     def _image(r):\n-        if r.is_identity:\n-            return identity\n-        else:\n-            w = identity\n-            r_arr = r.array_form\n-            i = 0\n-            j = 0\n-            # i is the index for r and j is for\n-            # r_arr. r_arr[j] is the tuple (sym, p)\n-            # where sym is the generator symbol\n-            # and p is the power to which it is\n-            # raised while r[i] is a generator\n-            # (not just its symbol) or the inverse of\n-            # a generator - hence the need for\n-            # both indices\n-            while i < len(r):\n-                power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n-                else:\n-                    s = r[i]\n-                if s in images:\n-                    w = w*images[s]**power\n-                elif s**-1 in images:\n-                    w = w*images[s**-1]**power\n-                i += abs(power)\n-                j += 1\n-            return w\n+        w = identity\n+        for symbol, power in r.array_form:\n+            g = symbols_to_domain_generators[symbol]\n+            w *= images[g]**power\n+        return w\n \n     for r in rels:\n         if isinstance(codomain, FpGroup):\n",
    "test_patch": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -57,6 +57,11 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+\n def test_isomorphisms():\n \n     F, a, b = free_group(\"a, b\")\n",
    "problem_statement": "`_check_homomorphism` non funziona correttamente con i `PermutationGroup`\n```python\r\nIn [1]: from sympy.combinatorics import *\r\n   ...: from sympy.combinatorics.homomorphisms import homomorphism\r\n   ...: D3 = DihedralGroup(3)\r\n   ...: T = homomorphism(D3, D3, D3.generators, D3.generators)\r\n\r\nValueError: Le immagini fornite non definiscono un omomorfismo\r\n```\r\n\r\nIl problema risiede nella funzione interna `_image()`, dove gestisce il caso di un `PermutationGroup`:\r\n\r\nhttps://github.com/sympy/sympy/blob/809c53c077485ca48a206cee78340389cb83b7f1/sympy/combinatorics/homomorphisms.py#L336-L337\r\n\r\nQuando `r[i]` è un generatore invertito, il test `in gens` fallisce.\r\n\r\nCredo che l'intero processo possa essere semplificato notevolmente.",
    "hints_text": null,
    "created_at": "2022-12-30T14:43:19Z",
    "version": "1.12",
    "FAIL_TO_PASS": "[\"test_homomorphism\"]",
    "PASS_TO_PASS": "[\"test_isomorphisms\"]",
    "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11790",
    "base_commit": "b1d6b35e146aea83b171c1b921178bbaae2795ed",
    "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -191,7 +191,9 @@ def __init__(self, request=None, *args, **kwargs):\n \n         # Set the max length and label for the \"username\" field.\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n-        self.fields['username'].max_length = self.username_field.max_length or 254\n+        username_max_length = self.username_field.max_length or 254\n+        self.fields['username'].max_length = username_max_length\n+        self.fields['username'].widget.attrs['maxlength'] = username_max_length\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n",
    "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -423,6 +423,7 @@ def test_username_field_max_length_matches_user_model(self):\n         CustomEmailField.objects.create_user(**data)\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 255)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n         self.assertEqual(form.errors, {})\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n@@ -435,6 +436,7 @@ def test_username_field_max_length_defaults_to_254(self):\n         IntegerUsernameUser.objects.create_user(**data)\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n         self.assertEqual(form.errors, {})\n \n     def test_username_field_label(self):\n",
    "problem_statement": "Il campo username di AuthenticationForm non imposta l'attributo HTML maxlength.\nDescrizione\n\nIl campo username di AuthenticationForm non imposta più l'attributo HTML maxlength.\nRegressione introdotta in #27515 e 5ceaf14686ce626404afb6a5fbd3d8286410bf13.\n​https://groups.google.com/forum/?utm_source=digest&utm_medium=email#!topic/django-developers/qnfSqro0DlA\n​https://forum.djangoproject.com/t/possible-authenticationform-max-length-regression-in-django-2-1/241",
    "hints_text": "Prova di regressione.",
    "created_at": "2019-09-17T14:33:44Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"test_username_field_max_length_defaults_to_254 (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_max_length_matches_user_model (auth_tests.test_forms.AuthenticationFormTest)\"]",
    "PASS_TO_PASS": "[\"test_html_autocomplete_attributes (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_missing_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_non_matching_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_one_password (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_field_order (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_incorrect_password (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_verification (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_both_passwords (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_hidden_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_with_different_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_duplicate_normalized_unicode (auth_tests.test_forms.UserCreationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.UserCreationFormTest)\", \"test_invalid_data (auth_tests.test_forms.UserCreationFormTest)\", \"test_normalize_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_help_text (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_verification (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.UserCreationFormTest)\", \"test_success (auth_tests.test_forms.UserCreationFormTest)\", \"test_unicode_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_user_already_exists (auth_tests.test_forms.UserCreationFormTest)\", \"UserCreationForm password validation uses all of the form's data.\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserCreationFormTest)\", \"test_validates_password (auth_tests.test_forms.UserCreationFormTest)\", \"test_bug_19349_render_with_none_value (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_readonly_field_has_changed (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_render (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_help_text_translation (auth_tests.test_forms.SetPasswordFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_verification (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.SetPasswordFormTest)\", \"test_success (auth_tests.test_forms.SetPasswordFormTest)\", \"test_validates_password (auth_tests.test_forms.SetPasswordFormTest)\", \"test_custom_login_allowed_policy (auth_tests.test_forms.AuthenticationFormTest)\", \"test_get_invalid_login_error (auth_tests.test_forms.AuthenticationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user_i18n (auth_tests.test_forms.AuthenticationFormTest)\", \"An invalid login doesn't leak the inactive status of a user.\", \"test_integer_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_invalid_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_login_failed (auth_tests.test_forms.AuthenticationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AuthenticationFormTest)\", \"test_success (auth_tests.test_forms.AuthenticationFormTest)\", \"test_unicode_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_empty_string (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_not_set (auth_tests.test_forms.AuthenticationFormTest)\", \"test_cleaned_data (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_constructor (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_field (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_subject (auth_tests.test_forms.PasswordResetFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordResetFormTest)\", \"test_inactive_user (auth_tests.test_forms.PasswordResetFormTest)\", \"test_invalid_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_nonexistent_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_preserve_username_case (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_html_email_template_name (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_plaintext_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_unusable_password (auth_tests.test_forms.PasswordResetFormTest)\", \"test_bug_14242 (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_empty_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unknown_password_algorithm (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unmanageable_password (auth_tests.test_forms.UserChangeFormTest)\", \"The change form does not return the password value\", \"test_bug_19349_bound_password_field (auth_tests.test_forms.UserChangeFormTest)\", \"test_custom_form (auth_tests.test_forms.UserChangeFormTest)\", \"test_password_excluded (auth_tests.test_forms.UserChangeFormTest)\", \"test_unusable_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_validity (auth_tests.test_forms.UserChangeFormTest)\"]",
    "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11087",
    "base_commit": "8180ffba21bf10f4be905cb0d4890dc2bcff2788",
    "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -1,4 +1,5 @@\n from collections import Counter\n+from itertools import chain\n from operator import attrgetter\n \n from django.db import IntegrityError, connections, transaction\n@@ -116,6 +117,12 @@ def add_field_update(self, field, value, objs):\n             model, {}).setdefault(\n             (field, value), set()).update(objs)\n \n+    def _has_signal_listeners(self, model):\n+        return (\n+            signals.pre_delete.has_listeners(model) or\n+            signals.post_delete.has_listeners(model)\n+        )\n+\n     def can_fast_delete(self, objs, from_field=None):\n         \"\"\"\n         Determine if the objects in the given queryset-like or single object\n@@ -135,9 +142,7 @@ def can_fast_delete(self, objs, from_field=None):\n             model = objs.model\n         else:\n             return False\n-        if (signals.pre_delete.has_listeners(model) or\n-                signals.post_delete.has_listeners(model) or\n-                signals.m2m_changed.has_listeners(model)):\n+        if self._has_signal_listeners(model):\n             return False\n         # The use of from_field comes from the need to avoid cascade back to\n         # parent when parent delete is cascading to child.\n@@ -220,8 +225,23 @@ def collect(self, objs, source=None, nullable=False, collect_related=True,\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n                         self.fast_deletes.append(sub_objs)\n-                    elif sub_objs:\n-                        field.remote_field.on_delete(self, field, sub_objs, self.using)\n+                    else:\n+                        related_model = related.related_model\n+                        # Non-referenced fields can be deferred if no signal\n+                        # receivers are connected for the related model as\n+                        # they'll never be exposed to the user. Skip field\n+                        # deferring when some relationships are select_related\n+                        # as interactions between both features are hard to\n+                        # get right. This should only happen in the rare\n+                        # cases where .related_objects is overridden anyway.\n+                        if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n+                            referenced_fields = set(chain.from_iterable(\n+                                (rf.attname for rf in rel.field.foreign_related_fields)\n+                                for rel in get_candidate_relations_to_delete(related_model._meta)\n+                            ))\n+                            sub_objs = sub_objs.only(*tuple(referenced_fields))\n+                        if sub_objs:\n+                            field.remote_field.on_delete(self, field, sub_objs, self.using)\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n",
    "test_patch": "diff --git a/tests/delete/models.py b/tests/delete/models.py\n--- a/tests/delete/models.py\n+++ b/tests/delete/models.py\n@@ -126,3 +126,20 @@ class Base(models.Model):\n \n class RelToBase(models.Model):\n     base = models.ForeignKey(Base, models.DO_NOTHING)\n+\n+\n+class Origin(models.Model):\n+    pass\n+\n+\n+class Referrer(models.Model):\n+    origin = models.ForeignKey(Origin, models.CASCADE)\n+    unique_field = models.IntegerField(unique=True)\n+    large_field = models.TextField()\n+\n+\n+class SecondReferrer(models.Model):\n+    referrer = models.ForeignKey(Referrer, models.CASCADE)\n+    other_referrer = models.ForeignKey(\n+        Referrer, models.CASCADE, to_field='unique_field', related_name='+'\n+    )\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -7,7 +7,8 @@\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n-    M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n+    M2MTo, MRNull, Origin, Parent, R, RChild, Referrer, S, T, User, create_a,\n+    get_default_r,\n )\n \n \n@@ -437,6 +438,39 @@ def test_proxied_model_duplicate_queries(self):\n         with self.assertNumQueries(2):\n             avatar.delete()\n \n+    def test_only_referenced_fields_selected(self):\n+        \"\"\"\n+        Only referenced fields are selected during cascade deletion SELECT\n+        unless deletion signals are connected.\n+        \"\"\"\n+        origin = Origin.objects.create()\n+        expected_sql = str(\n+            Referrer.objects.only(\n+                # Both fields are referenced by SecondReferrer.\n+                'id', 'unique_field',\n+            ).filter(origin__in=[origin]).query\n+        )\n+        with self.assertNumQueries(2) as ctx:\n+            origin.delete()\n+        self.assertEqual(ctx.captured_queries[0]['sql'], expected_sql)\n+\n+        def receiver(instance, **kwargs):\n+            pass\n+\n+        # All fields are selected if deletion signals are connected.\n+        for signal_name in ('pre_delete', 'post_delete'):\n+            with self.subTest(signal=signal_name):\n+                origin = Origin.objects.create()\n+                signal = getattr(models.signals, signal_name)\n+                signal.connect(receiver, sender=Referrer)\n+                with self.assertNumQueries(2) as ctx:\n+                    origin.delete()\n+                self.assertIn(\n+                    connection.ops.quote_name('large_field'),\n+                    ctx.captured_queries[0]['sql'],\n+                )\n+                signal.disconnect(receiver, sender=Referrer)\n+\n \n class FastDeleteTests(TestCase):\n \n",
    "problem_statement": "Ottimizza .delete() per utilizzare solo i campi necessari.\nDescrizione\n\nCiao!\nSiamo nel processo di aggiornamento della nostra installazione Django 1.11 da Python 2.7 a Python 3.6, ma stiamo riscontrando un inaspettato UnicodeDecodeError durante l'esecuzione di .delete() da parte del nostro comando di gestione della pulizia giornaliera dei dati.\nSTR:\nAvere un progetto Django 1.11 esistente in esecuzione su Python 2.7.15 che utilizza mysqlclient-python v1.3.13 per connettersi a un server MySQL v5.7.23, con le opzioni DATABASES di Django che includono 'charset': 'utf8mb4' (​https://github.com/mozilla/treeherder)\nAggiornare a Python 3.6.8\nEseguire il comando di gestione cycle_data giornaliero contro il DB dell'istanza di sviluppo:\n​https://github.com/mozilla/treeherder/blob/fc91b7f58e2e30bec5f9eda315dafd22a2bb8380/treeherder/model/management/commands/cycle_data.py\n​https://github.com/mozilla/treeherder/blob/fc91b7f58e2e30bec5f9eda315dafd22a2bb8380/treeherder/model/models.py#L421-L467\nAtteso:\nChe il comando di gestione cycle_data abbia successo, come accadeva con Python 2.\nAttuale:\nTraceback (chiamata più recente per ultima):\n File \"./manage.py\", line 16, in <module>\n \texecute_from_command_line(sys.argv)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 364, in execute_from_command_line\n \tutility.execute()\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 356, in execute\n \tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/app/.heroku/python/lib/python3.6/site-packages/newrelic/hooks/framework_django.py\", line 988, in _nr_wrapper_BaseCommand_run_from_argv_\n \treturn wrapped(*args, **kwargs)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/base.py\", line 283, in run_from_argv\n \tself.execute(*args, **cmd_options)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/base.py\", line 330, in execute\n \toutput = self.handle(*args, **options)\n File \"/app/.heroku/python/lib/python3.6/site-packages/newrelic/api/function_trace.py\", line 139, in literal_wrapper\n \treturn wrapped(*args, **kwargs)\n File \"/app/treeherder/model/management/commands/cycle_data.py\", line 62, in handle\n \toptions['sleep_time'])\n File \"/app/treeherder/model/models.py\", line 461, in cycle_data\n \tself.filter(guid__in=jobs_chunk).delete()\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/query.py\", line 619, in delete\n \tcollector.collect(del_query)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/deletion.py\", line 223, in collect\n \tfield.remote_field.on_delete(self, field, sub_objs, self.using)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/deletion.py\", line 17, in CASCADE\n \tsource_attr=field.name, nullable=field.null)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/deletion.py\", line 222, in collect\n \telif sub_objs:\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/query.py\", line 254, in __bool__\n \tself._fetch_all()\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/query.py\", line 1121, in _fetch_all\n \tself._result_cache = list(self._iterable_class(self))\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/query.py\", line 53, in __iter__\n \tresults = compiler.execute_sql(chunked_fetch=self.chunked_fetch)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 899, in execute_sql\n \traise original_exception\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 889, in execute_sql\n \tcursor.execute(sql, params)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/backends/utils.py\", line 64, in execute\n \treturn self.cursor.execute(sql, params)\n File \"/app/.heroku/python/lib/python3.6/site-packages/django/db/backends/mysql/base.py\", line 101, in execute\n \treturn self.cursor.execute(query, args)\n File \"/app/.heroku/python/lib/python3.6/site-packages/newrelic/hooks/database_dbapi2.py\", line 25, in execute\n \t*args, **kwargs)\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 250, in execute\n \tself.errorhandler(self, exc, value)\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/connections.py\", line 50, in defaulterrorhandler\n \traise errorvalue\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 247, in execute\n \tres = self._query(query)\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 413, in _query\n \tself._post_get_result()\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 417, in _post_get_result\n \tself._rows = self._fetch_row(0)\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 385, in _fetch_row\n \treturn self._result.fetch_row(size, self._fetch_type)\n File \"/app/.heroku/python/lib/python3.6/site-packages/MySQLdb/connections.py\", line 231, in string_decoder\n \treturn s.decode(db.encoding)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xed in position 78: invalid continuation byte\nL'eccezione si verifica durante la .delete() di Jobs, qui:\n​https://github.com/mozilla/treeherder/blob/fc91b7f58e2e30bec5f9eda315dafd22a2bb8380/treeherder/model/models.py#L461\nAbilitando il logging di debug del backend DB di Django, mostra che l'SQL generato è:\nSELECT job.guid FROM job WHERE (job.repository_id = 1 AND job.submit_time < '2018-10-21 11:03:32.538316') LIMIT 1; args=(1, '2018-10-21 11:03:32.538316')\nSELECT failure_line.id, failure_line.job_guid, failure_line.repository_id, failure_line.job_log_id, failure_line.action, failure_line.line, failure_line.test, failure_line.subtest, failure_line.status, failure_line.expected, failure_line.message, failure_line.signature, failure_line.level, failure_line.stack, failure_line.stackwalk_stdout, failure_line.stackwalk_stderr, failure_line.best_classification_id, failure_line.best_is_verified, failure_line.created, failure_line.modified FROM failure_line WHERE failure_line.job_guid IN ('0ec189d6-b854-4300-969a-bf3a3378bff3/0'); args=('0ec189d6-b854-4300-969a-bf3a3378bff3/0',)\nSELECT job.id, job.repository_id, job.guid, job.project_specific_id, job.autoclassify_status, job.coalesced_to_guid, job.signature_id, job.build_platform_id, job.machine_platform_id, job.machine_id, job.option_collection_hash, job.job_type_id, job.job_group_id, job.product_id, job.failure_classification_id, job.who, job.reason, job.result, job.state, job.submit_time, job.start_time, job.end_time, job.last_modified, job.running_eta, job.tier, job.push_id FROM job WHERE job.guid IN ('0ec189d6-b854-4300-969a-bf3a3378bff3/0'); args=('0ec189d6-b854-4300-969a-bf3a3378bff3/0',)\nSELECT job_log.id, job_log.job_id, job_log.name, job_log.url, job_log.status FROM job_log WHERE job_log.job_id IN (206573433); args=(206573433,) [2019-02-18 11:03:33,403] DEBUG [django.db.backends:90] (0.107) SELECT failure_line.id, failure_line.job_guid, failure_line.repository_id, failure_line.job_log_id, failure_line.action, failure_line.line, failure_line.test, failure_line.subtest, failure_line.status, failure_line.expected, failure_line.message, failure_line.signature, failure_line.level, failure_line.stack, failure_line.stackwalk_stdout, failure_line.stackwalk_stderr, failure_line.best_classification_id, failure_line.best_is_verified, failure_line.created, failure_line.modified FROM failure_line WHERE failure_line.job_log_id IN (337396166, 337396167); args=(337396166, 337396167)\nSELECT text_log_step.id, text_log_step.job_id, text_log_step.name, text_log_step.started, text_log_step.finished, text_log_step.started_line_number, text_log_step.finished_line_number, text_log_step.result FROM text_log_step WHERE text_log_step.job_id IN (206573433); args=(206573433,)\nSELECT text_log_error.id, text_log_error.step_id, text_log_error.line, text_log_error.line_number FROM text_log_error WHERE text_log_error.step_id IN (544935727); args=(544935727,)\nInterrogando la tabella text_log_error per quegli id, si evidenzia che ci sono valori spazzatura nel campo line. Questi provengono da dati inseriti quando si utilizzava Python 2.7, che presumibilmente non validava le sequenze di escape unicode utilizzate.\nSembrano esserci due problemi qui:\nIl comportamento di mysqlclient-python differisce a seconda della versione di Python - con Python 3 imposta use_unicode su True di default, il che significa che tenta di decodificare il campo line ma fallisce (poiché non utilizza 'replace' o 'ignore'). Questo sembra qualcosa che l'ORM di Django dovrebbe cercare di proteggere (ad esempio impostando use_unicode sullo stesso valore su tutte le versioni di Python e gestendo la conversione unicode da solo), dato che gestisce generalmente qualsiasi differenza di implementazione in strati inferiori all'ORM.\nL'UnicodeDecodeError si verifica per un campo (text_log_error.line) che non è effettivamente necessario per la .delete() (non è una chiave primaria ecc.), quindi Django non dovrebbe recuperare quel campo comunque quando esegue la query SELECT text_log_error.\n(Inoltre, idealmente Django dovrebbe supportare le eliminazioni in cascata, quindi non avremmo bisogno di utilizzare l'approccio corrente .delete(); ticket 21961)\nRisolvere il problema (2) presumibilmente migliorerebbe anche le prestazioni di .delete().\nCorrelato:\n​https://github.com/PyMySQL/mysqlclient-python/issues/258",
    "hints_text": "Penso che questo sarebbe stato meglio pubblicato altrove. Vedi TicketClosingReasons/UseSupportChannels. Tuttavia... Crea alcune istanze:\n```\n>>> Group.objects.create(name=\"a\")\nINSERT INTO \"auth_group\" (\"name\") VALUES ('a') RETURNING \"auth_group\".\"id\";\nargs=('a',) [utils.py:111]\n<Group: a>\n>>> Group.objects.create(name=\"b\")\nINSERT INTO \"auth_group\" (\"name\") VALUES ('b') RETURNING \"auth_group\".\"id\";\nargs=('b',) [utils.py:111]\n<Group: b>\n```\nElimina normalmente:\n```\n>>> Group.objects.all().delete()\nSELECT \"auth_group\".\"id\", \"auth_group\".\"name\" FROM \"auth_group\";\nargs=() [utils.py:111]\n...\nDELETE FROM \"auth_group\" WHERE \"auth_group\".\"id\" IN (5, 4);\nargs=(5, 4) [utils.py:111]\n```\nOops, tutti i campi selezionati. Se abbiamo colonne spazzatura, non selezionarle:\n```\n>>> Group.objects.only('id').delete()\nSELECT \"auth_group\".\"id\" FROM \"auth_group\";\nargs=() [utils.py:111]\n...\nDELETE FROM \"auth_group\" WHERE \"auth_group\".\"id\" IN (3, 1);\nargs=(3, 1) [utils.py:111]\n```\nYay!\n\nCiao! Grazie per la risposta e gli esempi. Tuttavia, sembra che questo dovrebbe essere il comportamento predefinito per `.delete()`? Se è così, possiamo usare questo ticket per tenerne traccia? Inoltre, nel problema che stavamo riscontrando, i campi aggiuntivi selezionati provenivano da un modello diverso da quello su cui veniva chiamato `.delete()`, quindi non credo che `.only()` sarebbe d'aiuto? (O almeno i documenti non mostrano un modo per applicare `.only()` a una relazione annidata; https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.only ?)\n\nRispondendo a Ed Morley: Tuttavia, sembra che questo dovrebbe essere il comportamento predefinito per `.delete()`? Se è così, possiamo usare questo ticket per tenerne traccia? Cioè, è quello che intendevo con: l'UnicodeDecodeError si verifica per un campo (`text_log_error.line`) che non è effettivamente necessario per il `.delete()` (non è una chiave primaria, ecc.), quindi Django non dovrebbe recuperare quel campo comunque quando esegue la query SELECT `text_log_error`... e perché non vedo che questo sia una richiesta di supporto? :-)\n\nGiusto, quindi ci sono due possibili ticket nascosti in quella che sembra davvero una richiesta di supporto: Non riesco a far funzionare `.only()` correttamente. Modifica l'API `.delete()`. Quindi, per il secondo, suppongo che la risposta sia \"No\", perché c'è già un modo giusto per farlo™ (usare `.only()`). Dovresti passare attraverso la mailing list per discutere un cambiamento lì. Penso che dovresti restringere significativamente per ottenere trazione. Il primo sembra ancora una domanda di utilizzo. Ho dato un'occhiata rapida al tuo comando. Non sembrava che non potessi regolare il codice in qualche modo per farlo funzionare. Se riesci a ridurlo a un esempio minimo che mostri che Django ha una limitazione lì, allora ovviamente possiamo guardarlo.\n\nQuindi, per il secondo, suppongo che la risposta sia \"No\", perché c'è già un modo giusto per farlo™ (usare `.only()`). Dovresti passare attraverso la mailing list per discutere un cambiamento lì. Penso che dovresti restringere significativamente per ottenere trazione. Per usare `.only()` dovremmo codificare rigidamente l'elenco di ogni campo per ogni modello che potrebbe essere necessario per il `.delete()`, mentre Django potrebbe generarlo da solo, se supportasse un `.delete(fetch_all_fields=False)`. Capisco perché Django recupera tutti i campi per altri tipi di operazioni, ma per i `.delete()` non ha senso. Ho aggirato questo per ora usando:\n```python\ntry:\n    self.filter(guid__in=jobs_chunk).delete()\nexcept UnicodeDecodeError:\n    # Aggirare il `.delete()` di Django che seleziona tutti i campi sopra anche se non ne ha bisogno\n    # il che risulta in un UnicodeDecodeError quando si cerca di decodificare valori spazzatura in alcuni `TextLogError.line`s\n    TextLogError.objects.filter(step__job__guid__in=jobs_chunk).only('id').delete()\n```\n...ma fallirà di nuovo se uno degli altri modelli nella rete di relazioni ha dati spazzatura simili.\n\nConosci anche `.defer()` giusto? Quindi puoi semplicemente eliminare il campo spazzatura, lasciando il resto intatto se non conosci i campi di cui hai bisogno.\n\nSì, è vero che sarebbe più pulito riscrivere il sopra usando `.defer()` sul `.delete()` iniziale per questo caso specifico. Tuttavia, tornando al generico \"regolare `.delete()` in modo che recuperi solo i campi di cui ha bisogno per migliorare le prestazioni\" - sembra semplicemente sbagliato dover dire a delete di non recuperare tutto quando sta attraversando le relazioni del modello solo per lo scopo di capire le relazioni annidate da eliminare. (La mia frustrazione su questo è in parte dovuta al fatto che le eliminazioni in blocco sono state un enorme punto dolente per noi da anni. In un mondo ideale potremmo saltare tutti i segnali/gestione in Python in modo da poter scadere i dati su larga scala senza l'overhead di Django, ma questo è https://code.djangoproject.com/ticket/21961)\n\n(Sì, posso capire. Un abbraccio… 🤗. A volte uso semplicemente SQL, ma non dirlo a nessuno. 🙂) Come dico, proposte considerate per modifiche all'API tramite la mailing list sono benvenute. Non penso che sarei entusiasta di `.delete(fetch_all_fields=False)` ma questo non significa che non ci sia spazio per miglioramenti.\n\nGrazie per il tuo aiuto :-)\n\nHai per caso dei ricevitori di segnali di eliminazione connessi per il modello `FailureLine`? Questo impedirebbe a Django di eliminare rapidamente questi oggetti e lo forzerebbe a fare un SELECT di oggetti correlati per attivare i segnali. Puoi determinare se è il caso o no con il seguente codice:\n```python\nfrom django.db.models import signals\nprint(signals.pre_delete.has_listeners(FailureLine))\nprint(signals.post_delete.has_listeners(FailureLine))\nprint(signals.m2m_changed.has_listeners(FailureLine))\n```\nSe è il caso, allora temo che Django non possa fare molto qui automaticamente poiché non può introspezionare il codice dei ricevitori dei segnali per determinare quali campi dovrebbero essere differiti e quali no.\n\nCiao :-) Quelli sono tornati falsi per tutti `FailureLine`, `Job`, `JobLog`, `TextLogStep` e `TextLogError`. (Prima di aprire questo ticket avevo cercato di scoprire di più sul perché questo non stesse eliminando rapidamente. I documenti sono scarsi di dettagli, ma ho trovato `can_fast_delete()` - e presumo che sia la seconda metà che stiamo colpendo? Anche se non seguo davvero cosa sta controllando)\n\nCiao Ed, grazie per i dettagli extra. Quindi, la ragione per cui il SELECT avviene anche se non ci sono segnali registrati è che il raccoglitore di eliminazione costruisce il grafo di eliminazione dall'origine utilizzando un semplice SELECT per interrompere il processo quando non vengono restituiti oggetti invece di costruire query DELETE ottimistiche con predicati complessi (ad esempio JOIN o sottquery). Ora, hai completamente ragione che solo i campi riferiti devono essere recuperati nelle query SELECT e sembra che l'ottimizzazione possa essere implementata senza troppo lavoro. ​https://github.com/django/django/compare/master...charettes:ticket-30191 Il ramo sopra passa l'intero set di test contro SQLite e PostgreSQL. Se sei interessato a far sì che questo lavoro venga unito in 3.0 dovrebbe essere solo una questione di aggiungere test extra per affermare che. I campi non riferiti sono sempre differiti. I riferimenti non chiave primaria (aka `ForeignKey(to_field)`) funzionano appropriatamente. L'ottimizzazione è disabilitata quando i ricevitori sono connessi per i segnali di eliminazione. E invia una PR per ottenere una recensione. Se sei interessato penso che questo ticket possa essere riaperto come Cleanup/Optimization e spostato in Accepted.\n\nInteressantemente, un'ottimizzazione simile è stata proposta in un vecchio ticket che suggeriva l'aggiunta di un metodo `bulk_delete` https://code.djangoproject.com/ticket/9519#comment:21 (punto 3).\n\nCiao Simon, grazie per il lavoro lì! Accettando su quella base.\n​https://github.com/django/django/pull/11087",
    "created_at": "2019-03-16T22:59:57Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_only_referenced_fields_selected (delete.tests.DeletionTests)\"]",
    "PASS_TO_PASS": "[\"test_fast_delete_empty_no_update_can_self_select (delete.tests.FastDeleteTests)\", \"test_fast_delete_fk (delete.tests.FastDeleteTests)\", \"test_fast_delete_inheritance (delete.tests.FastDeleteTests)\", \"test_fast_delete_instance_set_pk_none (delete.tests.FastDeleteTests)\", \"test_fast_delete_joined_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_large_batch (delete.tests.FastDeleteTests)\", \"test_fast_delete_m2m (delete.tests.FastDeleteTests)\", \"test_fast_delete_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_revm2m (delete.tests.FastDeleteTests)\", \"test_auto (delete.tests.OnDeleteTests)\", \"test_auto_nullable (delete.tests.OnDeleteTests)\", \"test_cascade (delete.tests.OnDeleteTests)\", \"test_cascade_from_child (delete.tests.OnDeleteTests)\", \"test_cascade_from_parent (delete.tests.OnDeleteTests)\", \"test_cascade_nullable (delete.tests.OnDeleteTests)\", \"test_do_nothing (delete.tests.OnDeleteTests)\", \"test_do_nothing_qscount (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_down (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_up (delete.tests.OnDeleteTests)\", \"test_o2o_setnull (delete.tests.OnDeleteTests)\", \"test_protect (delete.tests.OnDeleteTests)\", \"test_setdefault (delete.tests.OnDeleteTests)\", \"test_setdefault_none (delete.tests.OnDeleteTests)\", \"test_setnull (delete.tests.OnDeleteTests)\", \"test_setnull_from_child (delete.tests.OnDeleteTests)\", \"test_setnull_from_parent (delete.tests.OnDeleteTests)\", \"test_setvalue (delete.tests.OnDeleteTests)\", \"test_bulk (delete.tests.DeletionTests)\", \"test_can_defer_constraint_checks (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents_relationships (delete.tests.DeletionTests)\", \"test_deletion_order (delete.tests.DeletionTests)\", \"test_hidden_related (delete.tests.DeletionTests)\", \"test_instance_update (delete.tests.DeletionTests)\", \"test_large_delete (delete.tests.DeletionTests)\", \"test_large_delete_related (delete.tests.DeletionTests)\", \"test_m2m (delete.tests.DeletionTests)\", \"test_model_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_proxied_model_duplicate_queries (delete.tests.DeletionTests)\", \"test_queryset_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_relational_post_delete_signals_happen_before_parent_object (delete.tests.DeletionTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-16136",
    "base_commit": "19e6efa50b603af325e7f62058364f278596758f",
    "patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -148,7 +148,16 @@ def http_method_not_allowed(self, request, *args, **kwargs):\n             request.path,\n             extra={\"status_code\": 405, \"request\": request},\n         )\n-        return HttpResponseNotAllowed(self._allowed_methods())\n+        response = HttpResponseNotAllowed(self._allowed_methods())\n+\n+        if self.view_is_async:\n+\n+            async def func():\n+                return response\n+\n+            return func()\n+        else:\n+            return response\n \n     def options(self, request, *args, **kwargs):\n         \"\"\"Handle responding to requests for the OPTIONS HTTP verb.\"\"\"\n",
    "test_patch": "diff --git a/tests/async/tests.py b/tests/async/tests.py\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -6,8 +6,8 @@\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,6 +119,25 @@ def test_options_handler_responds_correctly(self):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
    "problem_statement": "L'oggetto HttpResponseNotAllowed non può essere utilizzato in un'espressione 'await'\nDescrizione\n\nQuando si definisce una semplice sottoclasse di View con solo un metodo \"post\" asincrono, le richieste GET a questa vista causano la seguente eccezione:\n[29/Set/2022 07:50:48] \"GET /demo HTTP/1.1\" 500 81134\nMetodo Non Consentito (GET): /demo\nErrore Interno del Server: /demo\nTraceback (chiamata più recente per ultima):\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/django/core/handlers/exception.py\", line 55, in inner\n \tresponse = get_response(request)\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n \tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/asgiref/sync.py\", line 218, in __call__\n \treturn call_result.result()\n File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\n \treturn self.__get_result()\n File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\n \traise self._exception\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/asgiref/sync.py\", line 284, in main_wrap\n \tresult = await self.awaitable(*args, **kwargs)\nTypeError: l'oggetto HttpResponseNotAllowed non può essere utilizzato in un'espressione 'await'\nQuesto problema può essere facilmente riprodotto con un progetto vuoto (senza dipendenze esterne) avviato con Django 4.1.1 e Python 3.10.6.\nVista di base per riprodurre il bug:\n```python\nfrom django.views import View\nfrom django.http import HttpResponse\nclass Demo(View):\n    \"\"\"Questa vista di base supporta solo richieste POST\"\"\"\n    async def post(self, request):\n        return HttpResponse(\"ok\")\n```\nPattern URL per accedervi:\n```python\nfrom django.urls import path\nfrom views import Demo\nurlpatterns = [\n    path(\"demo\", Demo.as_view()),\n]\n```\nAvviare il server di sviluppo locale (`manage.py runserver`) e aprire `http://127.0.0.1:8000/demo` nel browser.\nIl server si blocca con un errore 500 e il traceback fornito.",
    "hints_text": "Sì, sembra corretto. `http_method_not_allowed()` deve essere adattato per gestire sia i casi sincroni che asincroni nello stesso modo di `options()`. Hai la possibilità di creare una patch rapidamente? (Altrimenti me ne occuperò io.) Grazie per la segnalazione! Regressione in 9ffd4eae2ce7a7100c98f681e2b6ab818df384a4.\n\nGrazie mille per la conferma. Non ho mai contribuito al codebase di Django, ma la correzione per questo problema sembra ovvia. Penso che sia un'ottima occasione per contribuire per la prima volta. Seguirò la guida per i contributi e cercherò di fornire un test di regressione e una patch per questo problema.\n\nOttimo, benvenuto a bordo Antoine! Ho pubblicato una bozza qui ​`https://github.com/django/django/compare/main...carltongibson:django:4.1.2/ticket-34062` che puoi usare come ispirazione. Se apri una PR su GitHub, sarò felice di aiutarti. Di solito non c'è fretta, ma abbiamo delle release previste per l'inizio della prossima settimana, e poiché si tratta di una regressione, deve essere inclusa. Quindi, se incontri ostacoli, per favore contattami in modo che possa aiutarti. Grazie 🏅\n\nWow, la tua bozza è quasi esattamente ciò che avevo già scritto nel mio fork locale. Sono arrivato alla stessa modifica esatta in `View.http_method_not_allowed()` (alla lettera). Ho anche scritto quasi lo stesso test in \"async/tests\" (non ho usato `RequestFactory`, quindi la tua versione è migliore). Stavo attualmente guardando in \"asgi/tests\" per verificare se posso aggiungere un test completo del ciclo di vita richiesta-risposta in tale caso, ma sembra più impegnativo. Pensi che sia fattibile / necessario?\n\nÈ fattibile, ma non penso che sia necessario. (Abbiamo già testato il dispatch completo in molti altri punti. Ciò che stiamo cercando qui è che `http_method_not_allowed()` sia correttamente adattato quando la vista è asincrona (ovvero ha gestori asincroni). Ha senso?\n\nHa perfettamente senso. Qual è il prossimo passo ora? La tua bozza è perfetta, più completa della mia (non ho scritto nelle note di rilascio). Penso che tu possa unire il tuo branch `django:4.1.2/ticket-34062`.",
    "created_at": "2022-09-29T11:47:50Z",
    "version": "4.2",
    "FAIL_TO_PASS": "[\"test_http_method_not_allowed_responds_correctly (async.tests.ViewTests)\", \"test_mixed_views_raise_error (async.tests.ViewTests)\"]",
    "PASS_TO_PASS": "[\"View and by extension any subclasses that don't define handlers are\", \"test_options_handler_responds_correctly (async.tests.ViewTests)\", \"test_views_are_correctly_marked (async.tests.ViewTests)\", \"test_caches_local (async.tests.CacheTest)\", \"test_async_unsafe (async.tests.AsyncUnsafeTest)\", \"Utility class which turns an awaitable that only works on the thread with\", \"test_get_async_connection (async.tests.DatabaseConnectionTest)\"]",
    "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
    "difficulty": "15 min - 1 hour"
  },
  {
    "repo": "scikit-learn/scikit-learn",
    "instance_id": "scikit-learn__scikit-learn-13328",
    "base_commit": "37b0e66c871e8fb032a9c7086b2a1d5419838154",
    "patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -251,7 +251,8 @@ def fit(self, X, y, sample_weight=None):\n         self : object\n         \"\"\"\n         X, y = check_X_y(\n-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+            X, y, copy=False, accept_sparse=['csr'], y_numeric=True,\n+            dtype=[np.float64, np.float32])\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n",
    "test_patch": "diff --git a/sklearn/linear_model/tests/test_huber.py b/sklearn/linear_model/tests/test_huber.py\n--- a/sklearn/linear_model/tests/test_huber.py\n+++ b/sklearn/linear_model/tests/test_huber.py\n@@ -53,8 +53,12 @@ def test_huber_gradient():\n     rng = np.random.RandomState(1)\n     X, y = make_regression_with_outliers()\n     sample_weight = rng.randint(1, 3, (y.shape[0]))\n-    loss_func = lambda x, *args: _huber_loss_and_gradient(x, *args)[0]\n-    grad_func = lambda x, *args: _huber_loss_and_gradient(x, *args)[1]\n+\n+    def loss_func(x, *args):\n+        return _huber_loss_and_gradient(x, *args)[0]\n+\n+    def grad_func(x, *args):\n+        return _huber_loss_and_gradient(x, *args)[1]\n \n     # Check using optimize.check_grad that the gradients are equal.\n     for _ in range(5):\n@@ -76,10 +80,10 @@ def test_huber_sample_weights():\n     huber_coef = huber.coef_\n     huber_intercept = huber.intercept_\n \n-    # Rescale coefs before comparing with assert_array_almost_equal to make sure\n-    # that the number of decimal places used is somewhat insensitive to the\n-    # amplitude of the coefficients and therefore to the scale of the data\n-    # and the regularization parameter\n+    # Rescale coefs before comparing with assert_array_almost_equal to make\n+    # sure that the number of decimal places used is somewhat insensitive to\n+    # the amplitude of the coefficients and therefore to the scale of the\n+    # data and the regularization parameter\n     scale = max(np.mean(np.abs(huber.coef_)),\n                 np.mean(np.abs(huber.intercept_)))\n \n@@ -167,7 +171,8 @@ def test_huber_and_sgd_same_results():\n def test_huber_warm_start():\n     X, y = make_regression_with_outliers()\n     huber_warm = HuberRegressor(\n-        fit_intercept=True, alpha=1.0, max_iter=10000, warm_start=True, tol=1e-1)\n+        fit_intercept=True, alpha=1.0, max_iter=10000, warm_start=True,\n+        tol=1e-1)\n     huber_warm.fit(X, y)\n     huber_warm_coef = huber_warm.coef_.copy()\n     huber_warm.fit(X, y)\n@@ -190,7 +195,8 @@ def test_huber_better_r2_score():\n     huber_outlier_score = huber.score(X[~mask], y[~mask])\n \n     # The Ridge regressor should be influenced by the outliers and hence\n-    # give a worse score on the non-outliers as compared to the huber regressor.\n+    # give a worse score on the non-outliers as compared to the huber\n+    # regressor.\n     ridge = Ridge(fit_intercept=True, alpha=0.01)\n     ridge.fit(X, y)\n     ridge_score = ridge.score(X[mask], y[mask])\n@@ -199,3 +205,11 @@ def test_huber_better_r2_score():\n \n     # The huber model should also fit poorly on the outliers.\n     assert_greater(ridge_outlier_score, huber_outlier_score)\n+\n+\n+def test_huber_bool():\n+    # Test that it does not crash with bool data\n+    X, y = make_regression(n_samples=200, n_features=2, noise=4.0,\n+                           random_state=0)\n+    X_bool = X > 0\n+    HuberRegressor().fit(X_bool, y)\n",
    "problem_statement": "TypeError al fornire un booleano X a HuberRegressor fit\n#### Descrizione\n`TypeError` quando si adatta `HuberRegressor` con predittori booleani.\n\n#### Passaggi/Codice per Riprodurre\n\n```python\nimport numpy as np\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import HuberRegressor\n\n# Dati casuali\nX, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\nX_bool = X > 0\nX_bool_as_float = np.asarray(X_bool, dtype=float)\n```\n\n```python\n# Funziona\nhuber = HuberRegressor().fit(X, y)\n# Fallisce (!)\nhuber = HuberRegressor().fit(X_bool, y)\n# Funziona anche\nhuber = HuberRegressor().fit(X_bool_as_float, y)\n```\n\n#### Risultati Attesi\nNessun errore viene generato quando `dtype` di `X` è `bool` (seconda riga di codice nello snippet sopra, `.fit(X_bool, y)`)\nSi prevede che l'array booleano venga convertito in `float` da `HuberRegressor.fit` come avviene, ad esempio, con `LinearRegression`.\n\n#### Risultati Attuali\n\nViene generato un `TypeError`:\n\n```\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-5-39e33e1adc6f> in <module>\n----> 1 huber = HuberRegressor().fit(X_bool, y)\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/sklearn/linear_model/huber.py in fit(self, X, y, sample_weight)\n    286             args=(X, y, self.epsilon, self.alpha, sample_weight),\n    287             maxiter=self.max_iter, pgtol=self.tol, bounds=bounds,\n--> 288             iprint=0)\n    289         if dict_['warnflag'] == 2:\n    290             raise ValueError(\"HuberRegressor convergence failed:\"\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/scipy/optimize/lbfgsb.py in fmin_l_bfgs_b(func, x0, fprime, args, approx_grad, bounds, m, factr, pgtol, epsilon, iprint, maxfun, maxiter, disp, callback, maxls)\n    197 \n    198     res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n--> 199                            **opts)\n    200     d = {'grad': res['jac'],\n    201          'task': res['message'],\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/scipy/optimize/lbfgsb.py in _minimize_lbfgsb(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\n    333             # until the completion of the current minimization iteration.\n    334             # Overwrite f and g:\n--> 335             f, g = func_and_grad(x)\n    336         elif task_str.startswith(b'NEW_X'):\n    337             # new iteration\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/scipy/optimize/lbfgsb.py in func_and_grad(x)\n    283     else:\n    284         def func_and_grad(x):\n--> 285             f = fun(x, *args)\n    286             g = jac(x, *args)\n    287             return f, g\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/scipy/optimize/optimize.py in function_wrapper(*wrapper_args)\n    298     def function_wrapper(*wrapper_args):\n    299         ncalls[0] += 1\n--> 300         return function(*(wrapper_args + args))\n    301 \n    302     return ncalls, function_wrapper\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/scipy/optimize/optimize.py in __call__(self, x, *args)\n     61     def __call__(self, x, *args):\n     62         self.x = numpy.asarray(x).copy()\n---> 63         fg = self.fun(x, *args)\n     64         self.jac = fg[1]\n     65         return fg[0]\n\n~/.virtualenvs/newest-sklearn/lib/python3.7/site-packages/sklearn/linear_model/huber.py in _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight)\n     91 \n     92     # Gradient due to the squared loss.\n---> 93     X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers)\n     94     grad[:n_features] = (\n     95         2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))\n\nTypeError: L'operatore di negazione booleana di numpy, l'operatore `-`, non è supportato, utilizzare l'operatore `~` o la funzione `logical_not` invece.\n```\n\n#### Versioni\n\nUltime versioni di tutto per quanto ne sono a conoscenza:\n\n```python\nimport sklearn\nsklearn.show_versions() \n```\n\n```\nSystem:\n    python: 3.7.2 (default, Jan 10 2019, 23:51:51)  [GCC 8.2.1 20181127]\nexecutable: /home/saulius/.virtualenvs/newest-sklearn/bin/python\n   machine: Linux-4.20.10-arch1-1-ARCH-x86_64-with-arch\n\nBLAS:\n    macros: NO_ATLAS_INFO=1, HAVE_CBLAS=None\n  lib_dirs: /usr/lib64\ncblas_libs: cblas\n\nPython deps:\n       pip: 19.0.3\nsetuptools: 40.8.0\n   sklearn: 0.21.dev0\n     numpy: 1.16.2\n     scipy: 1.2.1\n    Cython: 0.29.5\n    pandas: None\n```\n\n<!-- Grazie per il contributo! -->\n<!-- NP! -->",
    "hints_text": null,
    "created_at": "2019-02-28T12:47:52Z",
    "version": "0.21",
    "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_huber.py::test_huber_bool\"]",
    "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_huber.py::test_huber_equals_lr_for_high_epsilon\", \"sklearn/linear_model/tests/test_huber.py::test_huber_max_iter\", \"sklearn/linear_model/tests/test_huber.py::test_huber_gradient\", \"sklearn/linear_model/tests/test_huber.py::test_huber_sample_weights\", \"sklearn/linear_model/tests/test_huber.py::test_huber_sparse\", \"sklearn/linear_model/tests/test_huber.py::test_huber_scaling_invariant\", \"sklearn/linear_model/tests/test_huber.py::test_huber_and_sgd_same_results\", \"sklearn/linear_model/tests/test_huber.py::test_huber_warm_start\", \"sklearn/linear_model/tests/test_huber.py::test_huber_better_r2_score\"]",
    "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11433",
    "base_commit": "21b1d239125f1228e579b1ce8d94d4d5feadd2a6",
    "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -48,8 +48,11 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+        if (\n+            f.has_default() and\n+            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+            cleaned_data.get(f.name) in form[f.name].field.empty_values\n+        ):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n",
    "test_patch": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -585,6 +585,32 @@ class Meta:\n         m2 = mf2.save(commit=False)\n         self.assertEqual(m2.mode, '')\n \n+    def test_default_not_populated_on_non_empty_value_in_cleaned_data(self):\n+        class PubForm(forms.ModelForm):\n+            mode = forms.CharField(max_length=255, required=False)\n+            mocked_mode = None\n+\n+            def clean(self):\n+                self.cleaned_data['mode'] = self.mocked_mode\n+                return self.cleaned_data\n+\n+            class Meta:\n+                model = PublicationDefaults\n+                fields = ('mode',)\n+\n+        pub_form = PubForm({})\n+        pub_form.mocked_mode = 'de'\n+        pub = pub_form.save(commit=False)\n+        self.assertEqual(pub.mode, 'de')\n+        # Default should be populated on an empty value in cleaned_data.\n+        default_mode = 'di'\n+        for empty_value in pub_form.fields['mode'].empty_values:\n+            with self.subTest(empty_value=empty_value):\n+                pub_form = PubForm({})\n+                pub_form.mocked_mode = empty_value\n+                pub = pub_form.save(commit=False)\n+                self.assertEqual(pub.mode, default_mode)\n+\n     def test_default_not_populated_on_optional_checkbox_input(self):\n         class PubForm(forms.ModelForm):\n             class Meta:\n",
    "problem_statement": "Consenti a `cleaned_data` di sovrascrivere i valori predefiniti dei campi.\nDescrizione\n\nVedi i commenti qui: ​https://github.com/django/django/pull/7068/files#r289432409\nAttualmente, quando si invia un modulo, se 'some_field' non è presente nel payload dei dati (ad esempio, non è stato incluso nel modulo, forse perché il suo valore è derivato da un altro campo), e 'some_field' ha un valore predefinito nel modello, non può essere sovrascritto con 'self.cleaned_data'.\nQuesto non segue realmente il paradigma di modificare i dati in 'cleaned_data'. Richiede all'utente di copiare e sovrascrivere i dati grezzi inviati con il modulo.",
    "hints_text": null,
    "created_at": "2019-05-31T17:06:20Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_default_not_populated_on_non_empty_value_in_cleaned_data (model_forms.tests.ModelFormBaseTest)\"]",
    "PASS_TO_PASS": "[\"test_model_form_clean_applies_to_model (model_forms.tests.CustomCleanTests)\", \"test_override_clean (model_forms.tests.CustomCleanTests)\", \"test_model_form_applies_localize_to_all_fields (model_forms.tests.LocalizedModelFormTest)\", \"test_model_form_applies_localize_to_some_fields (model_forms.tests.LocalizedModelFormTest)\", \"test_model_form_refuses_arbitrary_string (model_forms.tests.LocalizedModelFormTest)\", \"test_callable_called_each_time_form_is_instantiated (model_forms.tests.LimitChoicesToTests)\", \"test_custom_field_with_queryset_but_no_limit_choices_to (model_forms.tests.LimitChoicesToTests)\", \"test_fields_for_model_applies_limit_choices_to (model_forms.tests.LimitChoicesToTests)\", \"test_limit_choices_to_callable_for_fk_rel (model_forms.tests.LimitChoicesToTests)\", \"test_limit_choices_to_callable_for_m2m_rel (model_forms.tests.LimitChoicesToTests)\", \"test_modelform_factory_metaclass (model_forms.tests.CustomMetaclassTestCase)\", \"test_setattr_raises_validation_error_field_specific (model_forms.tests.StrictAssignmentTests)\", \"test_setattr_raises_validation_error_non_field (model_forms.tests.StrictAssignmentTests)\", \"test_field_removal (model_forms.tests.ModelFormInheritanceTests)\", \"test_field_removal_name_clashes (model_forms.tests.ModelFormInheritanceTests)\", \"test_form_subclass_inheritance (model_forms.tests.ModelFormInheritanceTests)\", \"test_bad_callback (model_forms.tests.FormFieldCallbackTests)\", \"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\", \"A custom formfield_callback is used if provided\", \"Regression for #15315: modelform_factory should accept widgets\", \"test_inherit_after_custom_callback (model_forms.tests.FormFieldCallbackTests)\", \"Regression for #19733\", \"test_notrequired_overrides_notblank (model_forms.tests.ValidationTest)\", \"test_validates_with_replaced_field_excluded (model_forms.tests.ValidationTest)\", \"test_validates_with_replaced_field_not_specified (model_forms.tests.ValidationTest)\", \"test_custom_error_messages (model_forms.tests.ModelFormCustomErrorTests)\", \"test_model_clean_error_messages (model_forms.tests.ModelFormCustomErrorTests)\", \"Data for a ManyToManyField is a list rather than a lazy QuerySet.\", \"test_article_form (model_forms.tests.ModelFormBaseTest)\", \"test_bad_form (model_forms.tests.ModelFormBaseTest)\", \"test_base_form (model_forms.tests.ModelFormBaseTest)\", \"test_blank_false_with_null_true_foreign_key_field (model_forms.tests.ModelFormBaseTest)\", \"test_blank_with_null_foreign_key_field (model_forms.tests.ModelFormBaseTest)\", \"test_confused_form (model_forms.tests.ModelFormBaseTest)\", \"test_default_filefield (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_checkboxselectmultiple (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_optional_checkbox_input (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_selectmultiple (model_forms.tests.ModelFormBaseTest)\", \"test_default_populated_on_optional_field (model_forms.tests.ModelFormBaseTest)\", \"test_default_selectdatewidget (model_forms.tests.ModelFormBaseTest)\", \"test_default_splitdatetime_field (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_on_modelform (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_to_construct_instance (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_to_fields_for_model (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_and_validation (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_fields (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_fields_with_string (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_nonexistent_field (model_forms.tests.ModelFormBaseTest)\", \"test_extra_declared_field_model_form (model_forms.tests.ModelFormBaseTest)\", \"test_extra_field_model_form (model_forms.tests.ModelFormBaseTest)\", \"test_extra_field_modelform_factory (model_forms.tests.ModelFormBaseTest)\", \"test_extra_fields (model_forms.tests.ModelFormBaseTest)\", \"test_invalid_meta_model (model_forms.tests.ModelFormBaseTest)\", \"test_limit_fields_with_string (model_forms.tests.ModelFormBaseTest)\", \"test_limit_nonexistent_field (model_forms.tests.ModelFormBaseTest)\", \"test_missing_fields_attribute (model_forms.tests.ModelFormBaseTest)\", \"test_mixmodel_form (model_forms.tests.ModelFormBaseTest)\", \"test_no_model_class (model_forms.tests.ModelFormBaseTest)\", \"test_orderfields2_form (model_forms.tests.ModelFormBaseTest)\", \"test_orderfields_form (model_forms.tests.ModelFormBaseTest)\", \"test_override_field (model_forms.tests.ModelFormBaseTest)\", \"test_prefixed_form_with_default_field (model_forms.tests.ModelFormBaseTest)\", \"test_renderer_kwarg (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field_variant_2 (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field_variant_3 (model_forms.tests.ModelFormBaseTest)\", \"test_save_blank_false_with_required_false (model_forms.tests.ModelFormBaseTest)\", \"test_save_blank_null_unique_charfield_saves_null (model_forms.tests.ModelFormBaseTest)\", \"test_subcategory_form (model_forms.tests.ModelFormBaseTest)\", \"test_subclassmeta_form (model_forms.tests.ModelFormBaseTest)\", \"test_assignment_of_none (model_forms.tests.ModelOneToOneFieldTests)\", \"test_assignment_of_none_null_false (model_forms.tests.ModelOneToOneFieldTests)\", \"test_modelform_onetoonefield (model_forms.tests.ModelOneToOneFieldTests)\", \"test_modelform_subclassed_model (model_forms.tests.ModelOneToOneFieldTests)\", \"test_onetoonefield (model_forms.tests.ModelOneToOneFieldTests)\", \"test_callable_field_default (model_forms.tests.OtherModelFormTests)\", \"test_choices_type (model_forms.tests.OtherModelFormTests)\", \"test_foreignkeys_which_use_to_field (model_forms.tests.OtherModelFormTests)\", \"test_iterable_model_m2m (model_forms.tests.OtherModelFormTests)\", \"test_media_on_modelform (model_forms.tests.OtherModelFormTests)\", \"test_model_field_that_returns_none_to_exclude_itself_with_explicit_fields (model_forms.tests.OtherModelFormTests)\", \"test_prefetch_related_queryset (model_forms.tests.OtherModelFormTests)\", \"test_abstract_inherited_unique (model_forms.tests.UniqueTest)\", \"test_abstract_inherited_unique_together (model_forms.tests.UniqueTest)\", \"Ensure keys and blank character strings are tested for uniqueness.\", \"Test for primary_key being in the form and failing validation.\", \"test_inherited_unique (model_forms.tests.UniqueTest)\", \"test_inherited_unique_for_date (model_forms.tests.UniqueTest)\", \"test_inherited_unique_together (model_forms.tests.UniqueTest)\", \"test_multiple_field_unique_together (model_forms.tests.UniqueTest)\", \"test_override_unique_for_date_message (model_forms.tests.UniqueTest)\", \"test_override_unique_message (model_forms.tests.UniqueTest)\", \"test_override_unique_together_message (model_forms.tests.UniqueTest)\", \"test_simple_unique (model_forms.tests.UniqueTest)\", \"test_unique_for_date (model_forms.tests.UniqueTest)\", \"test_unique_for_date_in_exclude (model_forms.tests.UniqueTest)\", \"test_unique_for_date_with_nullable_date (model_forms.tests.UniqueTest)\", \"test_unique_null (model_forms.tests.UniqueTest)\", \"ModelForm test of unique_together constraint\", \"test_unique_together_exclusion (model_forms.tests.UniqueTest)\", \"test_big_integer_field (model_forms.tests.ModelOtherFieldTests)\", \"test_http_prefixing (model_forms.tests.ModelOtherFieldTests)\", \"test_modelform_non_editable_field (model_forms.tests.ModelOtherFieldTests)\", \"Check basic URL field validation on model forms\", \"test_clean_does_deduplicate_values (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_field (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_field_22745 (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_number_of_queries (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_required_false (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_run_validators (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_show_hidden_initial (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_show_hidden_initial_changed_queries_efficiently (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_to_field_name_with_initial_data (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_auto_id (model_forms.tests.ModelFormBasicTests)\", \"test_base_form (model_forms.tests.ModelFormBasicTests)\", \"test_basic_creation (model_forms.tests.ModelFormBasicTests)\", \"test_custom_form_fields (model_forms.tests.ModelFormBasicTests)\", \"test_initial_values (model_forms.tests.ModelFormBasicTests)\", \"test_m2m_editing (model_forms.tests.ModelFormBasicTests)\", \"test_m2m_initial_callable (model_forms.tests.ModelFormBasicTests)\", \"test_multi_fields (model_forms.tests.ModelFormBasicTests)\", \"test_recleaning_model_form_instance (model_forms.tests.ModelFormBasicTests)\", \"test_runtime_choicefield_populated (model_forms.tests.ModelFormBasicTests)\", \"test_save_commit_false (model_forms.tests.ModelFormBasicTests)\", \"test_save_with_data_errors (model_forms.tests.ModelFormBasicTests)\", \"test_subset_fields (model_forms.tests.ModelFormBasicTests)\", \"test_error_messages_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_field_type_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_help_text_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_label_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_widget_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_clean_false (model_forms.tests.FileAndImageFieldTests)\", \"test_clean_false_required (model_forms.tests.FileAndImageFieldTests)\", \"test_clear_and_file_contradiction (model_forms.tests.FileAndImageFieldTests)\", \"test_custom_file_field_save (model_forms.tests.FileAndImageFieldTests)\", \"test_file_field_data (model_forms.tests.FileAndImageFieldTests)\", \"test_file_field_multiple_save (model_forms.tests.FileAndImageFieldTests)\", \"FilePathField(blank=True) includes the empty option.\", \"test_filefield_required_false (model_forms.tests.FileAndImageFieldTests)\", \"test_full_clear (model_forms.tests.FileAndImageFieldTests)\", \"test_image_field (model_forms.tests.FileAndImageFieldTests)\", \"test_render_empty_file_field (model_forms.tests.FileAndImageFieldTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-8269",
    "base_commit": "1e2ccd8f0eca0870cf6f8fce6934e2da8eba9b72",
    "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -166,6 +166,7 @@ def check_uri() -> Tuple[str, str, int]:\n                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n",
    "test_patch": "diff --git a/tests/roots/test-linkcheck-localserver/conf.py b/tests/roots/test-linkcheck-localserver/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver/conf.py\n@@ -0,0 +1,2 @@\n+exclude_patterns = ['_build']\n+linkcheck_anchors = True\ndiff --git a/tests/roots/test-linkcheck-localserver/index.rst b/tests/roots/test-linkcheck-localserver/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver/index.rst\n@@ -0,0 +1 @@\n+`local server <http://localhost:7777/#anchor>`_\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,8 +8,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import http.server\n import json\n import re\n+import threading\n from unittest import mock\n import pytest\n \n@@ -106,6 +108,21 @@ def test_anchors_ignored(app, status, warning):\n     # expect all ok when excluding #top\n     assert not content\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_raises_for_invalid_status(app, status, warning):\n+    server_thread = HttpServerThread(InternalServerErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"500 Server Error: Internal Server Error \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n \n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n@@ -160,3 +177,22 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+\n+class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(500, \"Internal Server Error\")\n",
    "problem_statement": "Linkcheck dovrebbe segnalare errori HTTP invece di \"Anchor non trovato\"\n**Descrizione del bug**\r\nIl comando `linkcheck` segnala sempre che non è stato in grado di trovare l'ancora quando [`linkcheck_anchors`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-linkcheck_workers) è `True`, anche quando il server ha risposto con un codice di stato di errore (ad esempio 404, 500).\r\n\r\nSebbene non sia effettivamente in grado di trovare l'ancora, il problema reale è che il server ha incontrato un errore.\r\n\r\n**Per riprodurre**\r\n```console\r\n$ sphinx-quickstart --project proj --sep --author me --release 1.0 --language en\r\n$ # https://google.com/test.txt non esiste, il server risponde con un 404.\r\n$ echo '\\n`foo <https://google.com/test.txt#test>`_' >>source/index.rst\r\n$ make linkcheck\r\n```\r\n\r\n**Comportamento atteso**\r\n*Attuale*\r\n```\r\n(line   22) broken    https://google.com/test.txt#test - Anchor 'test' not found\r\n```\r\n\r\n*Output atteso*\r\nStesso di quando `linkcheck_anchors=False`.\r\n```\r\n(line   22) broken    https://google.com/test.txt#test - 404 Client Error: Not Found for url: https://google.com/test.txt\r\n```\r\n\r\n**Informazioni sull'ambiente**\r\n- OS: Linux 5.8.12.a-1-hardened\r\n- Versione Python: 3.8.5\r\n- Versione Sphinx: 3.2.1",
    "hints_text": null,
    "created_at": "2020-10-03T11:08:37Z",
    "version": "3.3",
    "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_raises_for_invalid_status\"]",
    "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults\", \"tests/test_build_linkcheck.py::test_defaults_json\", \"tests/test_build_linkcheck.py::test_anchors_ignored\", \"tests/test_build_linkcheck.py::test_auth\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\"]",
    "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "matplotlib/matplotlib",
    "instance_id": "matplotlib__matplotlib-13989",
    "base_commit": "a3e2897bfaf9eaac1d6649da535c4e721c89fa69",
    "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ def hist(self, x, bins=None, range=None, density=None, weights=None,\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n         tops = []\n",
    "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6369,3 +6369,10 @@ def test_hist_nan_data():\n \n     assert np.allclose(bins, nanbins)\n     assert np.allclose(edges, nanedges)\n+\n+\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\",\n+                          range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n",
    "problem_statement": "hist() non rispetta più range=... quando density=True\n<!--Per aiutarci a comprendere e risolvere il tuo problema, ti preghiamo di compilare il modulo nel modo più completo possibile.-->\n<!--Puoi eliminare le sezioni che non si applicano.-->\n\n### Segnalazione di un bug\n\n**Riepilogo del bug**\n\n<!--Una breve descrizione di 1-2 frasi che descrive il bug in modo conciso-->\nhist() non rispetta più l'intervallo specificato quando density=True.\n\n**Codice per la riproduzione**\n\n<!--Un frammento di codice minimo necessario per riprodurre il bug.\nAssicurati di ridurre al minimo il numero di dipendenze richieste e di fornire\neventuali dati tracciati necessari.\nEvita di utilizzare thread, poiché Matplotlib non è (esplicitamente) thread-safe.-->\n\n```python\n_, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\nprint(bins)\n```\n\n**Risultato effettivo**\n\n<!--L'output prodotto dal codice sopra, che può essere uno screenshot, un output della console, ecc.-->\n\n```\n[0.00331535 0.18930174 0.37528813 0.56127453 0.74726092 0.93324731]\n```\n\n**Risultato atteso**\n\nUn array in cui il primo valore è 0 e l'ultimo è 1.\n\nNota che questo bug non si verifica se density=False.\n\nBisects a https://github.com/matplotlib/matplotlib/pull/8638/commits/239be7b18e311c57a1393b6eeefc62b7cc629339 (#8638).\n\n**Versione di Matplotlib**\n<!--Specifica la tua piattaforma e le versioni delle librerie rilevanti che stai utilizzando:-->\n  * Sistema operativo: Linux\n  * Versione di Matplotlib: master\n  * Backend di Matplotlib (`print(matplotlib.get_backend())`): qualsiasi\n  * Versione di Python: 3.7\n  * Versione di Jupyter (se applicabile): no\n  * Altre librerie: numpy 1.16.2\n\n<!--Indica come hai installato matplotlib e python, ad esempio, da sorgente, pip, conda-->\n<!--Se hai installato da conda, specifica il canale utilizzato se non è quello predefinito-->",
    "hints_text": ":anger: Stavo per taggare...",
    "created_at": "2019-04-19T01:47:57Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\"]",
    "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_polar_rlim[png]\", \"lib/matplotlib/tests/test_axes.py::test_polar_rlim_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_steplog[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density_normed\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_params[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_no_None\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_fast_RGB\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_polar_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_datetime_masked\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\"]",
    "environment_setup_commit": "d0628598f8d9ec7b0da6b60e7b29be2067b6ea17",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15277",
    "base_commit": "30613d6a748fce18919ff8b0da166d9fda2ed9bc",
    "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n",
    "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,6 +1852,30 @@ def test_resolve_output_field_failure(self):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n \n class ExistsTests(TestCase):\n     def test_optimizations(self):\n",
    "problem_statement": "Micro-ottimizzazione per Value._resolve_output_field (modificando CharField.__init__)\nDescrizione\n\nAttualmente, quando si fa qualcosa come `annotate(x=Value('test'))`, ciò alla fine chiamerà `Value._resolve_output_field()` ed eseguirà il seguente codice:\n```python\nif isinstance(self.value, str):\n    return fields.CharField()\n```\nche è abbastanza innocuo.\n\nTuttavia, `CharField` attualmente si aspetta che `self.max_length` sia sempre un valore non nullo di dati sensati, e per quanto ne so, questo viene controllato per gli utenti al momento del controllo del sistema come requisito per l'uso.\n\nQuindi, ciò che accade attualmente è che `CharField` internamente riceve un `MaxLengthValidator` che non può funzionare e deve essere dimostrativamente superfluo (cioè i validatori non vengono utilizzati nel campo di output, almeno per `Value`).\n\n```python\n>>> x = Value('test')\n>>> y = x._resolve_output_field()\n>>> y.validators\n[<django.core.validators.MaxLengthValidator at 0x105e3d940>]\n>>> y.clean('1', model_instance=None)\n.../path/django/core/validators.py in compare(self, a, b):\nTypeError: '>' not supported between instances of 'int' and 'NoneType'\n```\n\nA complicare ulteriormente la situazione, `MaxLengthValidator` è decorato con `@deconstructible` (sia direttamente che indirettamente tramite `BaseValidator`...?).\n\nQuindi, la linea di base (a partire da a21a63cc288ba51bcf8c227a49de6f5bb9a72cc3):\n\n```python\nIn [1]: from django.db.models import Value\nIn [2]: x = Value('test')\nIn [3]: %timeit x._resolve_output_field()\n8.1 µs ± 39.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```\n\n(Nota: un'esecuzione precedente è stata più veloce a 7,6 µs, quindi il normale flusso di lavoro della CPU è in atto).\n\nPossiamo vedere quanto tempo è dovuto a `@deconstructible` (vedi il mio commento qui su una PR riguardo a `deconstructible` come fonte di potenziale ottimizzazione) semplicemente commentandolo in entrambe le classi di validatori:\n\n```python\nIn [1]: from django.db.models import Value\nIn [2]: x = Value('test')\nIn [3]: %timeit x._resolve_output_field()\n6.96 µs ± 130 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```\n\nMa ignorare del tutto l'istanziazione della classe è più veloce, più semplice e più corretto in questo momento:\n\n```python\nIn [1]: from django.db.models import Value\nIn [2]: x = Value('test')\nIn [3]: %timeit x._resolve_output_field()\n5.86 µs ± 45.4 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```\n\nQuindi, un miglioramento di circa 2 µs.\n\nCome arriviamo a questo? Modifica `CharField.__init__` in:\n\n```python\nif self.max_length is not None:\n    self.validators.append(validators.MaxLengthValidator(self.max_length))\n```\n\nche incidentalmente e felicemente è lo stesso processo adottato da `BinaryField.__init__` come precedente.\n\nHo un ramo locale con questa modifica, e tutti i test esistenti passano attualmente. Lo spingerò su CI non appena otterrò un numero di ticket da questa sottomissione, e vedremo se causa problemi altrove, e potremo decidere se può essere accettato da lì.",
    "hints_text": "Tutti i test sono stati superati nel CI, la PR è ​https://github.com/django/django/pull/15277 Sto forzando il push di un commit revisionato che include un caso di test che genera un errore senza la modifica, a scopo di regressione.",
    "created_at": "2022-01-03T12:14:06Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"The output field for a given Value doesn't get cleaned & validated,\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\"]",
    "PASS_TO_PASS": "[\"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_equal (expressions.tests.OrderByTests)\", \"test_hash (expressions.tests.OrderByTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_resolve_output_field (expressions.tests.CombinedExpressionTests)\", \"test_optimizations (expressions.tests.ExistsTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"Special characters (e.g. %, _ and \\\\) stored in database are\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_output_field_decimalfield (expressions.tests.ValueTests)\", \"test_repr (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"Complex expressions of different connection types are possible.\", \"test_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can fill a value in all objects with an other value of the\", \"test_filter_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can filter for objects, where a value is not equals the value\", \"We can increment a value of all objects in a query set.\", \"This tests that SQL injection isn't possible using compilation of\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_right_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_in_Q (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_multiply_divide (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-7889",
    "base_commit": "ec9af606c6cfa515f946d74da9b51574f2f9b16f",
    "patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -52,8 +52,8 @@ def __iter__(self) -> Iterator:\n     def __mro_entries__(self, bases: Tuple) -> Tuple:\n         return (self.__class__,)\n \n-    def __getitem__(self, key: str) -> \"_MockObject\":\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+    def __getitem__(self, key: Any) -> \"_MockObject\":\n+        return _make_subclass(str(key), self.__display_name__, self.__class__)()\n \n     def __getattr__(self, key: str) -> \"_MockObject\":\n         return _make_subclass(key, self.__display_name__, self.__class__)()\n",
    "test_patch": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -11,6 +11,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar\n \n import pytest\n \n@@ -39,6 +40,7 @@ def test_MockObject():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    # subclassing\n     class SubClass(mock.SomeClass):\n         \"\"\"docstring of SubClass\"\"\"\n \n@@ -51,6 +53,16 @@ def method(self):\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+    # parametrized type\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+\n \n def test_mock():\n     modname = 'sphinx.unknown'\n",
    "problem_statement": "L'estensione Autodoc genera un errore `TypeError` per le classi con parametri di tipo generico nel file di simulazione.\n\n**Descrizione del bug**\nDurante la costruzione della documentazione per una classe con parametri di tipo generico, viene generato un `TypeError` poiché il metodo `mock._make_subclass` di Autodoc tenta di concatenare una stringa `str` a una `TypeVar`. Vedi il log allegato: [sphinx-err-325ndteh.log](https://github.com/sphinx-doc/sphinx/files/4842672/sphinx-err-325ndteh.log)\n\n**Per riprodurre il problema**\n```\n$ git https://github.com/perrygoy/screenpy.git\n$ cd screenpy/docs\n$ python -m venv env\n$ source env/bin/activate\n$ pip install sphinx pyhamcrest selenium typing_extensions\n$ make html\n```\nOsserva che il comando per generare la documentazione fallisce con un `TypeError`.\n\n**Comportamento atteso**\nLa documentazione dovrebbe essere generata correttamente anche in presenza di tipi generici.\n\n**Il tuo progetto**\nhttps://github.com/perrygoy/screenpy.git\n\n**Informazioni sull'ambiente**\n- Sistema operativo: Mac 10.15.5 (19F101)\n- Versione di Python: 3.7.7\n- Versione di Sphinx: 3.1.1\n- Estensioni di Sphinx:  sphinx.ext.autodoc, sphinx.ext.intersphinx, sphinx.ext.coverage, sphinx.ext.ifconfig, sphinx.ext.napoleon\n\n**Contesto aggiuntivo**\nPotrebbe essere che non conosca il modo corretto per utilizzare tipi generici compatibili con Sphinx. Se è così, per favore fammelo sapere!",
    "hints_text": null,
    "created_at": "2020-06-29T16:20:55Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_mock.py::test_MockObject\"]",
    "PASS_TO_PASS": "[\"tests/test_ext_autodoc_mock.py::test_MockModule\", \"tests/test_ext_autodoc_mock.py::test_mock\", \"tests/test_ext_autodoc_mock.py::test_mock_does_not_follow_upper_modules\", \"tests/test_ext_autodoc_mock.py::test_abc_MockObject\", \"tests/test_ext_autodoc_mock.py::test_mock_decorator\"]",
    "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-14534",
    "base_commit": "910ecd1b8df7678f45c3d507dde6bcb1faafa243",
    "patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ def template_name(self):\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id')\n \n     @property\n     def choice_label(self):\n",
    "test_patch": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -720,7 +720,7 @@ class BeatleForm(Form):\n         fields = list(BeatleForm(auto_id=False)['name'])\n         self.assertEqual(len(fields), 4)\n \n-        self.assertEqual(fields[0].id_for_label, 'id_name_0')\n+        self.assertEqual(fields[0].id_for_label, None)\n         self.assertEqual(fields[0].choice_label, 'John')\n         self.assertHTMLEqual(fields[0].tag(), '<option value=\"john\">John</option>')\n         self.assertHTMLEqual(str(fields[0]), '<option value=\"john\">John</option>')\n@@ -3202,6 +3202,22 @@ class SomeForm(Form):\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
    "problem_statement": "BoundWidget.id_for_label ignora l'ID impostato da ChoiceWidget.options\nDescrizione\n\nSe si esamina l'implementazione di BoundField.subwidgets\n```python\nclass BoundField:\n    ...\n    def subwidgets(self):\n        id_ = self.field.widget.attrs.get('id') or self.auto_id\n        attrs = {'id': id_} if id_ else {}\n        attrs = self.build_widget_attrs(attrs)\n        return [\n            BoundWidget(self.field.widget, widget, self.form.renderer)\n            for widget in self.field.widget.subwidgets(self.html_name, self.value(), attrs=attrs)\n        ]\n```\nsi nota che `self.field.widget.subwidgets(self.html_name, self.value(), attrs=attrs)` restituisce un dizionario e lo assegna a `widget`. Ora `widget['attrs']['id']` contiene l'\"id\" che vorremmo utilizzare durante il rendering dell'etichetta del nostro CheckboxSelectMultiple.\nTuttavia, BoundWidget.id_for_label() è implementato come\n```python\nclass BoundWidget:\n    ...\n    def id_for_label(self):\n        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n```\nignorando l'id disponibile tramite `self.data['attrs']['id']`. Questa reinvenzione per il rendering dell'\"id\" è confusa e presumibilmente non intenzionale. Probabilmente nessuno se n'è accorto finora, perché raramente l'argomento auto_id viene sovrascritto durante l'inizializzazione di un modulo. Se però lo facciamo, si supporrebbe che il metodo BoundWidget.id_for_label renda quella stringa come specificato tramite la stringa di formato auto_id.\nModificando il codice sopra riportato in\n```python\nclass BoundWidget:\n    ...\n    def id_for_label(self):\n        return self.data['attrs']['id']\n```\nla funzione si comporta come previsto.\nSi noti che questo errore si verifica solo durante il rendering dei subwidget di un widget di tipo CheckboxSelectMultiple. Questo non ha nulla a che fare con il metodo BoundField.id_for_label().",
    "hints_text": "Hey Jacob — Sembra giusto: non ho guardato in profondità, ma se riesci a inserire il tuo esempio in un caso di test, sarà abbastanza chiaro nella PR. Grazie.\nGrazie Carlton, creerà una pull request al più presto.\nEcco una pull request che risolve questo bug: ​https://github.com/django/django/pull/14533 (chiusa senza merge)\nEcco la nuova pull request ​https://github.com/django/django/pull/14534 contro `main`\nIl test di regressione sembra buono; fallisce prima della correzione, passa dopo. Non penso che questo ​si qualifichi per un backport, quindi lo sto cambiando in \"Pronto per il checkin.\" I commit devono essere squashed?",
    "created_at": "2021-06-17T15:37:34Z",
    "version": "4.0",
    "FAIL_TO_PASS": "[\"If auto_id is provided when initializing the form, the generated ID in\", \"test_iterable_boundfield_select (forms_tests.tests.test_forms.FormsTestCase)\"]",
    "PASS_TO_PASS": "[\"test_attribute_class (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_override (forms_tests.tests.test_forms.RendererTests)\", \"test_default (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_class (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_accessing_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_on_form_and_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_true (forms_tests.tests.test_forms.FormsTestCase)\", \"BaseForm.__repr__() should contain some basic information about the\", \"BaseForm.__repr__() shouldn't trigger the form validation.\", \"test_basic_processing_in_view (forms_tests.tests.test_forms.FormsTestCase)\", \"BoundField without any choices (subwidgets) evaluates to True.\", \"test_boundfield_css_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_empty_label (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"If an id is provided in `Widget.attrs`, it overrides the generated ID,\", \"Multiple calls to BoundField().value() in an unbound form should return\", \"test_boundfield_invalid_index (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag_custom_widget_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"If a widget has no id, label_tag just returns the text with no\", \"test_boundfield_slice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_value_disabled_callable_initial (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_widget_type (forms_tests.tests.test_forms.FormsTestCase)\", \"test_callable_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changed_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_in_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_nothing_returned (forms_tests.tests.test_forms.FormsTestCase)\", \"test_checkbox_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_class_prefix (forms_tests.tests.test_forms.FormsTestCase)\", \"test_cleaned_data_only_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_custom_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"Form fields can customize what is considered as an empty value\", \"test_datetime_changed_data_callable_with_microseconds (forms_tests.tests.test_forms.FormsTestCase)\", \"The cleaned value for a form with a disabled DateTimeField and callable\", \"Cleaning a form with a disabled DateTimeField and callable initial\", \"test_dynamic_construction (forms_tests.tests.test_forms.FormsTestCase)\", \"test_dynamic_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_data_files_multi_value_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted_and_use_required_attribute (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_querydict_args (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"#21962 - adding html escape flag to ErrorDict\", \"test_error_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_html_required_html_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_has_one_class_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_not_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_hidden_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_non_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_errorlist_override (forms_tests.tests.test_forms.FormsTestCase)\", \"test_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_explicit_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"test_extracting_hidden_and_visible (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_deep_copy_error_messages (forms_tests.tests.test_forms.FormsTestCase)\", \"#5749 - `field_name` may be used as a key in _html_output().\", \"BaseForm._html_output() should merge all the hidden input fields and\", \"test_field_named_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"`css_classes` may be used as a key in _html_output() (class comes\", \"`css_classes` may be used as a key in _html_output() (empty classes).\", \"test_filefield_initial_callable (forms_tests.tests.test_forms.FormsTestCase)\", \"test_filefield_with_fileinput_required (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_html_attributes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_disabled_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_noniterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_choices (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_file_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_multiple_choice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_null_boolean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_prefixes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_radio (forms_tests.tests.test_forms.FormsTestCase)\", \"test_get_initial_for_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_has_error (forms_tests.tests.test_forms.FormsTestCase)\", \"test_help_text (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_initial_gets_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_widget (forms_tests.tests.test_forms.FormsTestCase)\", \"test_html_output_with_hidden_input_field_errors (forms_tests.tests.test_forms.FormsTestCase)\", \"test_html_safe (forms_tests.tests.test_forms.FormsTestCase)\", \"test_id_on_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_datetime_values (forms_tests.tests.test_forms.FormsTestCase)\", \"#17922 - required_css_class is added to the label_tag() of required fields.\", \"test_label_split_datetime_not_displayed (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_suffix (forms_tests.tests.test_forms.FormsTestCase)\", \"BoundField label_suffix (if provided) overrides Form label_suffix\", \"test_multipart_encoded_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_checkbox (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_list_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_hidden (forms_tests.tests.test_forms.FormsTestCase)\", \"#19298 -- MultiValueField needs to override the default as it needs\", \"test_multivalue_field_validation (forms_tests.tests.test_forms.FormsTestCase)\", \"#23674 -- invalid initial data should not break form.changed_data()\", \"test_multivalue_optional_subfields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_only_hidden_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_optional_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_specifying_labels (forms_tests.tests.test_forms.FormsTestCase)\", \"test_subclassing_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_templates_with_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unbound_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unicode_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_update_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_true (forms_tests.tests.test_forms.FormsTestCase)\", \"test_validating_multiple_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"The list of form field validators can be modified without polluting\", \"test_various_boolean_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_widget_output (forms_tests.tests.test_forms.FormsTestCase)\"]",
    "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11299",
    "base_commit": "6866c91b638de5368c18713fa851bfe56253ea55",
    "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1338,7 +1338,7 @@ def _add_q(self, q_object, used_aliases, branch_negated=False,\n             if isinstance(child, Node):\n                 child_clause, needed_inner = self._add_q(\n                     child, used_aliases, branch_negated,\n-                    current_negated, allow_joins, split_subq)\n+                    current_negated, allow_joins, split_subq, simple_col)\n                 joinpromoter.add_votes(needed_inner)\n             else:\n                 child_clause, needed_inner = self.build_filter(\n",
    "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,29 @@ def test_add_constraint_percent_escaping(self):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_add_or_constraint(self):\n+        app_label = 'test_addorconstraint'\n+        constraint_name = 'add_constraint_or'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(pink__gt=2, weight__gt=2) | models.Q(weight__lt=0)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=2, weight=3.0)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=3, weight=1.0)\n+        Pony.objects.bulk_create([\n+            Pony(pink=3, weight=-1.0),\n+            Pony(pink=1, weight=-1.0),\n+            Pony(pink=3, weight=3.0),\n+        ])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\ndiff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -23,6 +23,21 @@ def test_simple_query(self):\n         self.assertEqual(lookup.rhs, 2)\n         self.assertEqual(lookup.lhs.target, Author._meta.get_field('num'))\n \n+    def test_simplecol_query(self):\n+        query = Query(Author)\n+        where = query.build_where(Q(num__gt=2, name__isnull=False) | Q(num__lt=F('id')))\n+\n+        name_isnull_lookup, num_gt_lookup = where.children[0].children\n+        self.assertIsInstance(num_gt_lookup, GreaterThan)\n+        self.assertIsInstance(num_gt_lookup.lhs, SimpleCol)\n+        self.assertIsInstance(name_isnull_lookup, IsNull)\n+        self.assertIsInstance(name_isnull_lookup.lhs, SimpleCol)\n+\n+        num_lt_lookup = where.children[1]\n+        self.assertIsInstance(num_lt_lookup, LessThan)\n+        self.assertIsInstance(num_lt_lookup.rhs, SimpleCol)\n+        self.assertIsInstance(num_lt_lookup.lhs, SimpleCol)\n+\n     def test_complex_query(self):\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2) | Q(num__lt=0))\n",
    "problem_statement": "CheckConstraint con l'operatore OR genera SQL non corretto su SQLite e Oracle.\nDescrizione\n\n\t\t(ultima modifica di Michael Spallino)\n\nDjango include in modo errato il nome completo del campo (ad esempio, “my_table”.”my_field”) in parte della restrizione di controllo. Questo sembra accadere solo quando c'è una combinazione di clausole OR e AND nella CheckConstraint.\nL'inclusione del nome completo del campo fa fallire la migrazione perché, quando eliminiamo la tabella vecchia e sostituiamo il nome della tabella di staging, la restrizione fallisce con un'eccezione di schema malformato (su sqlite) che indica che il campo non esiste nella tabella. Sembra che questo sia dovuto al fatto che gli elementi della clausola AND utilizzano Col, mentre la clausola OR utilizza SimpleCol. Ecco un esempio di questo comportamento:\n```python\nclass TestConstraint(models.Model):\n    field_1 = models.IntegerField(blank=True, null=True)\n    flag = models.BooleanField(blank=False, null=False)\n    class Meta:\n        constraints = [\n            models.CheckConstraint(check=models.Q(flag__exact=True, field_1__isnull=False) |\n                                             models.Q(flag__exact=False,),\n                                 name='field_1_has_value_if_flag_set'),\n        ]\n```\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('app', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TestConstraint',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('field_1', models.IntegerField(blank=True, null=True)),\n                ('flag', models.BooleanField()),\n            ],\n        ),\n        migrations.AddConstraint(\n            model_name='testconstraint',\n            constraint=models.CheckConstraint(check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'), name='field_1_has_value_if_flag_set'),\n        ),\n    ]\n```\nQuesto è l'SQL che la migrazione tenterà di eseguire:\n```sql\nBEGIN;\n--\n-- Create model TestConstraint\n--\nCREATE TABLE \"app_testconstraint\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"field_1\" integer NULL, \"flag\" bool NOT NULL);\n--\n-- Create constraint field_1_has_value_if_flag_set on model testconstraint\n--\nCREATE TABLE \"new__app_testconstraint\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"field_1\" integer NULL, \"flag\" bool NOT NULL, CONSTRAINT \"field_1_has_value_if_flag_set\" CHECK (((\"new__app_testconstraint\".\"field_1\" IS NOT NULL AND \"new__app_testconstraint\".\"flag\" = 1) OR \"flag\" = 0)));\nINSERT INTO \"new__app_testconstraint\" (\"id\", \"field_1\", \"flag\") SELECT \"id\", \"field_1\", \"flag\" FROM \"app_testconstraint\";\nDROP TABLE \"app_testconstraint\";\nALTER TABLE \"new__app_testconstraint\" RENAME TO \"app_testconstraint\";\nCOMMIT;\n```\nL'istruzione ALTER TABLE fallisce con il seguente errore: \n```\nmalformed database schema (app_testconstraint) - no such column: new__app_testconstraint.field_1.\n```\nLa query CREATE TABLE corretta dovrebbe essere:\n```sql\nCREATE TABLE \"new__app_testconstraint\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"field_1\" integer NULL, \"flag\" bool NOT NULL, CONSTRAINT \"field_1_has_value_if_flag_set\" CHECK (((\"field_1\" IS NOT NULL AND \"flag\" = 1) OR \"flag\" = 0)));\n```",
    "hints_text": "Potresti confermare che questo problema si verifica anche su backend diversi da SQLite?\n​PR\nLe modifiche del patch sembrano ottime. Ho lasciato un suggerimento per semplificare una delle asserzioni nei test per renderle più facili da leggere per un essere umano, ma stanno testando la cosa giusta.",
    "created_at": "2019-04-28T11:15:08Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_simplecol_query (queries.test_query.TestQuery)\"]",
    "PASS_TO_PASS": "[\"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_complex_query (queries.test_query.TestQuery)\", \"test_foreign_key (queries.test_query.TestQuery)\", \"test_foreign_key_exclusive (queries.test_query.TestQuery)\", \"test_foreign_key_f (queries.test_query.TestQuery)\", \"test_multiple_fields (queries.test_query.TestQuery)\", \"test_negated_nullable (queries.test_query.TestQuery)\", \"test_simple_query (queries.test_query.TestQuery)\", \"test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_add_binaryfield (migrations.test_operations.OperationTests)\", \"test_add_charfield (migrations.test_operations.OperationTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_field (migrations.test_operations.OperationTests)\", \"test_add_field_m2m (migrations.test_operations.OperationTests)\", \"test_add_field_preserve_default (migrations.test_operations.OperationTests)\", \"test_add_index (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_textfield (migrations.test_operations.OperationTests)\", \"test_alter_field (migrations.test_operations.OperationTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_pk (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_with_index (migrations.test_operations.OperationTests)\", \"test_alter_fk (migrations.test_operations.OperationTests)\", \"test_alter_fk_non_fk (migrations.test_operations.OperationTests)\", \"test_alter_index_together (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_model_managers (migrations.test_operations.OperationTests)\", \"test_alter_model_managers_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_options (migrations.test_operations.OperationTests)\", \"test_alter_model_options_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_table (migrations.test_operations.OperationTests)\", \"test_alter_model_table_m2m (migrations.test_operations.OperationTests)\", \"test_alter_model_table_none (migrations.test_operations.OperationTests)\", \"test_alter_model_table_noop (migrations.test_operations.OperationTests)\", \"test_alter_order_with_respect_to (migrations.test_operations.OperationTests)\", \"test_alter_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"test_autofield_foreignfield_growth (migrations.test_operations.OperationTests)\", \"test_column_name_quoting (migrations.test_operations.OperationTests)\", \"test_create_model (migrations.test_operations.OperationTests)\", \"test_create_model_inheritance (migrations.test_operations.OperationTests)\", \"test_create_model_m2m (migrations.test_operations.OperationTests)\", \"test_create_model_managers (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_unique_after (migrations.test_operations.OperationTests)\", \"test_create_proxy_model (migrations.test_operations.OperationTests)\", \"test_create_unmanaged_model (migrations.test_operations.OperationTests)\", \"test_delete_model (migrations.test_operations.OperationTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_delete_proxy_model (migrations.test_operations.OperationTests)\", \"test_model_with_bigautofield (migrations.test_operations.OperationTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_fk (migrations.test_operations.OperationTests)\", \"test_remove_index (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_rename_field (migrations.test_operations.OperationTests)\", \"test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model (migrations.test_operations.OperationTests)\", \"test_rename_model_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_run_python (migrations.test_operations.OperationTests)\", \"test_run_python_atomic (migrations.test_operations.OperationTests)\", \"test_run_python_noop (migrations.test_operations.OperationTests)\", \"test_run_python_related_assignment (migrations.test_operations.OperationTests)\", \"test_run_sql (migrations.test_operations.OperationTests)\", \"test_run_sql_noop (migrations.test_operations.OperationTests)\", \"test_run_sql_params (migrations.test_operations.OperationTests)\", \"test_run_sql_params_invalid (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state2 (migrations.test_operations.OperationTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "psf/requests",
    "instance_id": "psf__requests-1142",
    "base_commit": "22623bd8c265b78b161542663ee980738441c307",
    "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -386,13 +386,14 @@ def prepare_body(self, data, files):\n         self.body = body\n \n     def prepare_content_length(self, body):\n-        self.headers['Content-Length'] = '0'\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n             body.seek(0, 0)\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\n+        elif self.method not in ('GET', 'HEAD'):\n+            self.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n",
    "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -58,6 +58,13 @@ def test_basic_building(self):\n         assert pr.body == 'life=42'\n \n \n+    def test_no_content_length(self):\n+        get_req = requests.Request('GET', httpbin('get')).prepare()\n+        self.assertTrue('Content-Length' not in get_req.headers)\n+        head_req = requests.Request('HEAD', httpbin('head')).prepare()\n+        self.assertTrue('Content-Length' not in head_req.headers)\n+\n+\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request('GET', \"http://0.0.0.0/get/test case\").prepare()\n \n",
    "problem_statement": "`requests.get` sta sempre inviando la lunghezza del contenuto\nCiao,\n\nSembra che `requests.get` aggiunga sempre l'intestazione 'content-length' alla richiesta.\nPenso che il comportamento corretto sia non aggiungere automaticamente questa intestazione nelle richieste GET o aggiungere la possibilità di non inviarla.\n\nAd esempio, http://amazon.com restituisce 503 per ogni richiesta GET che contiene l'intestazione 'content-length'.\n\nGrazie,\n\nOren",
    "hints_text": "Questo è stato fatto nell'issue #957 - Allega Content-Length a tutto.\n\nOK, non penso sia la soluzione giusta.\nimho le richieste GET non dovrebbero contenere di default l'intestazione 'content-length'.\n\nCorrelato: geemus/excon/pull/113\n\nNon c'è nulla che impedisca di inviare dati in una richiesta GET.\n\nAl momento il seguente codice:\n`requests.get('http://amazon.com')` restituisce 503, perché il pacchetto aggiunge automaticamente l'intestazione content length alla richiesta.\n\nSe rimuovo quell'intestazione funziona correttamente. Il problema è che attualmente, da quando è stato risolto l'issue #957, questa intestazione viene aggiunta automaticamente a ogni richiesta e questo è la causa del problema.\n\nHmm, cerchiamo qualche altro URL che fa questo.\n\nNon è contro le specifiche HTTP/1.1, l'ultima volta che ho controllato, quindi non capisco perché Amazon restituisce un 503\n\nLe richieste GET di solito non includono un payload di dati nel corpo, e presumo che il loro server supponga che lo faccia perché c'è un content-length, ma non gestisce il caso limite vuoto.\n\nÈ semanticamente ambiguo - una richiesta con un'intestazione Content-Length significa \"corpo di lunghezza zero\" o significa \"nessun corpo è stato incluso in questo messaggio\"?\n\nCredo che Requests dovrebbe seguire la saggezza convenzionale, che è che la maggior parte degli UA non invia l'intestazione Content-Length per le richieste GET.\n\nHo provato a riprodurre questo e ho ottenuto un comportamento strano, a volte funziona:\n\n```\n>>> r = requests.get('https://amazon.com', allow_redirects=False)\n>>> print r.text\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://www.amazon.com/\">here</a>.</p>\n</body></html>\n\n>>> print r.status_code\n301\n```\n\nma a volte no:\n\n```\n>>> print requests.get('https://amazon.com', allow_redirects=False).status_code\n503\n\n>>> print requests.get('https://amazon.com', allow_redirects=False).text\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href=\"https://www.amazon.com/\">here</a>.</p>\n</body></html>\n```\n\nIn realtà, a volte sembra che potrebbe essere un bug di Amazon:\n\n```\n>>> print requests.get('https://amazon.com', allow_redirects=False).status_code\n503\n>>> print requests.get('http://amazon.com', allow_redirects=False).status_code\n301\n>>> print requests.get('http://amazon.com', allow_redirects=False).status_code\n503\n>>> print requests.get('http://amazon.com', allow_redirects=False).status_code\n503\n```\n\nNon sono sicuro se sia rilevante che sono passato da ssl a http semplice quando ho ottenuto quel 301.\n\n```\n>>> print requests.__version__\n1.0.3\n```\n\nProva a consentire i reindirizzamenti. Il 301 verrebbe seguito altrimenti. Stampare il testo per un 503 sarebbe utile anche.\n\nsigmavirus24: sì, ho aggiunto esplicitamente allow_redirects per vedere cosa sarebbe successo: nei casi rari in cui ottengo un 301, in realtà funziona.\n\nE, scusa per il doppio testo 301, ho copiato la cosa sbagliata. Questo è come appare la pagina 503:\n\n```\n>>> r = requests.get('http://amazon.com') ; print r.text\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\"/>\n<title>500 Service Unavailable Error</title>\n</head>\n<body style=\"padding:1% 10%;font-family:Verdana,Arial,Helvetica,sans-serif\">\n  <a href=\"http://www.amazon.com/\"><img src=\"https://images-na.ssl-images-amazon.com/images/G/01/img09/x-site/other/a_com_logo_200x56.gif\" alt=\"Amazon.com\" width=\"200\" height=\"56\" border=\"0\"/></a>\n  <table>\n    <tr>\n      <td valign=\"top\" style=\"width:52%;font-size:10pt\"><br/><h2 style=\"color:#E47911\">Oops!</h2><p>We're very sorry, but we're having trouble doing what you just asked us to do. Please give us another chance--click the Back button on your browser and try your request again. Or start from the beginning on our <a href=\"http://www.amazon.com/\">homepage</a>.</p></td>\n      <th><img src=\"https://images-na.ssl-images-amazon.com/images/G/01/x-locale/common/errors-alerts/product-fan-500.jpg\" alt=\"product collage\"/></th>\n    </tr>\n  </table>\n</body>\n</html>\n>>> r.status_code\n503\n```\n\nMa, inoltre, 503 non è il codice di errore sbagliato per una richiesta malformata? [503 significa](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4) \"impossibile elaborare la richiesta a causa di un carico elevato\". Penso che se Amazon stesse facendo questo intenzionalmente, restituirebbe un 400 o almeno qualcosa nella gamma 4xx.\n\nNon che stia dicendo di ignorare un problema con uno dei primi 10 siti web sulla terra solo perché potrebbero essere pazzi.\n\nNon sto dicendo di ignorarlo, sto solo dicendo che non è contro le specifiche. E sì, sono d'accordo che il 503 sembra essere un errore di richiesta malformata. Stasera farò un mockup di aggiunta condizionale per le GET e vedrò se @kennethreitz non si opporrebbe alla leggera complessità aggiuntiva.\n\nC'è una decisione o qualche progresso con questo problema?\n\nHo incontrato altri server sensibili che si bloccano a causa delle intestazioni. Mentre sarebbe meglio ottenere qualcosa di mergeato in requests upstream, un'altra opzione è guardare [careful-requests](https://github.com/kanzure/careful-requests) che mira a gestire le richieste che necessitano di intestazioni sensibili (semplicemente monkeypatcha requests). Al momento questo non include Content-Length su GET ma è banale da aggiungere, penso. Spero che questo aiuti.\n\nOnestamente, mi sono dimenticato di questo, ma spero di occuparmene stasera o domani.\n\nVado avanti e do un'occhiata a questo; sigmavirus24 si occuperà di #1133 nel frattempo.",
    "created_at": "2013-01-25T05:19:16Z",
    "version": "1.1",
    "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_no_content_length\"]",
    "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\"]",
    "environment_setup_commit": "ba25184ed5f0bf9b876dea3cf4312fa35b539a7c",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "pallets/flask",
    "instance_id": "pallets__flask-5014",
    "base_commit": "7ee9ceb71e868944a46e1ff00b506772a53a4f1d",
    "patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -190,6 +190,9 @@ def __init__(\n             root_path=root_path,\n         )\n \n+        if not name:\n+            raise ValueError(\"'name' may not be empty.\")\n+\n         if \".\" in name:\n             raise ValueError(\"'name' may not contain a dot '.' character.\")\n \n",
    "test_patch": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -256,6 +256,11 @@ def test_dotted_name_not_allowed(app, client):\n         flask.Blueprint(\"app.ui\", __name__)\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+\n def test_dotted_names_from_app(app, client):\n     test = flask.Blueprint(\"test\", __name__)\n \n",
    "problem_statement": "Richiedi un nome non vuoto per i Blueprints\nLe cose non funzionano correttamente se a un Blueprint viene assegnato un nome vuoto (ad esempio #4944).\r\nSarebbe utile se venisse sollevato un `ValueError` quando si tenta di farlo.",
    "hints_text": null,
    "created_at": "2023-03-04T18:36:21Z",
    "version": "2.3",
    "FAIL_TO_PASS": "[\"tests/test_blueprints.py::test_empty_name_not_allowed\"]",
    "PASS_TO_PASS": "[\"tests/test_blueprints.py::test_blueprint_specific_error_handling\", \"tests/test_blueprints.py::test_blueprint_specific_user_error_handling\", \"tests/test_blueprints.py::test_blueprint_app_error_handling\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[-/-/]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/--/]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/-/-/]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo--/foo]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo/--/foo/]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[-/bar-/bar]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo/-/bar-/foo/bar]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo/-bar-/foo/bar]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo-/bar-/foo/bar]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo/-//bar-/foo/bar]\", \"tests/test_blueprints.py::test_blueprint_prefix_slash[/foo//-/bar-/foo/bar]\", \"tests/test_blueprints.py::test_blueprint_url_defaults\", \"tests/test_blueprints.py::test_blueprint_url_processors\", \"tests/test_blueprints.py::test_templates_and_static\", \"tests/test_blueprints.py::test_default_static_max_age\", \"tests/test_blueprints.py::test_templates_list\", \"tests/test_blueprints.py::test_dotted_name_not_allowed\", \"tests/test_blueprints.py::test_dotted_names_from_app\", \"tests/test_blueprints.py::test_empty_url_defaults\", \"tests/test_blueprints.py::test_route_decorator_custom_endpoint\", \"tests/test_blueprints.py::test_route_decorator_custom_endpoint_with_dots\", \"tests/test_blueprints.py::test_endpoint_decorator\", \"tests/test_blueprints.py::test_template_filter\", \"tests/test_blueprints.py::test_add_template_filter\", \"tests/test_blueprints.py::test_template_filter_with_name\", \"tests/test_blueprints.py::test_add_template_filter_with_name\", \"tests/test_blueprints.py::test_template_filter_with_template\", \"tests/test_blueprints.py::test_template_filter_after_route_with_template\", \"tests/test_blueprints.py::test_add_template_filter_with_template\", \"tests/test_blueprints.py::test_template_filter_with_name_and_template\", \"tests/test_blueprints.py::test_add_template_filter_with_name_and_template\", \"tests/test_blueprints.py::test_template_test\", \"tests/test_blueprints.py::test_add_template_test\", \"tests/test_blueprints.py::test_template_test_with_name\", \"tests/test_blueprints.py::test_add_template_test_with_name\", \"tests/test_blueprints.py::test_template_test_with_template\", \"tests/test_blueprints.py::test_template_test_after_route_with_template\", \"tests/test_blueprints.py::test_add_template_test_with_template\", \"tests/test_blueprints.py::test_template_test_with_name_and_template\", \"tests/test_blueprints.py::test_add_template_test_with_name_and_template\", \"tests/test_blueprints.py::test_context_processing\", \"tests/test_blueprints.py::test_template_global\", \"tests/test_blueprints.py::test_request_processing\", \"tests/test_blueprints.py::test_app_request_processing\", \"tests/test_blueprints.py::test_app_url_processors\", \"tests/test_blueprints.py::test_nested_blueprint\", \"tests/test_blueprints.py::test_nested_callback_order\", \"tests/test_blueprints.py::test_nesting_url_prefixes[/parent-/child-None-None]\", \"tests/test_blueprints.py::test_nesting_url_prefixes[/parent-None-None-/child]\", \"tests/test_blueprints.py::test_nesting_url_prefixes[None-None-/parent-/child]\", \"tests/test_blueprints.py::test_nesting_url_prefixes[/other-/something-/parent-/child]\", \"tests/test_blueprints.py::test_nesting_subdomains\", \"tests/test_blueprints.py::test_child_and_parent_subdomain\", \"tests/test_blueprints.py::test_unique_blueprint_names\", \"tests/test_blueprints.py::test_self_registration\", \"tests/test_blueprints.py::test_blueprint_renaming\"]",
    "environment_setup_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-18763",
    "base_commit": "70381f282f2d9d039da860e391fe51649df2779d",
    "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -703,7 +703,7 @@ def _print_Subs(self, subs):\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n             e[0] + '=' + e[1] for e in zip(latex_old, latex_new))\n-        return r'\\left. %s \\right|_{\\substack{ %s }}' % (latex_expr,\n+        return r'\\left. \\left(%s\\right) \\right|_{\\substack{ %s }}' % (latex_expr,\n                                                          latex_subs)\n \n     def _print_Integral(self, expr):\n",
    "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -674,7 +674,8 @@ def test_latex_derivatives():\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n-        x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+        x, y), (1, 2))) == r'\\left. \\left(x y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n \n \n def test_latex_integrals():\n",
    "problem_statement": "Parentesizzazione errata delle Subs\nEcco un esempio.\r\n```python\r\n>>> from sympy import Subs\r\n>>> from sympy.abc import x,y\r\n>>> 3*Subs(-x+y, (x,),(1,))\r\n```\r\nLa stampa LaTeX di questo dà:  \r\n```python\r\n'3 \\\\left. - x + y \\\\right|_{\\\\substack{ x=1 }}'\r\n```\r\n\r\n![image](https://quicklatex.com/cache3/76/ql_9672fd7e62c909ff3d9ac8543c2e2576_l3.png)\r\n\r\n\r\nSarebbe meglio parentesizzare a:  \r\n```python\r\n'3 \\\\left. \\\\left(- x + y\\\\right) \\\\right|_{\\\\substack{ x=1 }}'\r\n```\r\n\r\n![image](https://quicklatex.com/cache3/bf/ql_936ffdb876e784206d4c54bb93d28dbf_l3.png)",
    "hints_text": null,
    "created_at": "2020-03-03T03:40:06Z",
    "version": "1.5",
    "FAIL_TO_PASS": "[\"test_latex_subs\"]",
    "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\"]",
    "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11490",
    "base_commit": "a7038adbd02c916315b16939b835f021c2ee8880",
    "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -426,6 +426,7 @@ def get_combinator_sql(self, combinator, all):\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n                 if not compiler.query.values_select and self.query.values_select:\n+                    compiler.query = compiler.query.clone()\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\n",
    "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -123,6 +123,9 @@ def test_union_with_values(self):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n+        # List of columns can be changed.\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n \n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n",
    "problem_statement": "Le query composte non possono modificare l'elenco delle colonne con values()/values_list().\nDescrizione\n\nLe query composte non possono modificare l'elenco delle colonne quando values()/values_list() viene valutato più volte, ad esempio:\n>>> ReservedName.objects.create(name='a', order=2)\n>>> qs1 = ReservedName.objects.all()\n>>> print(qs1.union(qs1).values_list('name', 'order').get())\n('a', 2)\n>>> print(qs1.union(qs1).values_list('order').get())\n('a', 2)\n(vedi ​compiler.py#L428-L433).",
    "hints_text": null,
    "created_at": "2019-06-19T07:47:46Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
    "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-16116",
    "base_commit": "5d36a8266c7d5d1994d7a7eeb4016f80d9cb0401",
    "patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -70,7 +70,10 @@ def add_arguments(self, parser):\n             \"--check\",\n             action=\"store_true\",\n             dest=\"check_changes\",\n-            help=\"Exit with a non-zero status if model changes are missing migrations.\",\n+            help=(\n+                \"Exit with a non-zero status if model changes are missing migrations \"\n+                \"and don't actually write them.\"\n+            ),\n         )\n         parser.add_argument(\n             \"--scriptable\",\n@@ -248,12 +251,12 @@ def handle(self, *app_labels, **options):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n+            if check_changes:\n+                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n",
    "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2391,9 +2391,10 @@ def test_makemigrations_check(self):\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n         \"\"\"\n-        with self.temporary_migration_module():\n+        with self.temporary_migration_module() as tmpdir:\n             with self.assertRaises(SystemExit):\n                 call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n \n         with self.temporary_migration_module(\n             module=\"migrations.test_migrations_no_changes\"\n",
    "problem_statement": "`makemigrations --check` per la generazione delle migrazioni è incoerente con altri utilizzi di `--check`\nDescrizione\n\nPer scriptare un controllo per le migrazioni mancanti senza effettivamente voler creare le migrazioni, è necessario utilizzare sia `--check` che `--dry-run`, il che è incoerente con `migrate --check` e `optimizemigration --check`, che semplicemente escono (dopo aver eventualmente registrato qualcosa).\nSuggerisco che `makemigrations --check` dovrebbe semplicemente uscire senza creare le migrazioni.\nLa scelta di scrivere comunque le migrazioni non è stata discussa, per quanto ne so (AFAICT), nel ticket:25604 o ​https://groups.google.com/g/django-developers/c/zczdY6c9KSg/m/ZXCXQsGDDAAJ.\nNotato durante la lettura della ​PR per regolare la documentazione di `migrate --check`. Penso che la documentazione attuale sia silenziosa su questa questione.",
    "hints_text": "Penso che questo abbia senso.",
    "created_at": "2022-09-25T23:54:49Z",
    "version": "4.2",
    "FAIL_TO_PASS": "[\"makemigrations --check should exit with a non-zero status when\"]",
    "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_optimizemigration_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_optimizemigration_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_ambigious_prefix (migrations.test_commands.OptimizeMigrationTests)\", \"test_app_without_migrations (migrations.test_commands.OptimizeMigrationTests)\", \"test_creates_replace_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests)\", \"test_fails_squash_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests)\", \"test_no_optimization_possible (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimization (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimization_no_verbosity (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimizemigration_check (migrations.test_commands.OptimizeMigrationTests)\", \"test_unknown_prefix (migrations.test_commands.OptimizeMigrationTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"Tests basic usage of the migrate command.\", \"test_migrate_backward_to_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_migrate_check (migrations.test_commands.MigrateTests)\", \"test_migrate_check_migrated_app (migrations.test_commands.MigrateTests)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests)\", \"migrate exits if it detects a conflict.\", \"--fake-initial only works if all tables created in the initial\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"Split initial migrations can be faked with --fake-initial.\", \"Running migrate with some migrations applied before their dependencies\", \"`Migration.initial = False` skips fake-initial detection.\", \"test_migrate_not_reflected_changes (migrations.test_commands.MigrateTests)\", \"Migrating to a squashed migration specified by name should succeed\", \"Tests migrate --plan output.\", \"With prune=True, references to migration files deleted from the\", \"Running a single squashed migration should record all of the original\", \"Running migrate for a squashed migration should record as run\", \"Running migrate --run-syncdb with an app_label only creates tables for\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"For an app without migrations, editor.execute() is used for executing\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_prune_deleted_squashed_migrations_in_replaces (migrations.test_commands.MigrateTests)\", \"test_prune_no_app_label (migrations.test_commands.MigrateTests)\", \"test_prune_no_migrations_to_prune (migrations.test_commands.MigrateTests)\", \"Assuming you have 3 apps, `A`, `B`, and `C`, such that:\", \"showmigrations --list  displays migrations and whether or not they're\", \"test_showmigrations_list_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"Tests --plan output of showmigrations command\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"`showmigrations --plan app_label` output with multiple app_labels.\", \"Tests --plan output of showmigrations command without migrations\", \"`showmigrations --plan app_label` output with a single app_label.\", \"Tests --plan output of showmigrations command with squashed migrations.\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"sqlmigrate outputs reverse looking SQL.\", \"Transaction wrappers aren't shown for non-atomic migrations.\", \"Transaction wrappers aren't shown for databases that don't support\", \"sqlmigrate outputs forward looking SQL.\", \"test_sqlmigrate_no_operations (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_noop (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_unrepresentable (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\", \"test_squashed_name_exists (migrations.test_commands.SquashMigrationsTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations doesn't accept a starting migration after the ending migration.\", \"test_squashmigrations_manual_porting (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations optimizes operations.\", \"squashmigrations squashes migrations.\", \"squashmigrations accepts a starting migration.\", \"squashmigrations --no-optimize doesn't optimize operations.\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations respects --dry-run option when fixing migration\", \"`makemigrations --merge --dry-run` writes the merge migration file to\", \"test_makemigrations_auto_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations prompts the user when adding auto_now_add to an existing\", \"test_makemigrations_auto_now_add_interactive_quit (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations exits if it detects a conflict.\", \"The history consistency checks in makemigrations respect\", \"test_makemigrations_continues_number_sequence_after_squash (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations raises a nice error when migrations are disabled for an\", \"`makemigrations --dry-run` should not ask for defaults.\", \"Allow `makemigrations --dry-run` to output the migrations file to\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly constructs an empty migration.\", \"makemigrations exits if no app is specified with 'empty' mode.\", \"test_makemigrations_field_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly merges the conflicting migrations with --noinput.\", \"makemigrations should raise InconsistentMigrationHistory exception if\", \"test_makemigrations_inconsistent_history_db_failure (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations enters interactive mode and merges properly.\", \"The user is prompted to merge by default if there are conflicts and\", \"makemigrations messages when adding a NOT NULL field in interactive\", \"makemigrations messages when changing a NULL field to NOT NULL in\", \"makemigrations enters and exits interactive mode properly.\", \"makemigrations prompts the user when adding a unique field with\", \"makemigrations --merge does not output any operations from apps that\", \"makemigrations exits if in merge mode with no conflicts.\", \"makemigrations should print the relative paths to the migrations unless\", \"makemigrations prints the absolute path if os.path.relpath() raises a\", \"makemigrations announces the migration at the default verbosity level.\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations creates migrations when specifying a custom location\", \"test_makemigrations_model_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should detect initial is needed on empty migration\", \"makemigrations exits when there are no changes to an app.\", \"makemigrations exits when there are no changes and no apps are specified.\", \"makemigrations fails to merge migrations with no common ancestor.\", \"Migration directories without an __init__.py file are allowed.\", \"Non-interactive makemigrations fails when a default is missing on a\", \"makemigrations adds and removes a possible field rename in\", \"makemigrations adds and removes a possible model rename in\", \"test_makemigrations_non_interactive_unique_callable_default_addition (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should recognize number-only migrations (0001.py).\", \"With scriptable=True, log output is diverted to stderr, and only the\", \"test_makemigrations_scriptable_merge (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations does not create a merge for an unspecified app even if\", \"makemigrations does not raise a CommandError when an unspecified app\", \"test_makemigrations_update (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_applied_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_dependency_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_existing_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_manual_porting (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_no_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_update_squash_migration (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations --name generate a custom migration name.\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\"]",
    "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11099",
    "base_commit": "d26b2424437dabeeca94d7900b37d2df4410da0c",
    "patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'^[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'^[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
    "test_patch": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ def test_unicode_validator(self):\n         invalid_usernames = [\n             \"o'connell\", \"عبد ال\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ def test_unicode_validator(self):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", 'Éric', 'jean marc', \"أحمد\"]\n+        invalid_usernames = [\"o'connell\", 'Éric', 'jean marc', \"أحمد\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n",
    "problem_statement": "UsernameValidator consente una nuova riga finale nei nomi utente\nDescrizione\n\nASCIIUsernameValidator e UnicodeUsernameValidator utilizzano l'espressione regolare \nr'^[\\w.@+-]+$'\nL'intento è di consentire solo caratteri alfanumerici oltre a ., @, + e -. Tuttavia, una peculiarità poco nota delle espressioni regolari di Python è che $ corrisponderà anche a una nuova riga finale. Pertanto, i validatori dei nomi utente accetteranno nomi utente che terminano con una nuova riga. È possibile evitare questo comportamento utilizzando invece \\A e \\Z per terminare le espressioni regolari. Ad esempio, l'espressione regolare del validatore potrebbe essere modificata in\nr'\\A[\\w.@+-]+\\Z'\nper rifiutare i nomi utente che terminano con una nuova riga.\nNon sono sicuro di come pubblicare ufficialmente una patch, ma la modifica richiesta è banale - utilizzando l'espressione regolare sopra nei due validatori in contrib.auth.validators.",
    "hints_text": null,
    "created_at": "2019-03-20T03:46:18Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_ascii_validator (auth_tests.test_validators.UsernameValidatorsTests)\", \"test_unicode_validator (auth_tests.test_validators.UsernameValidatorsTests)\", \"test_help_text (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\"]",
    "PASS_TO_PASS": "[\"test_help_text (auth_tests.test_validators.MinimumLengthValidatorTest)\", \"test_validate (auth_tests.test_validators.MinimumLengthValidatorTest)\", \"test_help_text (auth_tests.test_validators.NumericPasswordValidatorTest)\", \"test_validate (auth_tests.test_validators.NumericPasswordValidatorTest)\", \"test_validate (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\", \"test_validate_property (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\", \"test_empty_password_validator_help_text_html (auth_tests.test_validators.PasswordValidationTest)\", \"test_get_default_password_validators (auth_tests.test_validators.PasswordValidationTest)\", \"test_get_password_validators_custom (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_changed (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_changed_with_custom_validator (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_text_html (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_text_html_escaping (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_texts (auth_tests.test_validators.PasswordValidationTest)\", \"test_validate_password (auth_tests.test_validators.PasswordValidationTest)\", \"test_help_text (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_validate (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_validate_custom_list (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_validate_django_supplied_file (auth_tests.test_validators.CommonPasswordValidatorTest)\"]",
    "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-9320",
    "base_commit": "e05cef574b8f23ab1b57f57e7da6dee509a4e230",
    "patch": "diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py\n--- a/sphinx/cmd/quickstart.py\n+++ b/sphinx/cmd/quickstart.py\n@@ -95,6 +95,12 @@ def is_path(x: str) -> str:\n     return x\n \n \n+def is_path_or_empty(x: str) -> str:\n+    if x == '':\n+        return x\n+    return is_path(x)\n+\n+\n def allow_empty(x: str) -> str:\n     return x\n \n@@ -223,7 +229,7 @@ def ask_user(d: Dict) -> None:\n         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))\n         print()\n         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),\n-                              '', is_path)\n+                              '', is_path_or_empty)\n         if not d['path']:\n             sys.exit(1)\n \n",
    "test_patch": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+from os import path\n \n import pytest\n \n@@ -250,3 +251,18 @@ def test_extensions(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n+\n+\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile() \n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n",
    "problem_statement": "`sphinx-quickstart` con un conf.py esistente non esce facilmente\n**Descrivi il bug**\nHo allegato uno screenshot nella sezione screenshot che penso spieghi il bug meglio.\n\n- Sto eseguendo `sphinx-quickstart` in una cartella con un conf.py già esistente.\n- Dice *\"Inserisci un nuovo nome del percorso radice (o solo Invio per uscire)\"*.\n- Tuttavia, premendo 'Invio' restituisce un messaggio di errore *\"Inserisci un nome di percorso valido\"*.\n\n**Per riprodurre**\nPassaggi per riprodurre il comportamento:\n```\n$ sphinx-quickstart\n```\n\n**Comportamento atteso**\nDopo aver premuto Invio, sphinx-quickstart esce.\n\n**Il tuo progetto**\nn/a\n\n**Screenshot**\n\n![sphinx-enter-exit](https://user-images.githubusercontent.com/30437511/121676712-4bf54f00-caf8-11eb-992b-636e56999d54.png)\nPremo Invio per il primo prompt.\n\n**Informazioni sull'ambiente**\n- SO: Ubuntu 20.04\n- Versione Python: Python 3.8.5\n- Versione Sphinx: sphinx-build 3.2.1\n- Estensioni Sphinx: nessuna\n- Strumenti extra: nessuno\n\n**Contesto aggiuntivo**\nHo fatto una ricerca rapida ma non ho trovato problemi simili esistenti. Mi dispiace se questo è un duplicato.",
    "hints_text": "Potrei provare a risolvere questo da solo (forse?)\nOttima osservazione @dogenstein! A mio parere, se il percorso selezionato ha già un `conf.py`, `sphinx-quickstart` dovrebbe uscire immediatamente con stato 1.",
    "created_at": "2021-06-11T13:29:04Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"tests/test_quickstart.py::test_exits_when_existing_confpy\"]",
    "PASS_TO_PASS": "[\"tests/test_quickstart.py::test_do_prompt\", \"tests/test_quickstart.py::test_do_prompt_inputstrip\", \"tests/test_quickstart.py::test_do_prompt_with_nonascii\", \"tests/test_quickstart.py::test_quickstart_defaults\", \"tests/test_quickstart.py::test_quickstart_all_answers\", \"tests/test_quickstart.py::test_generated_files_eol\", \"tests/test_quickstart.py::test_quickstart_and_build\", \"tests/test_quickstart.py::test_default_filename\", \"tests/test_quickstart.py::test_extensions\"]",
    "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "psf/requests",
    "instance_id": "psf__requests-5414",
    "base_commit": "39d0fdd9096f7dceccbc8f82e1eda7dd64717a8e",
    "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -403,7 +403,7 @@ def prepare_url(self, url, params):\n                 host = self._get_idna_encoded_host(host)\n             except UnicodeError:\n                 raise InvalidURL('URL has an invalid label.')\n-        elif host.startswith(u'*'):\n+        elif host.startswith((u'*', u'.')):\n             raise InvalidURL('URL has an invalid label.')\n \n         # Carefully reconstruct the network location\n",
    "test_patch": "diff --git a/tests/test_requests.py b/tests/test_requests.py\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,8 @@ def test_entry_points(self):\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
    "problem_statement": "Ottenere http://.example.com genera un errore UnicodeError\nTentare di accedere a, ad esempio, `http://.example.com` provoca un UnicodeError. Sembra che l'intenzione finora sia stata di generare invece un `InvalidUrl` (vedi ad esempio [questa riga](https://github.com/psf/requests/blob/ca6f9af5dba09591007b15a7368bc0f006b7cc50/requests/models.py#L401)).\n\nVedo che c'è stata qualche esitazione nel risolvere un problema simile (#4168) e vorrei aggiungere che anche catturare l'errore per rilanciarlo come eccezione di requests sarebbe utile.\n\n## Risultato Atteso\n\nBasato sulla PR #774: `InvalidUrl: URL ha un'etichetta non valida.`\n\n## Risultato Reale\n\n`UnicodeError: codifica con codec 'idna' fallita (UnicodeError: etichetta vuota o troppo lunga)`\n\n## Passaggi per la Riproduzione\n\n```python3\nimport requests\nrequests.get(\"http://.example.com\")\n```\n\n## Informazioni di Sistema\n\n```\n$ python -m requests.help\n```\n\n```\n{\n  \"chardet\": {\n    \"version\": \"3.0.4\"\n  },\n  \"cryptography\": {\n    \"version\": \"2.8\"\n  },\n  \"idna\": {\n    \"version\": \"2.8\"\n  },\n  \"implementation\": {\n    \"name\": \"CPython\",\n    \"version\": \"3.8.0\"\n  },\n  \"platform\": {\n    \"release\": \"5.3.0-40-generic\",\n    \"system\": \"Linux\"\n  },\n  \"pyOpenSSL\": {\n    \"openssl_version\": \"1010104f\",\n    \"version\": \"19.1.0\"\n  },\n  \"requests\": {\n    \"version\": \"2.23.0\"\n  },\n  \"system_ssl\": {\n    \"version\": \"1010103f\"\n  },\n  \"urllib3\": {\n    \"version\": \"1.25.8\"\n  },\n  \"using_pyopenssl\": true\n}\n```",
    "hints_text": null,
    "created_at": "2020-04-05T16:52:04Z",
    "version": "2.26",
    "FAIL_TO_PASS": "[\"tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://.example.com]\"]",
    "PASS_TO_PASS": "[\"tests/test_requests.py::TestRequests::test_entry_points\", \"tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://*example.com]\", \"tests/test_requests.py::TestRequests::test_basic_building\", \"tests/test_requests.py::TestRequests::test_path_is_not_double_encoded\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default\", \"tests/test_requests.py::TestRequests::test_params_bytes_are_encoded\", \"tests/test_requests.py::TestRequests::test_binary_put\", \"tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url\", \"tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings\", \"tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]\", \"tests/test_requests.py::TestRequests::test_proxy_error\", \"tests/test_requests.py::TestRequests::test_non_prepared_request_error\", \"tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url\", \"tests/test_requests.py::TestRequests::test_links\", \"tests/test_requests.py::TestRequests::test_cookie_parameters\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keys\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_values\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_items\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error\", \"tests/test_requests.py::TestRequests::test_cookie_policy_copy\", \"tests/test_requests.py::TestRequests::test_empty_response_has_content_none\", \"tests/test_requests.py::TestRequests::test_response_is_iterable\", \"tests/test_requests.py::TestRequests::test_response_decode_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback\", \"tests/test_requests.py::TestRequests::test_response_chunk_size_type\", \"tests/test_requests.py::TestRequests::test_http_error\", \"tests/test_requests.py::TestRequests::test_transport_adapter_ordering\", \"tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching\", \"tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_mixed_case\", \"tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_is_case_insensitive\", \"tests/test_requests.py::TestRequests::test_long_authinfo_in_url\", \"tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_host_change\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_http_downgrade\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_https_upgrade\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_port_change\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com:443/foo-https://example.com/bar]\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com:80/foo-http://example.com/bar]\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com/foo-https://example.com:443/bar]\", \"tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com/foo-http://example.com:80/bar]\", \"tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream\", \"tests/test_requests.py::TestRequests::test_rewind_body\", \"tests/test_requests.py::TestRequests::test_rewind_partially_read_body\", \"tests/test_requests.py::TestRequests::test_rewind_body_no_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_tell\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\\\xd0\\\\xb8\\\\xd0\\\\xbc\\\\xd1\\\\x8f-\\\\xd0\\\\xbf\\\\xd0\\\\xb0\\\\xd1\\\\x80\\\\xd0\\\\xbe\\\\xd0\\\\xbb\\\\xd1\\\\x8c-Basic\", \"tests/test_requests.py::TestRequests::test_proxy_auth\", \"tests/test_requests.py::TestRequests::test_proxy_auth_empty_pass\", \"tests/test_requests.py::TestRequests::test_response_without_release_conn\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_len\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_contains\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_get\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_iter\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_equality\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_copy\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]\", \"tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]\", \"tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]\", \"tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]\", \"tests/test_requests.py::test_json_encodes_as_bytes\", \"tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data0]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data1]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data2]\", \"tests/test_requests.py::test_prepared_copy[None]\", \"tests/test_requests.py::test_prepared_copy[kwargs1]\", \"tests/test_requests.py::test_prepared_copy[kwargs2]\", \"tests/test_requests.py::test_prepared_copy[kwargs3]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\u30b8\\\\u30a7\\\\u30fc\\\\u30d4\\\\u30fc\\\\u30cb\\\\u30c3\\\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\xe3\\\\x82\\\\xb8\\\\xe3\\\\x82\\\\xa7\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x94\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x8b\\\\xe3\\\\x83\\\\x83\\\\xe3\\\\x82\\\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xdfe.de/stra\\\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xc3\\\\x9fe.de/stra\\\\xc3\\\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xf6nigsg\\\\xe4\\\\xdfchen.de/stra\\\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xc3\\\\xb6nigsg\\\\xc3\\\\xa4\\\\xc3\\\\x9fchen.de/stra\\\\xc3\\\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\\\u2603.net/]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]\"]",
    "environment_setup_commit": "a1a6a549a0143d9b32717dbe3d75cd543ae5a4f6",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15315",
    "base_commit": "652c68ffeebd510a6f59e1b56b3e007d07683ad8",
    "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -542,11 +542,7 @@ def __lt__(self, other):\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash((\n-            self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n-        ))\n+        return hash(self.creation_counter)\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n",
    "test_patch": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -128,9 +128,14 @@ class InheritAbstractModel2(AbstractModel):\n         self.assertLess(abstract_model_field, inherit2_model_field)\n         self.assertLess(inherit1_model_field, inherit2_model_field)\n \n-        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n-        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n-        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n \n \n class ChoicesTests(SimpleTestCase):\n",
    "problem_statement": "Il metodo `Field.__hash__()` dovrebbe essere immutabile.\nDescrizione\n\nIl valore di `Field.__hash__` cambia quando un campo viene assegnato a una classe modello.\nIl seguente codice genera un `AssertionError`:\n```python\nfrom django.db import models\nf = models.CharField(max_length=200)\nd = {f: 1}\nclass Book(models.Model):\n    title = f\nassert f in d\n```\nIl bug è stato introdotto in #31750.\nÈ improbabile che sia stato riscontrato perché ci sono pochi casi d'uso in cui un campo viene inserito in un dizionario *prima* di essere assegnato a una classe modello. Tuttavia, ho trovato una ragione per farlo durante l'implementazione di #26472 e il comportamento mi ha lasciato perplesso per un po'.\nA mio parere, possiamo ripristinare la modifica a `__hash__` da #31750. Gli oggetti con lo stesso hash vengono comunque controllati per l'uguaglianza, che è stata corretta in quel ticket. Tuttavia, è negativo se l'hash di un oggetto cambia, poiché ne compromette l'utilizzo nei dizionari.",
    "hints_text": null,
    "created_at": "2022-01-13T18:51:58Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_hash_immutability (model_fields.tests.BasicFieldTests)\"]",
    "PASS_TO_PASS": "[\"test_check (model_fields.tests.ChoicesTests)\", \"test_choices (model_fields.tests.ChoicesTests)\", \"test_flatchoices (model_fields.tests.ChoicesTests)\", \"test_formfield (model_fields.tests.ChoicesTests)\", \"test_invalid_choice (model_fields.tests.ChoicesTests)\", \"test_blank_in_choices (model_fields.tests.GetChoicesTests)\", \"test_blank_in_grouped_choices (model_fields.tests.GetChoicesTests)\", \"test_empty_choices (model_fields.tests.GetChoicesTests)\", \"test_lazy_strings_not_evaluated (model_fields.tests.GetChoicesTests)\", \"test_get_choices (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"get_choices() interacts with get_FIELD_display() to return the expected\", \"get_choices() works with empty iterators.\", \"A translated display value is coerced to str.\", \"get_choices() works with Iterators.\", \"test_overriding_FIELD_display (model_fields.tests.GetFieldDisplayTests)\", \"test_overriding_inherited_FIELD_display (model_fields.tests.GetFieldDisplayTests)\", \"Field instances from abstract models are not equal.\", \"Can supply a custom choices form class to Field.formfield()\", \"deconstruct() uses __qualname__ for nested class support.\", \"Field instances can be pickled.\", \"A defined field name (name=\\\"fieldname\\\") is used instead of the model\", \"Fields are ordered based on their creation.\", \"__repr__() of a field displays its name.\", \"__repr__() uses __qualname__ for nested class support.\", \"test_field_str (model_fields.tests.BasicFieldTests)\", \"test_field_verbose_name (model_fields.tests.BasicFieldTests)\", \"Field.formfield() sets disabled for fields with choices.\", \"Fields with choices respect show_hidden_initial as a kwarg to\", \"test_get_choices (model_fields.tests.GetChoicesLimitChoicesToTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesLimitChoicesToTests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "psf/requests",
    "instance_id": "psf__requests-1724",
    "base_commit": "1ba83c47ce7b177efe90d5f51f7760680f72eda0",
    "patch": "diff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -12,7 +12,7 @@\n from collections import Mapping\n from datetime import datetime\n \n-from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse\n+from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse, builtin_str\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n@@ -309,6 +309,9 @@ def request(self, method, url,\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n+\n+        method = builtin_str(method)\n+\n         # Create the Request.\n         req = Request(\n             method = method.upper(),\n",
    "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -433,6 +433,11 @@ def test_unicode_multipart_post_fieldnames(self):\n         prep = r.prepare()\n         assert b'name=\"stuff\"' in prep.body\n         assert b'name=\"b\\'stuff\\'\"' not in prep.body\n+    \n+    def test_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n \n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n",
    "problem_statement": "I nomi dei metodi Unicode causano UnicodeDecodeError per alcune richieste in Python 2.7.2\nIl seguente esempio funziona correttamente:\n\n```\nfiles = {u'file': open(u'/usr/bin/diff', u'rb')}\nresponse = requests.request(method='POST', url=u'http://httpbin.org/post', files=files)\n```\n\nMa il seguente esempio (che utilizza `method=u'POST'` invece di `method='POST'`) produce un UnicodeDecodeError:\n\n```\nfiles = {u'file': open(u'/usr/bin/diff', u'rb')}\nresponse = requests.request(method=u'POST', url=u'http://httpbin.org/post', files=files)\n```\n\n```\nTraceback (most recent call last):\n  File \"/Users/hwkns/test_requests.py\", line 6, in <module>\n    response = requests.request(method=u'POST', url=u'http://httpbin.org/post', files=files)\n  File \"/Library/Python/2.7/site-packages/requests/api.py\", line 44, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/Library/Python/2.7/site-packages/requests/sessions.py\", line 335, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/Library/Python/2.7/site-packages/requests/sessions.py\", line 438, in send\n    r = adapter.send(request, **kwargs)\n  File \"/Library/Python/2.7/site-packages/requests/adapters.py\", line 292, in send\n    timeout=timeout\n  File \"/Library/Python/2.7/site-packages/requests/packages/urllib3/connectionpool.py\", line 428, in urlopen\n    body=body, headers=headers)\n  File \"/Library/Python/2.7/site-packages/requests/packages/urllib3/connectionpool.py\", line 280, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py\", line 955, in request\n    self._send_request(method, url, body, headers)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py\", line 989, in _send_request\n    self.endheaders(body)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py\", line 951, in endheaders\n    self._send_output(message_body)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py\", line 809, in _send_output\n    msg += message_body\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xcf in position 140: ordinal not in range(128)\n```\n\nLa mia ipotesi è che `u'POST'` stia inserendo Unicode nell'intestazione quando dovrebbe essere una stringa. Questo è dovuto al fatto che `sessions.py:313` è semplicemente:\n\n```\nreq.method = method.upper()\n```\n\nLa mia versione di requests è 1.2.3, ma vedo che lo stesso `.upper()` viene utilizzato nella fonte corrente.",
    "hints_text": "**Nessun testo da tradurre.**\n\nSembra che non ci sia alcun testo in inglese da tradurre in italiano. Se hai un testo specifico che desideri tradurre, per favore forniscilo e sarò felice di aiutarti.\n\n**Nota:** Il testo originale in inglese è assente, quindi non è possibile procedere con la traduzione.",
    "created_at": "2013-11-04T09:37:00Z",
    "version": "2.0",
    "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\"]",
    "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\"]",
    "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-23534",
    "base_commit": "832c24fec1046eaa544a4cab4c69e3af3e651759",
    "patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -791,7 +791,7 @@ def literal(s):\n         return tuple(result)\n     else:\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \n",
    "test_patch": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,4 @@\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -294,6 +295,7 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n+    assert type(symbols(('q:2', 'u:2'), cls=Function)[0][0]) == UndefinedFunction  # issue 23532\n \n     # issue 6675\n     def sym(s):\n",
    "problem_statement": "L'uso di simboli per creare funzioni non funziona se c'è un livello aggiuntivo di parentesi\nVersione Sympy == 1.10.1\r\n\r\nL'uso di `symbols` per creare oggetti simili a simboli come istanze di `Function` come mostrato nella [documentazione](https://docs.sympy.org/latest/modules/core.html?highlight=symbols#symbols) crea oggetti di classe `Symbol` invece di `Function` se c'è un livello aggiuntivo di parentesi.\r\n\r\nIl livello aggiuntivo di parentesi è necessario per decomporre l'output in tuple distinte.\r\n\r\nEsecuzione del codice:\r\n```\r\nq, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\r\nprint(type(q[0]))\r\n```\r\n#### Risultato atteso:\r\n<class 'sympy.core.function.UndefinedFunction'>\r\n\r\n#### Risultato effettivo: \r\n<class 'sympy.core.symbol.Symbol'>",
    "hints_text": null,
    "created_at": "2022-05-22T00:12:33Z",
    "version": "1.11",
    "FAIL_TO_PASS": "[\"test_symbols\"]",
    "PASS_TO_PASS": "[\"test_Str\", \"test_Symbol\", \"test_Dummy\", \"test_Dummy_force_dummy_index\", \"test_lt_gt\", \"test_no_len\", \"test_ineq_unequal\", \"test_Wild_properties\", \"test_symbols_become_functions_issue_3539\", \"test_unicode\", \"test_uniquely_named_symbol_and_Symbol\"]",
    "environment_setup_commit": "9a6104eab0ea7ac191a09c24f3e2d79dcd66bda5",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-4094",
    "base_commit": "a64cf2d5476e7bbda099b34c40b7be1880dbd39a",
    "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ def to_unstacked_dataset(self, dim, level=0):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}, drop=True).squeeze(drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n",
    "test_patch": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3031,6 +3031,14 @@ def test_to_stacked_array_dtype_dims(self):\n         assert y.dims == (\"x\", \"features\")\n \n     def test_to_stacked_array_to_unstacked_dataset(self):\n+\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n",
    "problem_statement": "`to_unstacked_dataset` non funziona per variabili con singola dimensione\n<!-- Un breve riepilogo del problema, se appropriato -->\n\n\n#### Esempio di Codice MCVE\n\n```python\narr = xr.DataArray(\n     np.arange(3),\n     coords=[(\"x\", [0, 1, 2])],\n )\ndata = xr.Dataset({\"a\": arr, \"b\": arr})\nstacked = data.to_stacked_array('y', sample_dims=['x'])\nunstacked = stacked.to_unstacked_dataset('y')\n# MergeError: conflicting values for variable 'y' on objects to be combined. You can skip this check by specifying compat='override'.\n```\n\n#### Output Atteso\nUn roundtrip funzionante.\n\n#### Descrizione del Problema\nHo bisogno di impilare un gruppo di variabili e successivamente disimpilarle, ma questo non funziona se le variabili hanno solo una singola dimensione.\n\n#### Versioni\n\n<details><summary>Output di <tt>xr.show_versions()</tt></summary>\n\nVERSIONI INSTALLATE\n------------------\ncommit: None\npython: 3.7.3 (default, Mar 27 2019, 22:11:17) \n[GCC 7.3.0]\npython-bits: 64\nOS: Linux\nOS-release: 4.15.0-96-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\nLC_ALL: None\nLANG: en_GB.UTF-8\nLOCALE: en_GB.UTF-8\nlibhdf5: 1.10.4\nlibnetcdf: 4.6.2\n\nxarray: 0.15.1\npandas: 1.0.3\nnumpy: 1.17.3\nscipy: 1.3.1\nnetCDF4: 1.4.2\npydap: None\nh5netcdf: None\nh5py: 2.10.0\nNio: None\nzarr: None\ncftime: 1.0.4.2\nnc_time_axis: None\nPseudoNetCDF: None\nrasterio: None\ncfgrib: None\niris: None\nbottleneck: None\ndask: 2.10.1\ndistributed: 2.10.0\nmatplotlib: 3.1.1\ncartopy: None\nseaborn: 0.10.0\nnumbagg: None\nsetuptools: 41.0.0\npip: 19.0.3\nconda: 4.8.3\npytest: 5.3.5\nIPython: 7.9.0\nsphinx: None\n\n\n</details>",
    "hints_text": null,
    "created_at": "2020-05-26T00:36:02Z",
    "version": "0.12",
    "FAIL_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\", \"xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords_cftime\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_exp[1]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\"]",
    "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "pylint-dev/pylint",
    "instance_id": "pylint-dev__pylint-4970",
    "base_commit": "40cc2ffd7887959157aaf469e09585ec2be7f528",
    "patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -390,6 +390,8 @@ def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:\n \n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n+        if self.min_lines == 0:\n+            return\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n",
    "test_patch": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -502,3 +502,11 @@ def test_get_map_data() -> None:\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n         assert tuple(expected_lines) == tuple(lines)\n+\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n",
    "problem_statement": "Impostando `min-similarity-lines` a `0` si dovrebbe impedire a pylint di controllare il codice duplicato\n### Problema attuale\n\nImpostando `min-similarity-lines` a `0` nel file rc non disabilita il controllo del codice duplicato, ma invece tratta ogni riga di codice come duplicata e genera molti errori.\n\n### Soluzione desiderata\n\nImpostando `min-similarity-lines` a `0` si dovrebbe disabilitare il controllo del codice duplicato.\r\n\r\nFunziona in questo modo in molti altri linter (come flake8). Impostando un valore numerico in flake8 a `0` (ad esempio `max-line-length`) si disabilita quel controllo.\n\n### Contesto aggiuntivo\n\n#214 richiede la possibilità di disabilitare `R0801`, ma è ancora aperto",
    "hints_text": "È un bel miglioramento, grazie per aver aperto la questione. Il modo per disabilitare il codice duplicato è utilizzare:\r\n```ini\r\n[MASTER]\r\ndisable=duplicate-code\r\n```\r\nCome hai visto nella questione 214, al momento è impossibile disabilitare il codice duplicato **in alcune parti del codice e non in altre**, ma si tratta di un problema completamente diverso.",
    "created_at": "2021-09-05T19:44:07Z",
    "version": "2.10",
    "FAIL_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_set_duplicate_lines_to_zero\"]",
    "PASS_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_ignore_comments\", \"tests/checkers/unittest_similar.py::test_ignore_docstrings\", \"tests/checkers/unittest_similar.py::test_ignore_imports\", \"tests/checkers/unittest_similar.py::test_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_pass\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_pass\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_pass\", \"tests/checkers/unittest_similar.py::test_no_hide_code_with_imports\", \"tests/checkers/unittest_similar.py::test_ignore_nothing\", \"tests/checkers/unittest_similar.py::test_lines_without_meaningful_content_do_not_trigger_similarity\", \"tests/checkers/unittest_similar.py::test_help\", \"tests/checkers/unittest_similar.py::test_no_args\", \"tests/checkers/unittest_similar.py::test_get_map_data\"]",
    "environment_setup_commit": "bc95cd34071ec2e71de5bca8ff95cc9b88e23814",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "scikit-learn/scikit-learn",
    "instance_id": "scikit-learn__scikit-learn-14983",
    "base_commit": "06632c0d185128a53c57ccc73b25b6408e90bb89",
    "patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1163,6 +1163,9 @@ def get_n_splits(self, X=None, y=None, groups=None):\n                      **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n@@ -2158,6 +2161,8 @@ def _build_repr(self):\n         try:\n             with warnings.catch_warnings(record=True) as w:\n                 value = getattr(self, key, None)\n+                if value is None and hasattr(self, 'cvargs'):\n+                    value = self.cvargs.get(key, None)\n             if len(w) and w[0].category == DeprecationWarning:\n                 # if the parameter is deprecated, don't show it\n                 continue\n",
    "test_patch": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -980,6 +980,17 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+\n def test_repeated_kfold_determinstic_split():\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n",
    "problem_statement": "RepeatedKFold e RepeatedStratifiedKFold non mostrano la stringa __repr__ corretta\n#### Descrizione\n\n`RepeatedKFold` e `RepeatedStratifiedKFold` non mostrano la stringa `__repr__` corretta.\n\n#### Passaggi/Codice per Riprodurre\n\n```python\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n>>> repr(RepeatedKFold())\n>>> repr(RepeatedStratifiedKFold())\n```\n\n#### Risultati Attesi\n\n```python\n>>> repr(RepeatedKFold())\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\n>>> repr(RepeatedStratifiedKFold())\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\n```\n\n#### Risultati Effettivi\n\n```python\n>>> repr(RepeatedKFold())\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\n>>> repr(RepeatedStratifiedKFold())\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\n```\n\n#### Versioni\n```\nSystem:\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\n   machine: Windows-10-10.0.16299-SP0\n\nBLAS:\n    macros:\n  lib_dirs:\ncblas_libs: cblas\n\nPython deps:\n       pip: 19.2.2\nsetuptools: 41.0.1\n   sklearn: 0.21.2\n     numpy: 1.16.4\n     scipy: 1.3.1\n    Cython: None\n    pandas: 0.24.2\n```",
    "hints_text": "La `__repr__` non è definita nella classe `_RepeatedSplit` da cui queste cross-validation ereditano. Una possibile correzione potrebbe essere:\r\n\r\n```diff\r\ndiff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\r\nindex ab681e89c..8a16f68bc 100644\r\n--- a/sklearn/model_selection/_split.py\r\n+++ b/sklearn/model_selection/_split.py\r\n@@ -1163,6 +1163,9 @@ class _RepeatedSplits(metaclass=ABCMeta):\r\n                      **self.cvargs)\r\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\r\n \r\n+    def __repr__(self):\r\n+        return _build_repr(self)\r\n+\r\n \r\n class RepeatedKFold(_RepeatedSplits):\r\n     \"\"\"Repeated K-Fold cross validator.\r\n```\r\n\r\nAvremmo bisogno di un test di regressione per verificare che venga stampata la rappresentazione corretta.\r\nCiao @glemaitre, sono interessato a lavorare su questa correzione e sul test di regressione. Non ho mai contribuito qui, quindi controllerò la guida per i contributi e i test adeguatamente prima di iniziare.\r\nGrazie @DrGFreeman, vai avanti.\r\nDopo aver aggiunto il metodo `__repr__` a `_RepeatedSplit`, la funzione `repr()` restituisce `None` per il parametro `n_splits`. Questo perché il parametro `n_splits` non è un attributo della classe stessa, ma è memorizzato nell'attributo di classe `cvargs`.\r\n\r\nModificherò la funzione `_build_repr` per includere i valori dei parametri memorizzati nell'attributo di classe `cvargs` se la classe ha questo attributo.",
    "created_at": "2019-09-14T15:31:18Z",
    "version": "0.22",
    "FAIL_TO_PASS": "[\"sklearn/model_selection/tests/test_split.py::test_repeated_cv_repr[RepeatedKFold]\", \"sklearn/model_selection/tests/test_split.py::test_repeated_cv_repr[RepeatedStratifiedKFold]\"]",
    "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_split.py::test_cross_validator_with_default_params\", \"sklearn/model_selection/tests/test_split.py::test_2d_y\", \"sklearn/model_selection/tests/test_split.py::test_kfold_valueerrors\", \"sklearn/model_selection/tests/test_split.py::test_kfold_indices\", \"sklearn/model_selection/tests/test_split.py::test_kfold_no_shuffle\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_no_shuffle\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[4-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[4-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[5-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[5-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[6-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[6-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[7-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[7-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[8-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[8-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[9-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[9-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[10-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios[10-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[4-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[4-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[6-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[6-True]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[7-False]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_kfold_label_invariance[7-True]\", \"sklearn/model_selection/tests/test_split.py::test_kfold_balance\", \"sklearn/model_selection/tests/test_split.py::test_stratifiedkfold_balance\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_kfold\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_kfold_stratifiedkfold_reproducibility\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_stratifiedkfold\", \"sklearn/model_selection/tests/test_split.py::test_kfold_can_detect_dependent_samples_on_digits\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[None-9-1-ShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[None-9-1-StratifiedShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[8-8-2-ShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[8-8-2-StratifiedShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[0.8-8-2-ShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_default_test_size[0.8-8-2-StratifiedShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_group_shuffle_split_default_test_size[None-8-2]\", \"sklearn/model_selection/tests/test_split.py::test_group_shuffle_split_default_test_size[7-7-3]\", \"sklearn/model_selection/tests/test_split.py::test_group_shuffle_split_default_test_size[0.7-7-3]\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_init\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_respects_test_size\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_iter\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_even\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_overlap_train_test_bug\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel\", \"sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel_many_labels\", \"sklearn/model_selection/tests/test_split.py::test_predefinedsplit_with_kfold_split\", \"sklearn/model_selection/tests/test_split.py::test_group_shuffle_split\", \"sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out\", \"sklearn/model_selection/tests/test_split.py::test_leave_group_out_changing_groups\", \"sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out_error_on_fewer_number_of_groups\", \"sklearn/model_selection/tests/test_split.py::test_repeated_cv_value_errors\", \"sklearn/model_selection/tests/test_split.py::test_repeated_kfold_determinstic_split\", \"sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_kfold\", \"sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_stratified_kfold\", \"sklearn/model_selection/tests/test_split.py::test_repeated_stratified_kfold_determinstic_split\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_errors\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[1.2-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[1.0-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[0.0-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[-0.2-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[0.8-1.2]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[0.8-1.0]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[0.8-0.0]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes1[0.8--0.2]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[-10-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[0-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[11-0.8]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[0.8--10]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[0.8-0]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_invalid_sizes2[0.8-11]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_default_test_size[None-7-3]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_default_test_size[8-8-2]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_default_test_size[0.8-8-2]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_pandas\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_sparse\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_mock_pandas\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_list_input\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[2.0-None]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[1.0-None]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[0.1-0.95]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[None-train_size3]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[11-None]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[10-None]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors[8-3]\", \"sklearn/model_selection/tests/test_split.py::test_shufflesplit_reproducible\", \"sklearn/model_selection/tests/test_split.py::test_stratifiedshufflesplit_list_input\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_allow_nans\", \"sklearn/model_selection/tests/test_split.py::test_check_cv\", \"sklearn/model_selection/tests/test_split.py::test_cv_iterable_wrapper\", \"sklearn/model_selection/tests/test_split.py::test_group_kfold\", \"sklearn/model_selection/tests/test_split.py::test_time_series_cv\", \"sklearn/model_selection/tests/test_split.py::test_time_series_max_train_size\", \"sklearn/model_selection/tests/test_split.py::test_nested_cv\", \"sklearn/model_selection/tests/test_split.py::test_build_repr\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_empty_trainset[ShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_empty_trainset[GroupShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_shuffle_split_empty_trainset[StratifiedShuffleSplit]\", \"sklearn/model_selection/tests/test_split.py::test_train_test_split_empty_trainset\", \"sklearn/model_selection/tests/test_split.py::test_leave_one_out_empty_trainset\", \"sklearn/model_selection/tests/test_split.py::test_leave_p_out_empty_trainset\"]",
    "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15104",
    "base_commit": "a7e7043c8746933dafce652507d3b821801cdc7d",
    "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ def only_relation_agnostic_fields(self, fields):\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n",
    "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,6 +2834,28 @@ def test_parse_number(self):\n                     expected_number,\n                 )\n \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n \n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n",
    "problem_statement": "**KeyError con il rilevatore automatico delle migrazioni e campo FK con riferimento codificato**  \n**Descrizione**  \n\nCiao,  \nho riscontrato questo problema in un vecchio progetto Django (probabilmente di 10 anni) con una miriade di modelli e probabilmente molte decisioni di progettazione discutibili.  \nIl sintomo è che l'esecuzione della nostra suite di test in modalità verbosa non funziona:  \n```\n$ python manage.py test -v 2\n```\nCreazione del database di test per l'alias 'default' ('test_project')...  \nOperazioni da eseguire:  \n Sincronizza app non migrate: [... circa 40 app]  \n Applica tutte le migrazioni: (nessuna)  \nSincronizzazione delle app senza migrazioni:  \n Creazione tabelle...  \n  Creazione tabella auth_permission  \n  Creazione tabella auth_group  \n  Creazione tabella auth_user  \n  Creazione tabella django_content_type  \n  Creazione tabella django_session  \n  Creazione tabella django_admin_log  \n  [... altre 100 o più tabelle]  \n  Esecuzione di SQL differiti...  \nEsecuzione delle migrazioni:  \n Nessuna migrazione da applicare.  \nTraceback (chiamata più recente per ultima):  \n File \"manage.py\", riga 17, in <module>  \n  execute_from_command_line(sys.argv)  \n File \"/django/core/management/__init__.py\", riga 401, in execute_from_command_line  \n  utility.execute()  \n File \"/django/core/management/__init__.py\", riga 395, in execute  \n  self.fetch_command(subcommand).run_from_argv(self.argv)  \n File \"/django/core/management/commands/test.py\", riga 23, in run_from_argv  \n  super().run_from_argv(argv)  \n File \"/django/core/management/base.py\", riga 330, in run_from_argv  \n  self.execute(*args, **cmd_options)  \n File \"/django/core/management/base.py\", riga 371, in execute  \n  output = self.handle(*args, **options)  \n File \"/django/core/management/commands/test.py\", riga 53, in handle  \n  failures = test_runner.run_tests(test_labels)  \n File \"/django/test/runner.py\", riga 697, in run_tests  \n  old_config = self.setup_databases(aliases=databases)  \n File \"/django/test/runner.py\", riga 618, in setup_databases  \n  self.parallel, **kwargs  \n File \"/django/test/utils.py\", riga 174, in setup_databases  \n  serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),  \n File \"/django/db/backends/base/creation.py\", riga 77, in create_test_db  \n  run_syncdb=True,  \n File \"/django/core/management/__init__.py\", riga 168, in call_command  \n  return command.execute(*args, **defaults)  \n File \"/django/core/management/base.py\", riga 371, in execute  \n  output = self.handle(*args, **options)  \n File \"/django/core/management/base.py\", riga 85, in wrapped  \n  res = handle_func(*args, **kwargs)  \n File \"/django/core/management/commands/migrate.py\", riga 227, in handle  \n  changes = autodetector.changes(graph=executor.loader.graph)  \n File \"/django/db/migrations/autodetector.py\", riga 43, in changes  \n  changes = self._detect_changes(convert_apps, graph)  \n File \"/django/db/migrations/autodetector.py\", riga 160, in _detect_changes  \n  self.generate_renamed_models()  \n File \"/django/db/migrations/autodetector.py\", riga 476, in generate_renamed_models  \n  model_fields_def = self.only_relation_agnostic_fields(model_state.fields)  \n File \"/django/db/migrations/autodetector.py\", riga 99, in only_relation_agnostic_fields  \n  del deconstruction[2]['to']  \n**KeyError: 'to'**  \n\nDopo aver indagato, ho scoperto che il colpevole è un campo ForeignKey personalizzato che codifica il suo argomento `to` (e quindi lo rimuove anche dai suoi kwargs decomposti). Sembra che il rilevatore automatico non apprezzi questa pratica.  \n\nEcco un test di riproduzione autonomo per replicare il problema:  \n```python\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.test import TestCase\n\nclass CustomFKField(models.ForeignKey):\n    def __init__(self, *args, **kwargs):\n        kwargs['to'] = 'testapp.HardcodedModel'\n        super().__init__(*args, **kwargs)\n\n    def deconstruct(self):\n        name, path, args, kwargs = super().deconstruct()\n        del kwargs[\"to\"]\n        return name, path, args, kwargs\n\nclass ReproTestCase(TestCase):\n    def test_reprodution(self):\n        before = ProjectState()\n        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n        after = ProjectState()\n        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n        changes = MigrationAutodetector(before, after)._detect_changes()\n        self.assertEqual(len(changes['testapp']), 1)\n```\nAnche se ammetto volentieri che il design del mio campo personalizzato potrebbe essere discutibile, non credo che sia errato e penso che il rilevatore automatico sia il vero responsabile qui.  \nModificando `del deconstruction[2]['to']` in `deconstruction[2].pop('to', None)` nella riga indicata dal traceback, la mia suite di test funziona di nuovo, in tutta la sua gloriosa verbosità. Mi sembra una correzione abbastanza innocua.",
    "hints_text": null,
    "created_at": "2021-11-19T20:46:58Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests)\"]",
    "PASS_TO_PASS": "[\"test_auto (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in index/unique_together.\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)\", \"test_add_model_order_with_respect_to_index_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"Fields are altered after deleting some index/unique_together.\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"#23452 - Empty unique/index_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"index/unique_together doesn't generate a migration if no\", \"index/unique_together also triggers on ordering changes.\", \"Tests unique_together and field removal detection & ordering\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests)\", \"test_partly_alter_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Removed fields will be removed after updating index/unique_together.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"Fields are renamed before updating index/unique_together.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-13794",
    "base_commit": "fe886eee36be8022f34cfe59aa61ff1c21fe01d9",
    "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -176,6 +176,12 @@ def __mod__(self, rhs):\n                 return str(self) % rhs\n             return self.__cast() % rhs\n \n+        def __add__(self, other):\n+            return self.__cast() + other\n+\n+        def __radd__(self, other):\n+            return other + self.__cast()\n+\n         def __deepcopy__(self, memo):\n             # Instances of this class are effectively immutable. It's just a\n             # collection of functions. So we don't need to do anything\n",
    "test_patch": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -2,6 +2,7 @@\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n@@ -46,6 +47,22 @@ def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n \n class FunctionTests(SimpleTestCase):\n \ndiff --git a/tests/utils_tests/test_functional.py b/tests/utils_tests/test_functional.py\n--- a/tests/utils_tests/test_functional.py\n+++ b/tests/utils_tests/test_functional.py\n@@ -184,6 +184,11 @@ class Foo:\n         with self.assertRaisesMessage(TypeError, msg):\n             Foo().cp\n \n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     def test_lazy_equality(self):\n         \"\"\"\n         == and != work correctly for Promises.\n",
    "problem_statement": "aggiungi filtro non è in grado di concatenare stringhe con stringa lazy\nDescrizione\n\nSe si prova a concatenare una stringa con una stringa lazy con il filtro aggiungi, il risultato è sempre la stringa vuota perché il filtro aggiungi genera un'eccezione (TypeError: può essere concatenato solo str (non \"__proxy__\") a str).",
    "hints_text": "Test.\nGrazie. Ho allegato un test.",
    "created_at": "2020-12-19T20:09:34Z",
    "version": "3.2",
    "FAIL_TO_PASS": "[\"test_lazy_add (utils_tests.test_functional.FunctionalTests)\", \"test_add08 (template_tests.filter_tests.test_add.AddTests)\", \"test_add09 (template_tests.filter_tests.test_add.AddTests)\"]",
    "PASS_TO_PASS": "[\"test_add (template_tests.filter_tests.test_add.FunctionTests)\", \"cached_property caches its value and behaves like a property.\", \"test_cached_property_auto_name (utils_tests.test_functional.FunctionalTests)\", \"Disallow this case because the decorated function wouldn't be cached.\", \"test_cached_property_reuse_same_name (utils_tests.test_functional.FunctionalTests)\", \"test_cached_property_set_name_not_called (utils_tests.test_functional.FunctionalTests)\", \"test_classproperty_getter (utils_tests.test_functional.FunctionalTests)\", \"test_classproperty_override_getter (utils_tests.test_functional.FunctionalTests)\", \"test_lazy (utils_tests.test_functional.FunctionalTests)\", \"lazy also finds base class methods in the proxy object\", \"lazy finds the correct (overridden) method implementation\", \"test_lazy_class_preparation_caching (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_equality (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_object_to_string (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_bytes (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_int (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_text (utils_tests.test_functional.FunctionalTests)\", \"test_add01 (template_tests.filter_tests.test_add.AddTests)\", \"test_add02 (template_tests.filter_tests.test_add.AddTests)\", \"test_add03 (template_tests.filter_tests.test_add.AddTests)\", \"test_add04 (template_tests.filter_tests.test_add.AddTests)\", \"test_add05 (template_tests.filter_tests.test_add.AddTests)\", \"test_add06 (template_tests.filter_tests.test_add.AddTests)\", \"test_add07 (template_tests.filter_tests.test_add.AddTests)\"]",
    "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sphinx-doc/sphinx",
    "instance_id": "sphinx-doc__sphinx-8595",
    "base_commit": "b19bce971e82f2497d67fdacdeca8db08ae0ba56",
    "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,7 @@ def get_module_members(self) -> Dict[str, ObjectMember]:\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+            if self.__all__ is None:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n",
    "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/empty_all.py b/tests/roots/test-ext-autodoc/target/empty_all.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/empty_all.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+docsting of empty_all module.\n+\"\"\"\n+__all__ = []\n+\n+\n+def foo():\n+    \"\"\"docstring\"\"\"\n+\n+\n+def bar():\n+    \"\"\"docstring\"\"\"\n+\n+\n+def baz():\n+    \"\"\"docstring\"\"\"\ndiff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -0,0 +1,27 @@\n+\"\"\"\n+    test_ext_autodoc_autocmodule\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension.  This tests mainly the Documenters; the auto\n+    directives are tested in a test source file translated by test_build.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n",
    "problem_statement": "**Beschrijf het probleem**\r\nautodoc: lege `__all__` attribuut wordt genegeerd\r\n\r\n**Om te reproduceren**\r\n```\r\n# example.py\r\n__all__ = []\r\n\r\n\r\ndef foo():\r\n    \"docstring\"\r\n\r\n\r\ndef bar():\r\n    \"docstring\"\r\n\r\n\r\ndef baz():\r\n    \"docstring\"\r\n```\r\n```\r\n# index.rst\r\n.. automodule:: example\r\n   :members:\r\n```\r\n\r\nAlle foo, bar en baz worden weergegeven.\r\n\r\n**Verwachte gedrag**\r\nGeen items zouden moeten worden weergegeven omdat `__all__` leeg is.\r\n\r\n**Uw project**\r\nNee\r\n\r\n**Schermafbeeldingen**\r\nNee\r\n\r\n**Omgevingsinformatie**\r\n- Besturingssysteem: Mac\r\n- Python-versie: 3.9.1\r\n- Sphinx-versie: HEAD van 3.x\r\n- Sphinx-extensies: sphinx.ext.autodoc\r\n- Extra tools: Nee\r\n\r\n**Aanvullende context**\r\nNee",
    "hints_text": null,
    "created_at": "2020-12-27T03:07:50Z",
    "version": "3.5",
    "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_automodule.py::test_empty_all\"]",
    "PASS_TO_PASS": "[]",
    "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "psf/requests",
    "instance_id": "psf__requests-1921",
    "base_commit": "3c88e520da24ae6f736929a750876e7654accc3d",
    "patch": "diff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -59,6 +59,8 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n         if v is None:\n             del merged_setting[k]\n \n+    merged_setting = dict((k, v) for (k, v) in merged_setting.items() if v is not None)\n+\n     return merged_setting\n \n \n",
    "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -211,6 +211,14 @@ def test_requests_in_history_are_not_overridden(self):\n         req_urls = [r.request.url for r in resp.history]\n         assert urls == req_urls\n \n+    def test_headers_on_session_with_None_are_not_sent(self):\n+        \"\"\"Do not send headers in Session.headers with None values.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = None\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n",
    "problem_statement": "Rimozione di un'intestazione predefinita di una sessione\n[La documentazione](http://docs.python-requests.org/en/latest/user/advanced/#session-objects) afferma che è possibile impedire l'invio di un'intestazione di sessione impostando il valore delle intestazioni su None negli argomenti del metodo. Ci si aspetterebbe (come [discusso su IRC](https://botbot.me/freenode/python-requests/msg/10788170/)) che questo funzioni anche per le intestazioni predefinite della sessione:\n\n``` python\nsession = requests.Session()\n# Non inviare Accept-Encoding\nsession.headers['Accept-Encoding'] = None\n```\n\nCiò che accade è che \"None\" viene inviato come valore dell'intestazione.\n\n```\nAccept-Encoding: None\n```\n\nPer riferimento, ecco un modo che funziona:\n\n``` python\ndel session.headers['Accept-Encoding']\n```",
    "hints_text": "Potremmo farlo, ma in realtà credo sempre di più che il dizionario degli header predefinito sia la scelta giusta qui.\n\n> Potremmo farlo, ma in realtà credo sempre di più che il dizionario degli header predefinito sia la scelta giusta qui.\n\nNon sono sicuro di cosa tu stia parlando.\n\n@sigmavirus24 Scusa, avevo già il contesto per questa issue. =)\n\nIn pratica, ti permettiamo di disattivare temporaneamente un header in questo modo:\n\n``` python\ns = requests.Session()\ns.get(url, headers={'Accept-Encoding': None})\n```\n\nMa se provi a disattivare permanentemente un header su una `Session` in modo analogo, ottieni un comportamento sorprendente:\n\n``` python\ns = requests.Session()\ns.headers['Accept-Encoding'] = None\ns.get(url)  # Invia l'header \"Accept-Encoding: None\"\n```\n\nLa domanda è: dovremmo permettere che l'esempio sopra funzioni, o dovremmo continuare a usare il comportamento `del`?\n\nIn realtà, penso che questo sia un bug nel modo in cui uniamo gli header prima di inviare una richiesta. Manderò una PR tra poco con una correzione.",
    "created_at": "2014-02-14T22:15:56Z",
    "version": "2.3",
    "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\"]",
    "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_items\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keys\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_values\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs\", \"test_requests.py::RequestsTestCase::test_param_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_pyopenssl_redirect\", \"test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_cookies_not_persisted\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_address_in_network\", \"test_requests.py::UtilsTestCase::test_dotted_netmask\", \"test_requests.py::UtilsTestCase::test_get_auth_from_url\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges\", \"test_requests.py::UtilsTestCase::test_is_ipv4_address\", \"test_requests.py::UtilsTestCase::test_is_valid_cidr\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str\", \"test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\"]",
    "environment_setup_commit": "3eb69be879063de4803f7f0152b83738a1c95ca4",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15127",
    "base_commit": "9a6e2df3a8f01ea761529bec48e5a8dc0ea9575b",
    "patch": "diff --git a/django/contrib/messages/apps.py b/django/contrib/messages/apps.py\n--- a/django/contrib/messages/apps.py\n+++ b/django/contrib/messages/apps.py\n@@ -1,7 +1,18 @@\n from django.apps import AppConfig\n+from django.contrib.messages.storage import base\n+from django.contrib.messages.utils import get_level_tags\n+from django.test.signals import setting_changed\n from django.utils.translation import gettext_lazy as _\n \n \n+def update_level_tags(setting, **kwargs):\n+    if setting == 'MESSAGE_TAGS':\n+        base.LEVEL_TAGS = get_level_tags()\n+\n+\n class MessagesConfig(AppConfig):\n     name = 'django.contrib.messages'\n     verbose_name = _(\"Messages\")\n+\n+    def ready(self):\n+        setting_changed.connect(update_level_tags)\n",
    "test_patch": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,7 +1,7 @@\n-from django.contrib.messages import constants, get_level, set_level, utils\n+from django.contrib.messages import constants, get_level, set_level\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n-from django.contrib.messages.storage import base, default_storage\n+from django.contrib.messages.storage import default_storage\n from django.contrib.messages.storage.base import Message\n from django.http import HttpRequest, HttpResponse\n from django.test import modify_settings, override_settings\n@@ -22,20 +22,6 @@ def add_level_messages(storage):\n     storage.add(constants.SUCCESS, 'This was a triumph.')\n \n \n-class override_settings_tags(override_settings):\n-    def enable(self):\n-        super().enable()\n-        # LEVEL_TAGS is a constant defined in the\n-        # django.contrib.messages.storage.base module, so after changing\n-        # settings.MESSAGE_TAGS, update that constant also.\n-        self.old_level_tags = base.LEVEL_TAGS\n-        base.LEVEL_TAGS = utils.get_level_tags()\n-\n-    def disable(self):\n-        super().disable()\n-        base.LEVEL_TAGS = self.old_level_tags\n-\n-\n class BaseTests:\n     storage_class = default_storage\n     levels = {\n@@ -47,7 +33,7 @@ class BaseTests:\n     }\n \n     def setUp(self):\n-        self.settings_override = override_settings_tags(\n+        self.settings_override = override_settings(\n             TEMPLATES=[{\n                 'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                 'DIRS': [],\n@@ -368,7 +354,7 @@ def test_level_tag(self):\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n-    @override_settings_tags(MESSAGE_TAGS={\n+    @override_settings(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n         constants.WARNING: '',\ndiff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py\n--- a/tests/messages_tests/tests.py\n+++ b/tests/messages_tests/tests.py\n@@ -1,8 +1,9 @@\n from unittest import mock\n \n from django.contrib.messages import constants\n+from django.contrib.messages.storage import base\n from django.contrib.messages.storage.base import Message\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class MessageTests(SimpleTestCase):\n@@ -15,3 +16,18 @@ def test_eq(self):\n         self.assertNotEqual(msg_1, msg_2)\n         self.assertNotEqual(msg_1, msg_3)\n         self.assertNotEqual(msg_2, msg_3)\n+\n+\n+class TestLevelTags(SimpleTestCase):\n+    message_tags = {\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        constants.SUCCESS: '',\n+        12: 'custom',\n+    }\n+\n+    @override_settings(MESSAGE_TAGS=message_tags)\n+    def test_override_settings_level_tags(self):\n+        self.assertEqual(base.LEVEL_TAGS, self.message_tags)\n",
    "problem_statement": "LEVEL_TAGS non aggiornato quando si utilizza @override_settings\nDescrizione\n\nQuando si leggono i messaggi all'interno dei test, i nuovi tag dei messaggi creati utilizzando @override_settings non vengono aggiornati.\nQuesto causa che la proprietà django.contrib.messages.storage.base.Message.level_tag restituisca una stringa vuota e non conosca i nuovi tag.",
    "hints_text": "Se non hai intenzione di fornire una patch (con un test), potresti fornire un codice minimo che dimostri il problema?\n`LEVEL_TAGS` è una costante definita nel modulo `django.contrib.messages.storage.base`, ecco perché deve essere aggiornata dopo aver modificato `MESSAGE_TAGS` (vedi #16574 e il hook `override_settings_tags()`). Dovrebbe essere possibile aggiungere un ricevitore `setting_changed` e aggiornare `LEVEL_TAGS` quando necessario.",
    "created_at": "2021-11-25T13:14:38Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_override_settings_level_tags (messages_tests.tests.TestLevelTags)\"]",
    "PASS_TO_PASS": "[\"test_eq (messages_tests.tests.MessageTests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-17029",
    "base_commit": "953f29f700a60fc09b08b2c2270c12c447490c6a",
    "patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -373,6 +373,7 @@ def clear_cache(self):\n \n         This is mostly used in tests.\n         \"\"\"\n+        self.get_swappable_settings_name.cache_clear()\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n",
    "test_patch": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -197,6 +197,17 @@ def test_get_model(self):\n         with self.assertRaises(ValueError):\n             apps.get_model(\"admin_LogEntry\")\n \n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        # Set cache.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        apps.clear_cache()\n+\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n+\n     @override_settings(INSTALLED_APPS=[\"apps.apps.RelabeledAppsConfig\"])\n     def test_relabeling(self):\n         self.assertEqual(apps.get_app_config(\"relabeled\").name, \"apps\")\n",
    "problem_statement": "`Apps.clear_cache()` non pulisce la cache di `get_swappable_settings_name`.\nDescrizione\n\nUtilizziamo `apps.clear_cache()` in django-stubs per poter reimpostare lo stato precedente nelle esecuzioni consecutive di mypy.\nCodice: ​https://github.com/typeddjango/django-stubs/pull/1601/files#diff-c49d8fe2cd0a58fad3c36ab3a88c7745e9622f3098e60cd512953eb17b8a1994R63-R64\nTuttavia, sembra che in questo modo non puliamo tutta la cache dell'oggetto, poiché `get_swappable_settings_name` (che è un `functools._lru_cache_wrapper`) non viene pulita.\nRitengo che questo non sia corretto. La documentazione di `.clear_cache` afferma: Pulisce tutte le cache interne, per i metodi che modificano il registro delle app.\nSembra che non sia questo il caso.\nPropongo di aggiungere: `self.get_swappable_settings_name.cache_clear()` alla funzione `def clear_cache`.\nSe altri sono d'accordo, creerò una PR.\nDiscussione originale: ​https://github.com/typeddjango/django-stubs/pull/1601#discussion_r1246344533",
    "hints_text": "Grazie per la segnalazione, accettata provvisoriamente.",
    "created_at": "2023-06-29T13:18:26Z",
    "version": "5.0",
    "FAIL_TO_PASS": "[\"test_clear_cache (apps.tests.AppsTests.test_clear_cache)\"]",
    "PASS_TO_PASS": "[\"test_app_default_auto_field (apps.tests.AppConfigTests.test_app_default_auto_field)\", \"test_default_auto_field_setting (apps.tests.AppConfigTests.test_default_auto_field_setting)\", \"If single element in __path__, use it (in preference to __file__).\", \"If the __path__ attr contains duplicate paths and there is no\", \"If the __path__ attr is empty, use __file__ if set.\", \"If the __path__ attr is empty and there is no __file__, raise.\", \"If path set as class attr, overrides __path__ and __file__.\", \"test_invalid_label (apps.tests.AppConfigTests.test_invalid_label)\", \"If the __path__ attr is length>1, use __file__ if set.\", \"If the __path__ attr is length>1 and there is no __file__, raise.\", \"If there is no __path__ attr, use __file__.\", \"If there is no __path__ or __file__, raise ImproperlyConfigured.\", \"If subclass sets path as class attr, no module attributes needed.\", \"test_repr (apps.tests.AppConfigTests.test_repr)\", \"A Py3.3+ namespace package with multiple locations cannot be an app.\", \"Multiple locations are ok only if app-config has explicit path.\", \"A Py3.3+ namespace package can be an app if it has only one path.\", \"Tests when INSTALLED_APPS contains an incorrect app config.\", \"test_duplicate_labels (apps.tests.AppsTests.test_duplicate_labels)\", \"test_duplicate_names (apps.tests.AppsTests.test_duplicate_names)\", \"Makes a new model at runtime and ensures it goes into the right place.\", \"Tests apps.get_app_config().\", \"Tests apps.get_app_configs().\", \"apps.get_containing_app_config() should raise an exception if\", \"Tests apps.get_model().\", \"App discovery should preserve stack traces. Regression test for #22920.\", \"Tests apps.is_installed().\", \"Tests apps.lazy_model_operation().\", \"Test for behavior when two models clash in the app registry.\", \"apps.get_models() raises an exception if apps.models_ready isn't True.\", \"The models in the models.py file were loaded correctly.\", \"Load an app that doesn't provide an AppConfig class.\", \"Tests when INSTALLED_APPS contains an app that doesn't exist, either\", \"test_no_such_app_config (apps.tests.AppsTests.test_no_such_app_config)\", \"test_no_such_app_config_with_choices (apps.tests.AppsTests.test_no_such_app_config_with_choices)\", \"Tests when INSTALLED_APPS contains a class that isn't an app config.\", \"Load an app that provides an AppConfig class.\", \"Tests the ready property of the main registry.\", \"test_relabeling (apps.tests.AppsTests.test_relabeling)\", \"Only one main registry can exist.\", \"Load an app that provides two AppConfig classes.\", \"Load an app that provides two AppConfig classes, one being the default.\", \"Load an app that provides two default AppConfig classes.\"]",
    "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-12308",
    "base_commit": "2e0f04507b17362239ba49830d26fec504d46978",
    "patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and value:\n+        try:\n+            return field.get_prep_value(value)\n+        except TypeError:\n+            return display_for_value(value, empty_value_display)\n     else:\n         return display_for_value(value, empty_value_display)\n \n",
    "test_patch": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,23 @@ def test_null_display_for_field(self):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, self.empty_value)\n+\n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
    "problem_statement": "I campi JSONField non vengono visualizzati correttamente nell'admin quando sono di sola lettura.\nDescrizione\n\nI valori JSONField vengono visualizzati come dizionari quando sono di sola lettura nell'admin.\nAd esempio, `{\"foo\": \"bar\"}` verrebbe visualizzato come `{'foo': 'bar'}`, che non è un JSON valido.\nCredo che la correzione consisterebbe nell'aggiungere un caso speciale in `django.contrib.admin.utils.display_for_field` per chiamare il metodo `prepare_value` del campo JSONField (senza chiamare direttamente `json.dumps` per gestire il caso di `InvalidJSONInput`).",
    "hints_text": "​PR\nLa patch proposta è problematica poiché la prima versione ha accoppiato contrib.postgres con .admin e quella attuale si basa sul nome del tipo, che è fragile e non tiene conto dell'ereditarietà. Potrebbe valere la pena attendere che #12990 venga implementato prima di procedere qui, poiché la patch potrà semplicemente fare affidamento sui controlli dell'istanza di django.db.models.JSONField da quel punto in poi.",
    "created_at": "2020-01-12T04:21:15Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"test_json_display_for_field (admin_utils.tests.UtilsTests)\", \"test_label_for_field (admin_utils.tests.UtilsTests)\"]",
    "PASS_TO_PASS": "[\"test_cyclic (admin_utils.tests.NestedObjectsTests)\", \"test_non_added_parent (admin_utils.tests.NestedObjectsTests)\", \"test_on_delete_do_nothing (admin_utils.tests.NestedObjectsTests)\", \"test_queries (admin_utils.tests.NestedObjectsTests)\", \"test_relation_on_abstract (admin_utils.tests.NestedObjectsTests)\", \"test_siblings (admin_utils.tests.NestedObjectsTests)\", \"test_unrelated_roots (admin_utils.tests.NestedObjectsTests)\", \"test_flatten (admin_utils.tests.UtilsTests)\", \"test_flatten_fieldsets (admin_utils.tests.UtilsTests)\", \"test_label_for_field_form_argument (admin_utils.tests.UtilsTests)\", \"test_label_for_property (admin_utils.tests.UtilsTests)\", \"test_list_display_for_value (admin_utils.tests.UtilsTests)\", \"test_list_display_for_value_boolean (admin_utils.tests.UtilsTests)\", \"test_null_display_for_field (admin_utils.tests.UtilsTests)\", \"test_number_formats_display_for_field (admin_utils.tests.UtilsTests)\", \"test_number_formats_with_thousand_separator_display_for_field (admin_utils.tests.UtilsTests)\", \"test_quote (admin_utils.tests.UtilsTests)\", \"test_related_name (admin_utils.tests.UtilsTests)\", \"test_safestring_in_field_label (admin_utils.tests.UtilsTests)\", \"test_values_from_lookup_field (admin_utils.tests.UtilsTests)\"]",
    "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "matplotlib/matplotlib",
    "instance_id": "matplotlib__matplotlib-24149",
    "base_commit": "af39f1edffcd828f05cfdd04f2e59506bb4a27bc",
    "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2182,11 +2182,19 @@ def _convert_dx(dx, x0, xconv, convert):\n                 x0 = cbook._safe_first_finite(x0)\n             except (TypeError, IndexError, KeyError):\n                 pass\n+            except StopIteration:\n+                # this means we found no finite element, fall back to first\n+                # element unconditionally\n+                x0 = cbook.safe_first_element(x0)\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n             except (TypeError, IndexError, KeyError):\n                 x = xconv\n+            except StopIteration:\n+                # this means we found no finite element, fall back to first\n+                # element unconditionally\n+                x = cbook.safe_first_element(xconv)\n \n             delist = False\n             if not np.iterable(dx):\n",
    "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8195,3 +8195,16 @@ def test_bar_leading_nan():\n         for b in rest:\n             assert np.isfinite(b.xy).all()\n             assert np.isfinite(b.get_width())\n+\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_bar_all_nan(fig_test, fig_ref):\n+    mpl.style.use(\"mpl20\")\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    ax_test.bar([np.nan], [np.nan])\n+    ax_test.bar([1], [1])\n+\n+    ax_ref.bar([1], [1]).remove()\n+    ax_ref.bar([1], [1])\n",
    "problem_statement": "[Bug]: ax.bar genera un'eccezione per dati tutti NaN su matplotlib 3.6.1 \n### Riepilogo del bug\n\n`ax.bar` genera un'eccezione nella versione 3.6.1 quando riceve solo dati NaN. Questo compromette irrimediabilmente la funzione di istogramma di seaborn (che disegna e rimuove una barra \"fantasma\" per attivare il ciclo dei colori).\n\n### Codice per la riproduzione\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nf, ax = plt.subplots()\nax.bar([np.nan], [np.nan])\n```\n\n### Risultato effettivo\n\n```python-traceback\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\nCell In [1], line 4\n      2 import matplotlib.pyplot as plt\n      3 f, ax = plt.subplots()\n----> 4 ax.bar([np.nan], [np.nan])[0].get_x()\n\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/__init__.py:1423, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\n   1420 @functools.wraps(func)\n   1421 def inner(ax, *args, data=None, **kwargs):\n   1422     if data is None:\n-> 1423         return func(ax, *map(sanitize_sequence, args), **kwargs)\n   1425     bound = new_sig.bind(ax, *args, **kwargs)\n   1426     auto_label = (bound.arguments.get(label_namer)\n   1427                   or bound.kwargs.get(label_namer))\n\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/axes/_axes.py:2373, in Axes.bar(self, x, height, width, bottom, align, **kwargs)\n   2371 x0 = x\n   2372 x = np.asarray(self.convert_xunits(x))\n-> 2373 width = self._convert_dx(width, x0, x, self.convert_xunits)\n   2374 if xerr is not None:\n   2375     xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\n\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/axes/_axes.py:2182, in Axes._convert_dx(dx, x0, xconv, convert)\n   2170 try:\n   2171     # attempt to add the width to x0; this works for\n   2172     # datetime+timedelta, for instance\n   (...)\n   2179     # removes the units from unit packages like `pint` that\n   2180     # wrap numpy arrays.\n   2181     try:\n-> 2182         x0 = cbook._safe_first_finite(x0)\n   2183     except (TypeError, IndexError, KeyError):\n   2184         pass\n\nFile ~/miniconda/envs/py310/lib/python3.10/site-packages/matplotlib/cbook/__init__.py:1749, in _safe_first_finite(obj, skip_nonfinite)\n   1746     raise RuntimeError(\"matplotlib does not \"\n   1747                        \"support generators as input\")\n   1748 else:\n-> 1749     return next(val for val in obj if safe_isfinite(val))\n\nStopIteration: \n```\n\n### Risultato atteso\n\nNella versione 3.6.0, questo restituisce un `BarCollection` con un rettangolo, avente `nan` per `x` e `height`.\n\n### Informazioni aggiuntive\n\nSuppongo che sia correlato a questo punto nelle note di rilascio:\n\n- Correzione del grafico a barre vuoto quando il primo elemento è NaN\n\nMa non conosco il contesto per indagare ulteriormente (potrebbero essere collegati a PR?)\n\nUlteriori debug:\n\n```python\nax.bar([np.nan], [0])  # Genera un'eccezione\nax.bar([0], [np.nan])  # Funziona\n```\n\nQuindi si tratta specificamente della posizione x.\n\n### Sistema operativo\n\nMacos\n\n### Versione di Matplotlib\n\n3.6.1\n\n### Backend di Matplotlib\n\n_Nessuna risposta_\n\n### Versione di Python\n\n_Nessuna risposta_\n\n### Versione di Jupyter\n\n_Nessuna risposta_\n\n### Installazione\n\npip",
    "hints_text": "Questo è il PR in questione: https://github.com/matplotlib/matplotlib/pull/23751 (anche se non ho verificato se sia la causa).\nGrazie @oscargus, sembra proprio che sia il colpevole: richiede il valore \"successivo\" finito e non gestisce l'eccezione `StopIteration` che si ottiene se non ce n'è uno.\n> che disegna e poi rimuove una barra \"fantasma\" per attivare il ciclo dei colori\n\nDovremmo sicuramente correggere questa regressione, ma c'è un modo migliore per seaborn di gestire i colori che non richieda l'aggiunta e la rimozione di artisti? Supponiamo che tu usi `np.nan` per evitare di attivare qualsiasi autoscaling?\n> Dovremmo sicuramente correggere questa regressione, ma c'è un modo migliore per seaborn di gestire i colori che non richieda l'aggiunta e la rimozione di artisti?\n\nSicuramente aperto a questo, ma non ne conosco nessuno! Non penso ci sia un'API pubblica per avanzare il ciclo delle proprietà? Per quanto ne so, si dovrebbe fare qualcosa come `ax._get_patches_for_fill.get_next_color()`.\n\n> Supponiamo che tu usi np.nan per evitare di attivare qualsiasi autoscaling?\n\nEsatto. In realtà, nella maggior parte dei casi, passo semplicemente dati vuoti, ma `ax.bar([], [])` non restituisce un artista (solo un `BarContainer` vuoto, quindi non funziona con quel modello. Vedi qui per maggiori dettagli: https://github.com/mwaskom/seaborn/blob/5386adc5a482ef3d0aef958ebf37d39ce0b06b88/seaborn/utils.py#L138\n\nCome commento meta, penso che questo non avrebbe dovuto essere milestone in modo così aggressivo? Il PR ha corretto un bug, ma era un bug vecchio, quindi forse avrebbe potuto aspettare la 3.7?\nSe ho capito correttamente, funzionava in 3.6.0 per il caso tutto-nan, ma non per un nan iniziale (e altri valori non-nan). Quindi, anche se un bug è stato corretto in 3.6.1, questo è stato introdotto lì.\n\n(Se la mia comprensione è sbagliata, allora sicuramente avrebbe potuto aspettare.)\n```diff\n✔ 15:28:08 $ git diff\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..de4a99f71d 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2182,11 +2182,19 @@ class Axes(_AxesBase):\n                 x0 = cbook._safe_first_finite(x0)\n             except (TypeError, IndexError, KeyError):\n                 pass\n+            except StopIteration:\n+                # questo significa che non abbiamo trovato alcun elemento finito, ricorriamo al primo\n+                # elemento in modo incondizionato\n+                x0 = cbook.safe_first_element(x0)\n\n             try:\n                 x = cbook._safe_first_finite(xconv)\n             except (TypeError, IndexError, KeyError):\n                 x = xconv\n+            except StopIteration:\n+                # questo significa che non abbiamo trovato alcun elemento finito, ricorriamo al primo\n+                # elemento in modo incondizionato\n+                x = cbook.safe_first_element(xconv)\n\n             delist = False\n             if not np.iterable(dx):\n```\n\nPenso che questa sia la correzione, devo committare la correzione e aggiungere un test.\n\n-----\n\nIl mio ricordo era che questo fosse una regressione dalla 3.5 alla 3.6, ma guardando l'issue collegata, era chiaramente sbagliato.",
    "created_at": "2022-10-12T22:00:54Z",
    "version": "3.6",
    "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\"]",
    "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\"]",
    "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "pydata/xarray",
    "instance_id": "pydata__xarray-4075",
    "base_commit": "19b088636eb7d3f65ab7a1046ac672e0689371d8",
    "patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,14 @@ def _sum_of_weights(\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # bool -> int, because ``xr.dot([True, True], [True, True])`` -> True\n+        # (and not 2); GH4074\n+        if self.weights.dtype == bool:\n+            sum_of_weights = self._reduce(\n+                mask, self.weights.astype(int), dim=dim, skipna=False\n+            )\n+        else:\n+            sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n",
    "test_patch": "diff --git a/xarray/tests/test_weighted.py b/xarray/tests/test_weighted.py\n--- a/xarray/tests/test_weighted.py\n+++ b/xarray/tests/test_weighted.py\n@@ -59,6 +59,18 @@ def test_weighted_sum_of_weights_nan(weights, expected):\n     assert_equal(expected, result)\n \n \n+def test_weighted_sum_of_weights_bool():\n+    # https://github.com/pydata/xarray/issues/4074\n+\n+    da = DataArray([1, 2])\n+    weights = DataArray([True, True])\n+    result = da.weighted(weights).sum_of_weights()\n+\n+    expected = DataArray(2)\n+\n+    assert_equal(expected, result)\n+\n+\n @pytest.mark.parametrize(\"da\", ([1.0, 2], [1, np.nan], [np.nan, np.nan]))\n @pytest.mark.parametrize(\"factor\", [0, 1, 3.14])\n @pytest.mark.parametrize(\"skipna\", (True, False))\n@@ -158,6 +170,17 @@ def test_weighted_mean_nan(weights, expected, skipna):\n     assert_equal(expected, result)\n \n \n+def test_weighted_mean_bool():\n+    # https://github.com/pydata/xarray/issues/4074\n+    da = DataArray([1, 1])\n+    weights = DataArray([True, True])\n+    expected = DataArray(1)\n+\n+    result = da.weighted(weights).mean()\n+\n+    assert_equal(expected, result)\n+\n+\n def expected_weighted(da, weights, dim, skipna, operation):\n     \"\"\"\n     Generate expected result using ``*`` and ``sum``. This is checked against\n",
    "problem_statement": "[bug] al passar pesos booleans a la mitjana ponderada\n<!-- Un resum curt del problema, si escau -->\n\n\n#### Mostre de codi MCVE\n<!-- Perquè els mantenidors puguin comprendre i prioritzar eficaçment els problemes, us demanem que publiqueu un \"Exemple Mínim, Complet i Verificable\" (MCVE): http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports -->\n\n```python\nimport numpy as np\nimport xarray as xr\n\ndta = xr.DataArray([1., 1., 1.])\nwgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))\n\ndta.weighted(wgt).mean()\n```\nRetorna \n\n```\n<xarray.DataArray ()>\narray(2.)\n```\n\n#### Sortida esperada\n```\n<xarray.DataArray ()>\narray(1.)\n```\n\n#### Descripció del problema\nPassar un array booleà com a pesos a la mitjana ponderada retorna un resultat incorrecte perquè els `pesos` no estan correctament normalitzats (en aquest cas). Internament, la `sum_of_weights` es calcula com\n\n```python\nxr.dot(dta.notnull(), wgt)\n```\nés a dir, el producte escalar de dos arrays booleans. Això dóna:\n```\n<xarray.DataArray ()>\narray(True)\n```\n\nCal convertir-lo a int o float:\n```python\nxr.dot(dta.notnull(), wgt * 1)                                                                                                                                                                         \n```\nque és correcte\n```\n<xarray.DataArray ()>\narray(2)\n```\n\n#### Versions\n\n<details><summary>Sortida de <tt>xr.show_versions()</tt></summary>\n\nVERSIONS INSTAL·LADES\n------------------\ncommit: None\npython: 3.7.6 | empaquetat per conda-forge | (default, Mar 23 2020, 23:03:20) \n[GCC 7.3.0]\npython-bits: 64\nOS: Linux\nOS-release: 5.3.0-51-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\nLC_ALL: None\nLANG: en_US.UTF-8\nLOCALE: en_US.UTF-8\nlibhdf5: 1.10.6\nlibnetcdf: 4.7.4\n\nxarray: 0.15.1\npandas: 1.0.3\nnumpy: 1.18.1\nscipy: 1.4.1\nnetCDF4: 1.5.3\npydap: None\nh5netcdf: None\nh5py: None\nNio: None\nzarr: None\ncftime: 1.1.1.2\nnc_time_axis: None\nPseudoNetCDF: None\nrasterio: 1.1.3\ncfgrib: None\niris: None\nbottleneck: None\ndask: 2.16.0\ndistributed: 2.16.0\nmatplotlib: 3.2.1\ncartopy: 0.17.0\nseaborn: None\nnumbagg: None\nsetuptools: 46.1.3.post20200325\npip: 20.1\nconda: None\npytest: 5.4.1\nIPython: 7.13.0\nsphinx: 3.0.3\n\n</details>",
    "hints_text": null,
    "created_at": "2020-05-18T18:42:05Z",
    "version": "0.12",
    "FAIL_TO_PASS": "[\"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_bool\", \"xarray/tests/test_weighted.py::test_weighted_mean_bool\"]",
    "PASS_TO_PASS": "[\"xarray/tests/test_weighted.py::test_weighted_non_DataArray_weights[True]\", \"xarray/tests/test_weighted.py::test_weighted_non_DataArray_weights[False]\", \"xarray/tests/test_weighted.py::test_weighted_weights_nan_raises[weights0-True]\", \"xarray/tests/test_weighted.py::test_weighted_weights_nan_raises[weights0-False]\", \"xarray/tests/test_weighted.py::test_weighted_weights_nan_raises[weights1-True]\", \"xarray/tests/test_weighted.py::test_weighted_weights_nan_raises[weights1-False]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_no_nan[weights0-3]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_no_nan[weights1-2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_no_nan[weights2-nan]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_no_nan[weights3-nan]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_nan[weights0-2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_nan[weights1-nan]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_nan[weights2-nan]\", \"xarray/tests/test_weighted.py::test_weighted_sum_of_weights_nan[weights3-1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-0-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-0-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-0-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-1-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-1-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-1-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-3.14-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-3.14-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[True-3.14-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-0-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-0-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-0-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-1-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-1-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-1-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-3.14-da0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-3.14-da1]\", \"xarray/tests/test_weighted.py::test_weighted_sum_equal_weights[False-3.14-da2]\", \"xarray/tests/test_weighted.py::test_weighted_sum_no_nan[weights0-5]\", \"xarray/tests/test_weighted.py::test_weighted_sum_no_nan[weights1-4]\", \"xarray/tests/test_weighted.py::test_weighted_sum_no_nan[weights2-0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[True-weights0-4]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[True-weights1-4]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[True-weights2-0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[True-weights3-0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[False-weights0-4]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[False-weights1-4]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[False-weights2-0]\", \"xarray/tests/test_weighted.py::test_weighted_sum_nan[False-weights3-0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-True-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-True-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-True-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-False-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-False-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[1-False-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-True-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-True-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-True-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-False-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-False-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[2-False-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-True-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-True-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-True-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-False-da0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-False-da1]\", \"xarray/tests/test_weighted.py::test_weighted_mean_equal_weights[3.14-False-da2]\", \"xarray/tests/test_weighted.py::test_weighted_mean_no_nan[weights0-1.6]\", \"xarray/tests/test_weighted.py::test_weighted_mean_no_nan[weights1-1.0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_no_nan[weights2-nan]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[True-weights0-2.0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[True-weights1-nan]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[True-weights2-nan]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[False-weights0-2.0]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[False-weights1-nan]\", \"xarray/tests/test_weighted.py::test_weighted_mean_nan[False-weights2-nan]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-None-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-True-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[True-False-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-None-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-True-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-True-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum_of_weights-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-sum-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-a]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-b]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-c]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-dim3]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-dim4]\", \"xarray/tests/test_weighted.py::test_weighted_operations_3D[False-False-False-mean-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[True-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[True-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[True-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[False-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[False-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_nonequal_coords[False-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-None-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-True-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[True-False-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-None-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-True-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-True-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum_of_weights-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-sum-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights0-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights1-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data0-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data0-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data1-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data1-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data2-dim_0]\", \"xarray/tests/test_weighted.py::test_weighted_operations_different_shapes[False-False-False-mean-shape_weights2-shape_data2-None]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-True-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-True-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-True-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-False-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-False-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[True-False-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-True-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-True-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-True-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-False-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-False-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[False-False-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-True-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-True-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-True-mean]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-False-sum_of_weights]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-False-sum]\", \"xarray/tests/test_weighted.py::test_weighted_operations_keep_attr[None-False-mean]\"]",
    "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-15572",
    "base_commit": "0b31e024873681e187b574fe1c4afe5e48aeeecf",
    "patch": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -17,7 +17,7 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir)\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n@@ -25,7 +25,7 @@ def get_template_directories():\n             items.update(\n                 cwd / to_path(directory)\n                 for directory in loader.get_dirs()\n-                if not is_django_path(directory)\n+                if directory and not is_django_path(directory)\n             )\n     return items\n \n",
    "test_patch": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -81,6 +81,17 @@ def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n     @override_settings(\n         TEMPLATES=[\n             {\n",
    "problem_statement": "Django 3.2.4+ autoricarica si interrompe su stringa vuota in TEMPLATES DIRS.\nDescrizione\n\nLe versioni di Django > 3.2.3 cambiano il modo in cui le directory dei modelli vengono gestite, ora vengono normalizzate utilizzando pathlib.Path.\nLe persone con un valore non valido in TEMPLATESDIRS? noteranno che l'autoricarica smette di funzionare.\n\"DIRS\": os.getenv(\"TEMPLATES_DIRS\", \"\").split(\",\") # sbagliato, dovrebbe essere filter(None, os.getenv(\"TEMPLATES_DIRS\", \"\").split(\",\"))\no qualsiasi altra cosa che produca questo:\n\"DIRS\": [''] # sbagliato\ninterromperà l'autoricarica.\nQuesto accade perché django/template/autoreload.py::template_changed confrontava precedentemente la stringa vuota con una directory, e non avrebbe mai corrisposto. Ora la normalizzazione trasforma la stringa vuota nella radice del progetto. Il risultato è che template_changed() ora restituirà sempre True, impedendo l'autoricarica quando il codice dell'app cambia.\nCambio che ha prodotto la regressione\nhttps://code.djangoproject.com/ticket/32744\nCommit in main e stable/3.2.x:\n​https://github.com/django/django/commit/68357b2ca9e88c40fc00d848799813241be39129\n​https://github.com/django/django/commit/c0d506f5ef253f006dbff0b0092c8eecbd45eedf\nSegnalazioni precedenti\n[Errore di ricarica del server...](https://code.djangoproject.com/ticket/33285)\n[Auto-reload non rileva le modifiche in Django 3.2](https://code.djangoproject.com/ticket/33266)\n[Autoreloader non funziona su Windows 10](https://code.djangoproject.com/ticket/32630)",
    "hints_text": null,
    "created_at": "2022-04-09T09:38:31Z",
    "version": "4.1",
    "FAIL_TO_PASS": "[\"test_template_dirs_ignore_empty_path (template_tests.test_autoreloader.TemplateReloadTests)\"]",
    "PASS_TO_PASS": "[\"test_get_template_directories (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_get_template_directories (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_non_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_non_template_changed_in_template_directory (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_template_dirs_normalized_to_paths (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.TemplateReloadTests)\"]",
    "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "django/django",
    "instance_id": "django__django-11964",
    "base_commit": "fc2b1cc926e34041953738e58fa6ad3053059b22",
    "patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,7 +60,13 @@ def values(cls):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        \"\"\"\n+        Use value when cast to str, so that Choices set as model instance\n+        attributes are rendered as expected in templates and similar contexts.\n+        \"\"\"\n+        return str(self.value)\n \n \n class IntegerChoices(int, Choices):\n",
    "test_patch": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -143,6 +143,12 @@ class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n \n class Separator(bytes, models.Choices):\n     FS = b'\\x1c', 'File Separator'\n",
    "problem_statement": "Il valore di un campo TextChoices/IntegerChoices ha un tipo diverso\nDescrizione\n\nSe creiamo un'istanza di un modello con un campo CharField o IntegerField che utilizza la parola chiave choices per puntare a IntegerChoices o TextChoices, il valore restituito dal getter del campo sarà dello stesso tipo di quello creato da enum.Enum (valore enum).\nAd esempio, questo modello:\n```python\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass MyChoice(models.TextChoices):\n    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n\nclass MyObject(models.Model):\n    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n```\nPoi questo test:\n```python\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\n\nclass EnumTest(TestCase):\n    def setUp(self) -> None:\n        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n\n    def test_created_object_is_str(self):\n        my_object = self.my_object\n        self.assertIsInstance(my_object.my_str_value, str)\n        self.assertEqual(str(my_object.my_str_value), \"first\")\n\n    def test_retrieved_object_is_str(self):\n        my_object = MyObject.objects.last()\n        self.assertIsInstance(my_object.my_str_value, str)\n        self.assertEqual(str(my_object.my_str_value), \"first\")\n```\nE poi i risultati:\n```\n(django30-venv) ➜ django30 ./manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF.\n======================================================================\nFAIL: test_created_object_is_str (testing.tests.EnumTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/mikailkocak/Development/django30/testing/tests.py\", line 14, in test_created_object_is_str\n    self.assertEqual(str(my_object.my_str_value), \"first\")\nAssertionError: 'MyChoice.FIRST_CHOICE' != 'first'\n- MyChoice.FIRST_CHOICE\n+ first\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\n```\nNotiamo che quando invochiamo `__str__(...)`, non otteniamo effettivamente la proprietà value del valore enum, il che può portare a problemi inaspettati, soprattutto quando si comunica con un'API esterna con un'istanza appena creata che invierà `MyEnum.MyValue`, mentre quella recuperata invierà `my_value`.",
    "hints_text": "Ciao NyanKiyoshi, che bel report. Grazie. Chiaramente :) il comportamento atteso è che `test_created_object_is_str` dovrebbe passare. È interessante che i valori sottostanti di `__dict__` differiscano, il che spiega tutto, suppongo: Creato: {'_state': <django.db.models.base.ModelState object at 0x10730efd0>, 'id': 1, 'my_str_value': <MyChoice.FIRST_CHOICE: 'first'>} Recuperato: {'_state': <django.db.models.base.ModelState object at 0x1072b5eb8>, 'id': 1, 'my_str_value': 'first'} Ottima osservazione. Grazie ancora.\nProgetto di esempio con i modelli forniti. Esegui `./manage.py test`",
    "created_at": "2019-10-23T14:16:45Z",
    "version": "3.1",
    "FAIL_TO_PASS": "[\"test_str (model_enums.tests.ChoicesTests)\", \"test_textchoices (model_enums.tests.ChoicesTests)\"]",
    "PASS_TO_PASS": "[\"test_integerchoices (model_enums.tests.ChoicesTests)\", \"test_integerchoices_auto_label (model_enums.tests.ChoicesTests)\", \"test_integerchoices_containment (model_enums.tests.ChoicesTests)\", \"test_integerchoices_empty_label (model_enums.tests.ChoicesTests)\", \"test_integerchoices_functional_api (model_enums.tests.ChoicesTests)\", \"test_invalid_definition (model_enums.tests.ChoicesTests)\", \"test_textchoices_auto_label (model_enums.tests.ChoicesTests)\", \"test_textchoices_blank_value (model_enums.tests.ChoicesTests)\", \"test_textchoices_containment (model_enums.tests.ChoicesTests)\", \"test_textchoices_empty_label (model_enums.tests.ChoicesTests)\", \"test_textchoices_functional_api (model_enums.tests.ChoicesTests)\", \"test_bool_unsupported (model_enums.tests.CustomChoicesTests)\", \"test_labels_valid (model_enums.tests.CustomChoicesTests)\", \"test_timezone_unsupported (model_enums.tests.CustomChoicesTests)\", \"test_uuid_unsupported (model_enums.tests.CustomChoicesTests)\"]",
    "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
    "difficulty": "<15 min fix"
  },
  {
    "repo": "sympy/sympy",
    "instance_id": "sympy__sympy-13480",
    "base_commit": "f57fe3f4b3f2cab225749e1b3b38ae1bf80b62f0",
    "patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n",
    "test_patch": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,6 +272,8 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n \n def test_coth_series():\n     x = Symbol('x')\n",
    "problem_statement": "`.subs` su `coth(log(tan(x)))` genera errori per alcuni valori interi specifici\n    >>> from sympy import *\r\n    >>> x = Symbol('x')\r\n    >>> e = coth(log(tan(x)))\r\n    >>> print(e.subs(x, 2))\r\n    ...\r\n    File \"C:\\Users\\E\\Desktop\\sympy-master\\sympy\\functions\\elementary\\hyperbolic.py\", line 590, in eval\r\n        if cotm is S.ComplexInfinity:\r\n    NameError: name 'cotm' is not defined\r\n\r\nFallisce per 2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18, ... ecc.",
    "hints_text": "C'è un errore di battitura alla [riga 590](https://github.com/sympy/sympy/blob/master/sympy/functions/elementary/hyperbolic.py#L590): `cotm` dovrebbe essere `cothm`.",
    "created_at": "2017-10-18T17:27:03Z",
    "version": "1.1",
    "FAIL_TO_PASS": "[\"test_coth\"]",
    "PASS_TO_PASS": "[\"test_sinh\", \"test_sinh_series\", \"test_cosh\", \"test_cosh_series\", \"test_tanh\", \"test_tanh_series\", \"test_coth_series\", \"test_csch\", \"test_csch_series\", \"test_sech\", \"test_sech_series\", \"test_asinh\", \"test_asinh_rewrite\", \"test_asinh_series\", \"test_acosh\", \"test_acosh_rewrite\", \"test_acosh_series\", \"test_asech\", \"test_asech_series\", \"test_asech_rewrite\", \"test_acsch\", \"test_acsch_infinities\", \"test_acsch_rewrite\", \"test_atanh\", \"test_atanh_rewrite\", \"test_atanh_series\", \"test_acoth\", \"test_acoth_rewrite\", \"test_acoth_series\", \"test_inverses\", \"test_leading_term\", \"test_complex\", \"test_complex_2899\", \"test_simplifications\", \"test_issue_4136\", \"test_sinh_rewrite\", \"test_cosh_rewrite\", \"test_tanh_rewrite\", \"test_coth_rewrite\", \"test_csch_rewrite\", \"test_sech_rewrite\", \"test_derivs\", \"test_sinh_expansion\"]",
    "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
    "difficulty": "<15 min fix"
  }
]